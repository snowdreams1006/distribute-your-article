{"code":0,"msg":"ok","data":{"total":65,"list":[{"id":2712,"type":40,"actionInfo":{"articleId":1409919,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554276357,"detail":{"id":1409919,"articleId":1409919,"title":"gitbook 入门教程之快速体验\n                                                                            原","content":"entityMap|0|type|IMAGE|mutability|IMMUTABLE|data|imageUrl|https://ask.qcloudimg.com/http-save/yehe-2952369/jfxmiz03ju.png|imageAlt|gitbook-serve-preview.png|1|https://ask.qcloudimg.com/http-save/yehe-2952369/n6hrxa6ewc.gif|gitbook-serve.gif|2|LINK|MUTABLE|url|https://legacy.gitbook.com/editor|3|https://ask.qcloudimg.com/http-save/yehe-2952369/zfm8gmdgi7.png|gitbook-editor-welcome.png|4|https://ask.qcloudimg.com/http-save/yehe-2952369/j866xp8ll2.png|gitbook-editor-library-preview.png|5|https://ask.qcloudimg.com/http-save/yehe-2952369/rzf9b56zjj.png|gitbook-editor-library-chose.png|6|https://ask.qcloudimg.com/http-save/yehe-2952369/tsqd8rddb8.png|gitbook-editor-demo-preview.png|7|https://ask.qcloudimg.com/http-save/yehe-2952369/ffk5lmdvy0.png|gitbook-editor-serve-preview.png|8|https://www.gitbook.com/|9|10|https://legacy.gitbook.com/|11|blocks|key|7ck5j|text|unstyled|depth|inlineStyleRanges|entityRanges|2q13g|本文主要介绍三种使用+gitbook+的方式,分别是+gitbook+命令行工具,Gitbook+Editor+官方编辑器和+gitbook.com+官网.|offset|length|style|CODE|4p5uh|总体来说,三种途径适合各自不同的人群,找到适合自己的方式就好,基本操作流程都是一样的.|74on6|命令行工具更适合具备编程经验开发者,具有简单高效易整合等特点.|unordered-list-item|dunqb|编辑器更适合无任何编程经验的文学创作者,不熟悉+markdown+语法,不熟悉+git+工作流,这种情况下也推荐使用图形化操作的编辑器.|24dql|官网适合想要快速体验+gitbook+效果的萌新,只有觉得物超所值才能有动力搭建+gitbook+开发环境,不是吗?|4mp6v|+当然,如果你想访问官网的话,你可能需要学会科学上网,网址见文章结尾.\n+|blockquote|7aro6|gitbook+命令行|header-two|1tdhi|首先需要创建存放书籍的目录,然后对该目录进行初始化,最后启动本地服务即可体验效果.|bqinf|初始化项目|header-three|ffj84|+语法格式:+gitbook+init\n+|5bim|如果是空目录会自动创建+README.md+和+SUMMARY.md+两个文件,当然也可以手动创建再初始化.|cc2ug|示例:|3846r|#+创建+`gitbook`+演示项目\n$+mkdir+gitbook-demo\n\n#+初始化项目\n$+gitbook+init\nwarn:+no+summary+file+in+this+book+\ninfo:+create+README.md+\ninfo:+create+SUMMARY.md+\ninfo:+initialization+is+finished+\n\n#+当前目录结构\n$+tree+\n.\n├──+README.md\n└──+SUMMARY.md\n\n0+directories,+2+files\n$+|code-block|syntax|javascript|25smf|+gitbook+init+命令可能会自动生成+README.md+和+SUMMARY.md+两个文件,如已存在则更新.\n+|7g6ca|运行项目|6ub3k|+语法格式:+gitbook+serve\n+|euibv|将初始化后的项目启动成为一个本地服务,我们可以直接在浏览器访问项目,预览书籍效果.|ana8m|en641|#+启动本地服务器\n$+gitbook+serve\nLive+reload+server+started+on+port:+35729\nPress+CTRL%2BC+to+quit+...\n\ninfo:+7+plugins+are+installed+\ninfo:+loading+plugin+\"livereload\"...+OK+\ninfo:+loading+plugin+\"highlight\"...+OK+\ninfo:+loading+plugin+\"search\"...+OK+\ninfo:+loading+plugin+\"lunr\"...+OK+\ninfo:+loading+plugin+\"sharing\"...+OK+\ninfo:+loading+plugin+\"fontsettings\"...+OK+\ninfo:+loading+plugin+\"theme-default\"...+OK+\ninfo:+found+1+pages+\ninfo:+found+0+asset+files+\ninfo:+>>+generation+finished+with+success+in+1.2s+!+|22pj|?|atomic|9uktc|如果要停止服务器,只需同时按住+CTRL%2BC+即可,现在再看一下+gitbook-demo+目录结构.|ljl8|$+tree\n.\n├──+README.md\n├──+SUMMARY.md\n└──+_book\n++++├──+gitbook\n++++│  +├──+fonts\n++++│  +│  +└──+fontawesome\n++++│  +│  +++++├──+FontAwesome.otf\n++++│  +│  +++++├──+fontawesome-webfont.eot\n++++│  +│  +++++├──+fontawesome-webfont.svg\n++++│  +│  +++++├──+fontawesome-webfont.ttf\n++++│  +│  +++++├──+fontawesome-webfont.woff\n++++│  +│  +++++└──+fontawesome-webfont.woff2\n++++│  +├──+gitbook-plugin-fontsettings\n++++│  +│  +├──+fontsettings.js\n++++│  +│  +└──+website.css\n++++│  +├──+gitbook-plugin-highlight\n++++│  +│  +├──+ebook.css\n++++│  +│  +└──+website.css\n++++│  +├──+gitbook-plugin-livereload\n++++│  +│  +└──+plugin.js\n++++│  +├──+gitbook-plugin-lunr\n++++│  +│  +├──+lunr.min.js\n++++│  +│  +└──+search-lunr.js\n++++│  +├──+gitbook-plugin-search\n++++│  +│  +├──+lunr.min.js\n++++│  +│  +├──+search-engine.js\n++++│  +│  +├──+search.css\n++++│  +│  +└──+search.js\n++++│  +├──+gitbook-plugin-sharing\n++++│  +│  +└──+buttons.js\n++++│  +├──+gitbook.js\n++++│  +├──+images\n++++│  +│  +├──+apple-touch-icon-precomposed-152.png\n++++│  +│  +└──+favicon.ico\n++++│  +├──+style.css\n++++│  +└──+theme.js\n++++├──+index.html\n++++└──+search_index.json\n\n11+directories,+27+files\n$+|4p99p|+gitbook+serve+命令可能会自动生成+_book+目录,如已存在则更新.\n+|4mt8t|7032o|gitbook+editor+编辑器|3clgh|下载+gitbook+editor+并安装,如果下载遇到困难,可以找我来帮忙哟!|3m1l9|2kkf7|+如果你没有梯子,可以暂不登录(Do+that+Later),只不过无法与+gitbook.com+保持同步.\n+|2o2p5|更改图书路径|enrv3|更改默认图书存放位置(Gitbook+Editor+=>+Change+Library+Path...),以后图书目录都在该目录下,比如设置的是+.../gitbook-editor/+图书目录.|75hnn|4tn39|5v0e6|新建图书|6ovdm|新建图书项目,名字仍然是+gitbook-demo,这样方便比较和命令行创建的+gitbook-demo+区别.|djpcl|6kslc|+图形化操作界面总体来说还是很容易上手的,自己好好研究一下即可,这里仅仅演示默认效果.\n+|67p3j|启动项目|9smk3|现在先找到新建图书的具体目录,然后再启动本地服务器,同样地,我们在浏览器中体验电子书效果.|7lccj|+图书项目路径:+/workspace/gitbook-editor/Import/gitbook-demo,其中+/workspace/gitbook-editor/+是上一步更改的图书路径.\n+|2q0a7|#+启动本地服务器\n$+gitbook+serve|71m5s|+这里不再需要运行+gitbook+init+命令了,因为已经创建过+README.md+和+SUMMARY.md+这两个文件.\n+|9f8gg|e3ds1|+Gitbook+Editor+编辑器新建的图书项目和+gitbook-cli+创建的图书项目本质上并没有什么不同,只不过编辑器集成了常用功能而已!\n+|6ba4s|gitbook.com+网站|7leu7|由于受网络因素所限,暂时不分享这部分知识了,简单来说就是在线编辑并发布电子书,这一点和+github+的代码托管服务类似.|58kqq|gitbook+新版官网(需要FQ)+:+https://www.gitbook.com/|86pdl|gitbook+旧版官网(无需FQ)+:+https://legacy.gitbook.com|886gu|小结|6s00m|初始化项目+:+gitbook+init|4bf83|启动项目+:+gitbook+serve|359ng|默认访问地址:+http://localhost:4000|c0ta8|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|B|7|R|7|15|E|1R|B|0|0|0|O|8|14|3|0|B|7|15|7|0|0|0|7|0|0|0|7|C|0|C|9|O|A|0|0|0|1|C|O|9|10|A|0|0|7|D|0|0|0|0|0|1|0|0|G|6|X|C|0|0|1|D|P|5|0|0|1|1|0|0|E|0|3|E|2|0|0|1|3|0|12|B|0|0|B|14|21|J|0|0|1|4|0|0|1|5|0|0|D|C|14|C|0|0|1|6|0|0|0|0|9|19|1M|Q|0|0|A|C|Z|9|1B|A|0|0|1|7|0|1|E|S|B|0|0|B|0|18|6|0|0|I|8|L|O|9|0|0|I|A|L|Q|B|0|0|8|C|0|7|D|0|8|L|0^^$0|$1|$2|3|4|5|6|$7|8|9|A]]|B|$2|3|4|5|6|$7|C|9|D]]|E|$2|F|4|G|6|$H|I]]|J|$2|3|4|5|6|$7|K|9|L]]|M|$2|3|4|5|6|$7|N|9|O]]|P|$2|3|4|5|6|$7|Q|9|R]]|S|$2|3|4|5|6|$7|T|9|U]]|V|$2|3|4|5|6|$7|W|9|X]]|Y|$2|F|4|G|6|$H|Z]]|10|$2|F|4|G|6|$H|Z]]|11|$2|F|4|G|6|$H|12]]|13|$2|F|4|G|6|$H|12]]]|14|@$15|16|17|-4|2|18|19|4D|1A|@]|1B|@]|6|$]]|$15|1C|17|1D|2|18|19|4E|1A|@$1E|4F|1F|4G|1G|1H]|$1E|4H|1F|4I|1G|1H]|$1E|4J|1F|4K|1G|1H]|$1E|4L|1F|4M|1G|1H]]|1B|@]|6|$]]|$15|1I|17|1J|2|18|19|4N|1A|@]|1B|@]|6|$]]|$15|1K|17|1L|2|1M|19|4O|1A|@]|1B|@]|6|$]]|$15|1N|17|1O|2|1M|19|4P|1A|@$1E|4Q|1F|4R|1G|1H]|$1E|4S|1F|4T|1G|1H]]|1B|@]|6|$]]|$15|1P|17|1Q|2|1M|19|4U|1A|@$1E|4V|1F|4W|1G|1H]|$1E|4X|1F|4Y|1G|1H]]|1B|@]|6|$]]|$15|1R|17|1S|2|1T|19|4Z|1A|@]|1B|@]|6|$]]|$15|1U|17|1V|2|1W|19|50|1A|@$1E|51|1F|52|1G|1H]]|1B|@]|6|$]]|$15|1X|17|1Y|2|18|19|53|1A|@]|1B|@]|6|$]]|$15|1Z|17|20|2|21|19|54|1A|@]|1B|@]|6|$]]|$15|22|17|23|2|1T|19|55|1A|@$1E|56|1F|57|1G|1H]]|1B|@]|6|$]]|$15|24|17|25|2|18|19|58|1A|@$1E|59|1F|5A|1G|1H]|$1E|5B|1F|5C|1G|1H]]|1B|@]|6|$]]|$15|26|17|27|2|18|19|5D|1A|@]|1B|@]|6|$]]|$15|28|17|29|2|2A|19|5E|1A|@]|1B|@]|6|$2B|2C]]|$15|2D|17|2E|2|1T|19|5F|1A|@$1E|5G|1F|5H|1G|1H]|$1E|5I|1F|5J|1G|1H]|$1E|5K|1F|5L|1G|1H]]|1B|@]|6|$]]|$15|2F|17|2G|2|21|19|5M|1A|@]|1B|@]|6|$]]|$15|2H|17|2I|2|1T|19|5N|1A|@$1E|5O|1F|5P|1G|1H]]|1B|@]|6|$]]|$15|2J|17|2K|2|18|19|5Q|1A|@]|1B|@]|6|$]]|$15|2L|17|27|2|18|19|5R|1A|@]|1B|@]|6|$]]|$15|2M|17|2N|2|2A|19|5S|1A|@]|1B|@]|6|$2B|2C]]|$15|2O|17|2P|2|2Q|19|5T|1A|@]|1B|@$1E|5U|1F|5V|15|5W]]|6|$]]|$15|2R|17|2S|2|18|19|5X|1A|@$1E|5Y|1F|5Z|1G|1H]|$1E|60|1F|61|1G|1H]]|1B|@]|6|$]]|$15|2T|17|2U|2|2A|19|62|1A|@]|1B|@]|6|$2B|2C]]|$15|2V|17|2W|2|1T|19|63|1A|@$1E|64|1F|65|1G|1H]|$1E|66|1F|67|1G|1H]]|1B|@]|6|$]]|$15|2X|17|2P|2|2Q|19|68|1A|@]|1B|@$1E|69|1F|6A|15|6B]]|6|$]]|$15|2Y|17|2Z|2|1W|19|6C|1A|@$1E|6D|1F|6E|1G|1H]]|1B|@]|6|$]]|$15|30|17|31|2|18|19|6F|1A|@]|1B|@$1E|6G|1F|6H|15|6I]]|6|$]]|$15|32|17|2P|2|2Q|19|6J|1A|@]|1B|@$1E|6K|1F|6L|15|6M]]|6|$]]|$15|33|17|34|2|1T|19|6N|1A|@$1E|6O|1F|6P|1G|1H]]|1B|@]|6|$]]|$15|35|17|36|2|21|19|6Q|1A|@]|1B|@]|6|$]]|$15|37|17|38|2|18|19|6R|1A|@$1E|6S|1F|6T|1G|1H]|$1E|6U|1F|6V|1G|1H]]|1B|@]|6|$]]|$15|39|17|2P|2|2Q|19|6W|1A|@]|1B|@$1E|6X|1F|6Y|15|6Z]]|6|$]]|$15|3A|17|2P|2|2Q|19|70|1A|@]|1B|@$1E|71|1F|72|15|73]]|6|$]]|$15|3B|17|3C|2|21|19|74|1A|@]|1B|@]|6|$]]|$15|3D|17|3E|2|18|19|75|1A|@$1E|76|1F|77|1G|1H]|$1E|78|1F|79|1G|1H]]|1B|@]|6|$]]|$15|3F|17|2P|2|2Q|19|7A|1A|@]|1B|@$1E|7B|1F|7C|15|7D]]|6|$]]|$15|3G|17|3H|2|1T|19|7E|1A|@]|1B|@]|6|$]]|$15|3I|17|3J|2|21|19|7F|1A|@]|1B|@]|6|$]]|$15|3K|17|3L|2|18|19|7G|1A|@]|1B|@]|6|$]]|$15|3M|17|3N|2|1T|19|7H|1A|@$1E|7I|1F|7J|1G|1H]|$1E|7K|1F|7L|1G|1H]]|1B|@]|6|$]]|$15|3O|17|3P|2|2A|19|7M|1A|@]|1B|@]|6|$2B|2C]]|$15|3Q|17|3R|2|1T|19|7N|1A|@$1E|7O|1F|7P|1G|1H]|$1E|7Q|1F|7R|1G|1H]|$1E|7S|1F|7T|1G|1H]]|1B|@]|6|$]]|$15|3S|17|2P|2|2Q|19|7U|1A|@]|1B|@$1E|7V|1F|7W|15|7X]]|6|$]]|$15|3T|17|3U|2|1T|19|7Y|1A|@$1E|7Z|1F|80|1G|1H]|$1E|81|1F|82|1G|1H]]|1B|@]|6|$]]|$15|3V|17|3W|2|1W|19|83|1A|@$1E|84|1F|85|1G|1H]]|1B|@]|6|$]]|$15|3X|17|3Y|2|18|19|86|1A|@$1E|87|1F|88|1G|1H]]|1B|@]|6|$]]|$15|3Z|17|40|2|1M|19|89|1A|@]|1B|@$1E|8A|1F|8B|15|8C]|$1E|8D|1F|8E|15|8F]]|6|$]]|$15|41|17|42|2|1M|19|8G|1A|@]|1B|@$1E|8H|1F|8I|15|8J]|$1E|8K|1F|8L|15|8M]]|6|$]]|$15|43|17|44|2|1W|19|8N|1A|@]|1B|@]|6|$]]|$15|45|17|46|2|1M|19|8O|1A|@$1E|8P|1F|8Q|1G|1H]]|1B|@]|6|$]]|$15|47|17|48|2|1M|19|8R|1A|@$1E|8S|1F|8T|1G|1H]]|1B|@]|6|$]]|$15|49|17|4A|2|1M|19|8U|1A|@$1E|8V|1F|8W|1G|1H]]|1B|@]|6|$]]|$15|4B|17|4C|2|18|19|8X|1A|@]|1B|@]|6|$]]]]","plain":"\n本文主要介绍三种使用 gitbook 的方式,分别是 gitbook 命令行工具,Gitbook Editor 官方编辑器和 gitbook.com 官网.\n总体来说,三种途径适合各自不同的人群,找到适合自己的方式就好,基本操作流程都是一样的.\n命令行工具更适合具备编程经验开发者,具有简单高效易整合等特点.\n编辑器更适合无任何编程经验的文学创作者,不熟悉 markdown 语法,不熟悉 git 工作流,这种情况下也推荐使用图形化操作的编辑器.\n官网适合想要快速体验 gitbook 效果的萌新,只有觉得物超所值才能有动力搭建 gitbook 开发环境,不是吗?\n 当然,如果你想访问官网的话,你可能需要学会科学上网,网址见文章结尾.\n \ngitbook 命令行\n首先需要创建存放书籍的目录,然后对该目录进行初始化,最后启动本地服务即可体验效果.\n初始化项目\n 语法格式: gitbook init\n \n如果是空目录会自动创建 README.md 和 SUMMARY.md 两个文件,当然也可以手动创建再初始化.\n示例:\n# 创建 `gitbook` 演示项目\n$ mkdir gitbook-demo\n\n# 初始化项目\n$ gitbook init\nwarn: no summary file in this book \ninfo: create README.md \ninfo: create SUMMARY.md \ninfo: initialization is finished \n\n# 当前目录结构\n$ tree \n.\n├── README.md\n└── SUMMARY.md\n\n0 directories, 2 files\n$ \n gitbook init 命令可能会自动生成 README.md 和 SUMMARY.md 两个文件,如已存在则更新.\n \n运行项目\n 语法格式: gitbook serve\n \n将初始化后的项目启动成为一个本地服务,我们可以直接在浏览器访问项目,预览书籍效果.\n示例:\n# 启动本地服务器\n$ gitbook serve\nLive reload server started on port: 35729\nPress CTRL+C to quit ...\n\ninfo: 7 plugins are installed \ninfo: loading plugin \"livereload\"... OK \ninfo: loading plugin \"highlight\"... OK \ninfo: loading plugin \"search\"... OK \ninfo: loading plugin \"lunr\"... OK \ninfo: loading plugin \"sharing\"... OK \ninfo: loading plugin \"fontsettings\"... OK \ninfo: loading plugin \"theme-default\"... OK \ninfo: found 1 pages \ninfo: found 0 asset files \ninfo: >> generation finished with success in 1.2s ! \n?\n如果要停止服务器,只需同时按住 CTRL+C 即可,现在再看一下 gitbook-demo 目录结构.\n$ tree\n.\n├── README.md\n├── SUMMARY.md\n└── _book\n    ├── gitbook\n    │   ├── fonts\n    │   │   └── fontawesome\n    │   │       ├── FontAwesome.otf\n    │   │       ├── fontawesome-webfont.eot\n    │   │       ├── fontawesome-webfont.svg\n    │   │       ├── fontawesome-webfont.ttf\n    │   │       ├── fontawesome-webfont.woff\n    │   │       └── fontawesome-webfont.woff2\n    │   ├── gitbook-plugin-fontsettings\n    │   │   ├── fontsettings.js\n    │   │   └── website.css\n    │   ├── gitbook-plugin-highlight\n    │   │   ├── ebook.css\n    │   │   └── website.css\n    │   ├── gitbook-plugin-livereload\n    │   │   └── plugin.js\n    │   ├── gitbook-plugin-lunr\n    │   │   ├── lunr.min.js\n    │   │   └── search-lunr.js\n    │   ├── gitbook-plugin-search\n    │   │   ├── lunr.min.js\n    │   │   ├── search-engine.js\n    │   │   ├── search.css\n    │   │   └── search.js\n    │   ├── gitbook-plugin-sharing\n    │   │   └── buttons.js\n    │   ├── gitbook.js\n    │   ├── images\n    │   │   ├── apple-touch-icon-precomposed-152.png\n    │   │   └── favicon.ico\n    │   ├── style.css\n    │   └── theme.js\n    ├── index.html\n    └── search_index.json\n\n11 directories, 27 files\n$ \n gitbook serve 命令可能会自动生成 _book 目录,如已存在则更新.\n \n?\ngitbook editor 编辑器\n下载 gitbook editor 并安装,如果下载遇到困难,可以找我来帮忙哟!\n?\n 如果你没有梯子,可以暂不登录(Do that Later),只不过无法与 gitbook.com 保持同步.\n \n更改图书路径\n更改默认图书存放位置(Gitbook Editor => Change Library Path...),以后图书目录都在该目录下,比如设置的是 .../gitbook-editor/ 图书目录.\n?\n?\n新建图书\n新建图书项目,名字仍然是 gitbook-demo,这样方便比较和命令行创建的 gitbook-demo 区别.\n?\n 图形化操作界面总体来说还是很容易上手的,自己好好研究一下即可,这里仅仅演示默认效果.\n \n启动项目\n现在先找到新建图书的具体目录,然后再启动本地服务器,同样地,我们在浏览器中体验电子书效果.\n 图书项目路径: /workspace/gitbook-editor/Import/gitbook-demo,其中 /workspace/gitbook-editor/ 是上一步更改的图书路径.\n \n# 启动本地服务器\n$ gitbook serve\n 这里不再需要运行 gitbook init 命令了,因为已经创建过 README.md 和 SUMMARY.md 这两个文件.\n \n?\n Gitbook Editor 编辑器新建的图书项目和 gitbook-cli 创建的图书项目本质上并没有什么不同,只不过编辑器集成了常用功能而已!\n \ngitbook.com 网站\n由于受网络因素所限,暂时不分享这部分知识了,简单来说就是在线编辑并发布电子书,这一点和 github 的代码托管服务类似.\ngitbook 新版官网(需要FQ) : https://www.gitbook.com/\ngitbook 旧版官网(无需FQ) : https://legacy.gitbook.com\n小结\n初始化项目 : gitbook init\n启动项目 : gitbook serve\n默认访问地址: http://localhost:4000\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n本文主要介绍三种使用 gitbook 的方式,分别是 gitbook 命令行工具,Gitbook Editor 官方编辑器和 gitbook.com 官网.\n...","summary":"本文主要介绍三种使用 gitbook 的方式,分别是 gitbook 命令行工具,Gitbook Editor 官方编辑器和 gitbook.com 官网.","abstract":"本文主要介绍三种使用 gitbook 的方式,分别是 gitbook 命令行工具,Gitbook Editor 官方编辑器和 gitbook.com 官网.","description":"","picture":"https://ask.qcloudimg.com/http-save/yehe-2952369/jfxmiz03ju.png","coverImageUrl":"https://ask.qcloudimg.com/http-save/yehe-2952369/jfxmiz03ju.png","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":""},"authorId":2952369,"columnId":75668,"writeTime":1554276357,"updateTime":1554276357,"viewCount":94,"likeCount":3,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"},{"tagId":10813,"tagName":"https"},{"tagId":10681,"tagName":"网络安全"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2711,"type":40,"actionInfo":{"articleId":1409918,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554276344,"detail":{"id":1409918,"articleId":1409918,"title":"git 入门教程之撤销更改\n                                                                            原","content":"entityMap|0|type|LINK|mutability|MUTABLE|data|url|https://my.oschina.net/.reset.md|blocks|key|cj294|text|unstyled|depth|inlineStyleRanges|entityRanges|e0kls|撤销更改|header-one|59l6i|相信你已经了解了+git+的基本概念,也清楚了工作区,暂存区和版本库的关系,现在让我们用所学的知识继解决实际问题吧!|offset|length|style|CODE|8hqqq|背景|header-two|1tsj|正常看得见的目录是我们最为熟悉的工作区,在工作中不可能总是100%25的精力,难免会犯错,尤其是下午犯困,晚上加班更是如此.下面列举了常见的一些场景|3ktmn|场景一:+工作区出现意外更改且尚未添加到暂存区|unordered-list-item|BOLD|6aqa8|北京时间现在是晚上10点钟,你正在赶制一份工作报告,尽管心中一万个不愿意,还是不得不做.|82ne1|开始模拟意外更改前,先查看一下+test.txt+文件相关信息:|24ldd|#+列出当前目录的文件\n$+ls\nfile1.txt+++file2.txt+++file3.txt+++newFile.txt+test.txt\n#+查看+`test.txt`+文件内容\n$+cat+test.txt\ngit+test\ngit+init\ngit+diff\nunderstand+how+git+control+version\nhow+git+work\ngit+tracks+changes+of+files\n#+查看+`test.txt`+文件状态\n$+git+status\nOn+branch+master\nChanges+not+staged+for+commit:\n++(use+\"git+add+<file>...\"+to+update+what+will+be+committed)\n++(use+\"git+checkout+--+<file>...\"+to+discard+changes+in+working+directory)\n\n++++modified:+++test.txt\n\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\nno+changes+added+to+commit+(use+\"git+add\"+and/or+\"git+commit+-a\")\n#+查看+`test.txt`+文件差异\n$+git+diff+\ndiff+--git+a/test.txt+b/test.txt\nindex+d31bdd2..56c76b7+100644\n---+a/test.txt\n%2B%2B%2B+b/test.txt\n@@+-3,4+%2B3,4+@@+git+init\n+git+diff\n+understand+how+git+control+version\n+how+git+work\n-git+tracks+changes\n%2Bgit+tracks+changes+of+files\n$+|code-block|syntax|javascript|9sgm0|还记得在上一节中我们讲解+git+版本控制的到底是什么,为了证明+git+管理的是更改而不是文件本身,我们特意在第二次更改时没有添加到暂存区,现在我们先把这个遗留问题解决掉.|a98jm|#+工作区更改添加到暂存区\n$+git+add+test.txt\n#+暂存区内容提交到版本没哭\n$+git+commit+-m+\"git+tracks+changes+of+files\"\n[master+b7bda05]+git+tracks+changes+of+files\n+1+file+changed,+1+insertion(%2B),+1+deletion(-)\n#+查看文件状态\n$+git+status\nOn+branch+master\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\nnothing+added+to+commit+but+untracked+files+present+(use+\"git+add\"+to+track)\n$+|9cjep|现在正在加班加点干活,一不小心将心中的不满表露出来了,于是有了下面的内容:|2ac5k|#+意外更改正是这么犯傻的一句话\n$+echo+\"My+stupid+boss+still+prefers+svn\"+>>+test.txt\n#+当前文件内容\n$+cat+test.txt\ngit+test\ngit+init\ngit+diff\nunderstand+how+git+control+version\nhow+git+work\ngit+tracks+changes+of+files\nMy+stupid+boss+still+prefers+svn\n$+|9ghb2|虽然强打精神,可还是很困,于是打算喝杯咖啡提提神,猛然发现+stupid+boss+可能会让你丢掉这个月的奖金!|hb89|暗自庆幸,咖啡果然是个好东西,既然发现了问题,那就事不宜迟赶紧修复,因为不适宜的话正是+stupid+boss+,所以你完全可以手动删除,但是假如你说了一大堆不合适的话,或者复制粘贴时弄错了,这就不是删除一两行那么简单了!|50cu7|既然手动解决比较麻烦,那git+有没有什么好方法来解决这类问题呢?在寻求git+帮助前,首先再看一下当前文件状态(git+status).正所谓\"知己知彼方能百战百胜\",还是看一眼吧!|fa9qj|#+查看文件状态\n$+git+status\nOn+branch+master\nChanges+not+staged+for+commit:\n++(use+\"git+add+<file>...\"+to+update+what+will+be+committed)\n++(use+\"git+checkout+--+<file>...\"+to+discard+changes+in+working+directory)\n\n++++modified:+++test.txt\n\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\nno+changes+added+to+commit+(use+\"git+add\"+and/or+\"git+commit+-a\")\n$+|8nft2|git+不负众望,果然给了我们希望,(use+\"git+checkout+--+<file>...\"+to+discard+changes+in+working+directory)+这句话的告诉我们可以丢弃工作区的更改!|9frdl|脑海中在快速回忆一下工作区,暂存区,版本库三者之间的关系,其实git+checkout+--+<file>+命令的意思是用暂存区的内容替换掉工作区内容,因此也就是丢弃掉工作区的更改了.|2pl4g|事不宜迟,运行+git+checkout+--+<file>+命令试试看吧:|th0h|#+丢弃工作区的更改\n$+git+checkout+--+test.txt\n#+查看文件内容:+My+stupid+boss+still+prefers+svn+终于不见了\n$+cat+test.txt\ngit+test\ngit+init\ngit+diff\nunderstand+how+git+control+version\nhow+git+work\ngit+tracks+changes+of+files\n#+查看文件状态\n$+git+status\nOn+branch+master\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\nnothing+added+to+commit+but+untracked+files+present+(use+\"git+add\"+to+track)\n$+|466di|一顿操作猛如虎,撤销掉意外更改,回到上一次版本控制状态,世界如此美好...|f3h7d|+注意:+git+checkout+--+<file>+中的+--+至关重要,没有它就是切换分支了!\n+|blockquote|7q39b|场景二:+工作区出现意外更改且已经添加到暂存区,但尚未提交到版本库|5an47|时间一分一秒过去了,转眼间已经11点了,假设你不但写了一些胡话,还添加到暂存区了(git+add).可想而知,这次意外比场景一要糟糕.|5fq46|#+模拟正常提交(不然岂不是从场景一到场景二你什么都没做,那还能叫做赶制工作报告吗?!)\n$+echo+\"someone+prefers+svn,but+i+don't+care+it\"+>>+test.txt\n$+cat+test.txt\ngit+test\ngit+init\ngit+diff\nunderstand+how+git+control+version\nhow+git+work\ngit+tracks+changes+of+files\nsomeone+prefers+svn,but+i+don't+care+it\n$+git+add+test.txt\n$+git+commit+-m+\"normal+commit\"\n[master+ab1cbd2]+normal+commit\n+1+file+changed,+1+insertion(%2B)\n\n#+意外更改的前夕+\n$+cat+test.txt\ngit+test\ngit+init\ngit+diff\nunderstand+how+git+control+version\nhow+git+work\ngit+tracks+changes+of+files\nsomeone+prefers+svn,but+i+don't+care+it\n\n#+意外更改内容:+my+teammate+is+stupid+too.\n$+echo+\"my+teammate+is+stupid+too.\"+>>+test.txt\n$+cat+test.txt\ngit+test\ngit+init\ngit+diff\nunderstand+how+git+control+version\nhow+git+work\ngit+tracks+changes+of+files\nsomeone+prefers+svn,but+i+don't+care+it\nmy+teammate+is+stupid+too.\n\n#+意外操作:+将意外更改内容提交到暂存区\n$+git+add+test.txt+|fgv19|不过庆幸的是,在提交到版本库(git+commit)之前及时发现问题,还是看一下现在的文件状态(git+status)吧!|171kl|#+查看文件状态:+救命稻草+(use+\"git+reset+HEAD+<file>...\"+to+unstage)\n$+git+status\nOn+branch+master\nChanges+to+be+committed:\n++(use+\"git+reset+HEAD+<file>...\"+to+unstage)\n\n++++modified:+++test.txt\n\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\n$+|bg6a2|git+同样告诉我们,可以使用+git+reset+HEAD+<file>+命令撤销暂存区更改.|71i23|其实+git+reset+HEAD+<file>+命令是用版本库的内容替换掉暂存区的内容,也就是说原来暂存区的内容已被丢弃了!|d3ttu|所以说这个命令并不会影响工作区内容,不如我们现在再看一眼工作区内容,方便执行+git+reset+HEAD+<file>+命令后证实我们的结论.|5608b|#+查看文件内容:+my+teammate+is+stupid+too.\n$+cat+test.txt\ngit+test\ngit+init\ngit+diff\nunderstand+how+git+control+version\nhow+git+work\ngit+tracks+changes+of+files\nsomeone+prefers+svn,but+i+don't+care+it\nmy+teammate+is+stupid+too.\n$+|15cct|迫不及待执行+git+reset+HEAD+<file>+命令,先睹为快!|bd96l|#+救命稻草:+版本库内容替换掉暂存区内容\n$+git+reset+HEAD+test.txt\nUnstaged+changes+after+reset:\nM+++test.txt\n\n#+效果:+目标文件已修改但未添加到暂存区\n$+git+status\nOn+branch+master\nChanges+not+staged+for+commit:\n++(use+\"git+add+<file>...\"+to+update+what+will+be+committed)\n++(use+\"git+checkout+--+<file>...\"+to+discard+changes+in+working+directory)\n\n++++modified:+++test.txt\n\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\nno+changes+added+to+commit+(use+\"git+add\"+and/or+\"git+commit+-a\")\n\n#+目标文件内容:+仍然保持不变\n$+cat+test.txt\ngit+test\ngit+init\ngit+diff\nunderstand+how+git+control+version\nhow+git+work\ngit+tracks+changes+of+files\nsomeone+prefers+svn,but+i+don't+care+it\nmy+teammate+is+stupid+too.\n$+|fj6ve|现在场景二已经退化成场景一了,目标文件发生意外更改但还没添加到暂存区,如何撤销工作区更改,请参考场景一方法.|1tvh8|+提示:++git+checkout+--+test.txt\n+|6j42r|场景三:+工作区出现意外更改不仅已添加到暂存区,还已提交到版本库,但尚未推送到远程仓库|c7kat|时间不紧不慢地已经到凌晨了,困意越来越浓,洋洋洒洒写下几千字的工作报告,总算是写完了,添加到暂存区(git+add),提交到版本库(git+commit)一气呵成,等等,好像有什么不对劲,难免会犯糊涂,这不又发生意外了!|b54sq|#+衔接场景二\n$+cat+test.txt\ngit+test\ngit+init\ngit+diff\nunderstand+how+git+control+version\nhow+git+work\ngit+tracks+changes+of+files\nsomeone+prefers+svn,but+i+don't+care+it\n\n#+正常提交一\n$+echo+\"i+love+working,work+makes+me+happy\"+>>+test.txt\n$+git+add+test.txt\n$+git+commit+-m+\"encourage+myself\"\n[master+a44cf7a]+encourage+myself\n+1+file+changed,+1+insertion(%2B)\n\n#+正常提交二\n$+echo+\"fix+110+bugs,so+happy\"+>>+test.txt\n$+git+add+test.txt\n$+git+commit+-m+\"fix+bugs\"\n[master+c66399d]+fix+bugs\n+1+file+changed,+1+insertion(%2B)\nsunpodeMacBook-Pro:demo+sunpo$+git+status\nOn+branch+master\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\nnothing+added+to+commit+but+untracked+files+present+(use+\"git+add\"+to+track)\n\n#+意外更改:+hate+to+work+overtime\n$+echo+\"hate+to+work+overtime\"+>>+test.txt\n$+git+add+test.txt\n$+git+commit+-m+\"test.txt\"\n[master+c965724]+test.txt\n+1+file+changed,+1+insertion(%2B)\n+$+|8ukr5|天妒英才,加班加点做事情,本想赢得老板的赏识,没想到最后一句话\"hate+to+work+overtime\"让所有的努力都付之一炬,怎么办?|9uqst|死马当活马医,还是照例看看git+status+能提供什么建议吧!|etg45|$+git+status\nOn+branch+master\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\nnothing+added+to+commit+but+untracked+files+present+(use+\"git+add\"+to+track)\n$+|4vnfc|没有提供任何意见能帮助我们撤销意外更改,先别慌,容我深思三秒钟...|cp7jq|既然意外更改已经提交到版本库,那么应该用什么内容替换版本库内容呢?有了,既然最新版本库不可用,那上一个版本库内容可用的啊,完全可以用上一个版本库内容替换最新版本库内容,真乃\"天生我材必有用\"!|ec3kq|#+当前文件内容:+闯祸的\"hate+to+work+overtime\"\n$+cat+test.txt\ngit+test\ngit+init\ngit+diff\nunderstand+how+git+control+version\nhow+git+work\ngit+tracks+changes+of+files\nsomeone+prefers+svn,but+i+don't+care+it\ni+love+working,work+makes+me+happy\nfix+110+bugs,so+happy\nhate+to+work+overtime\n\n#+版本回退:+回到过去假装什么都没发生过\n$+git+reset+--hard+HEAD%5E\nHEAD+is+now+at+c66399d+fix+bugs\nsunpodeMacBook-Pro:demo+sunpo$+git+status\nOn+branch+master\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\nnothing+added+to+commit+but+untracked+files+present+(use+\"git+add\"+to+track)\n\n#+岁月静好,一切似乎都没发生过\n$+cat+test.txt\ngit+test\ngit+init\ngit+diff\nunderstand+how+git+control+version\nhow+git+work\ngit+tracks+changes+of+files\nsomeone+prefers+svn,but+i+don't+care+it\ni+love+working,work+makes+me+happy\nfix+110+bugs,so+happy\n\n#+当前文件状态\n$+git+status\nOn+branch+master\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\nnothing+added+to+commit+but+untracked+files+present+(use+\"git+add\"+to+track)\n$+|2dj3g|详情请参考回到过去,时空穿越之旅就是这么方便哈!|8aa92|+提示:+git+reset+--hard+HEAD%5E\n+|9mksq|场景四:+工作区出现意外更改不仅已添加到暂存区,还提交到版本库,还已推送到远程仓库|eufad|场景一到场景三都是本地仓库,所有的文件更改只能本机访问,小伙伴也好,上级领导也罢都无法查看到你本地更改,但是一旦你推送到远程仓库了,那么其他人就能查看你的更改了!|1fee0|正常的提交更改还好,怕就怕这种\"stupid+boss\"被领导看到就不好了,那应该怎么办?暂时还是自求多福吧!|btrs6|小结|8sib|丢弃工作区更改:+git+checkout+--+<file>|5efch|丢弃暂存区更改:+git+reset+HEAD+<file>|dmqal|丢弃本地版本库更改:+git+reset+--hard+HEAD%5E|f9qdq|丢弃远程版本库更改:+自求多福|e7381|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|9|3|0|0|0|0|N|0|0|G|8|0|0|D|3|X|3|0|0|0|0|U|B|0|18|B|0|C|3|10|3|1L|A|0|0|0|3|I|21|0|V|M|0|8|M|0|0|0|5|M|V|2|18|4|0|0|X|0|15|7|1O|3|0|0|F|A|1C|A|0|0|0|3|G|L|0|3|L|0|13|L|0|0|7|L|0|0|2|3|A|3|1C|3|0|6|O|0|0|17|0|1E|7|1U|A|0|0|0|D|A|0|0|0|0|0|5|4|0|0|5|M|0|0|15|0|0|0|0|9|M|0|9|L|0|B|M|0|0^^$0|$1|$2|3|4|5|6|$7|8]]]|9|@$A|B|C|-4|2|D|E|3V|F|@]|G|@]|6|$]]|$A|H|C|I|2|J|E|3W|F|@]|G|@]|6|$]]|$A|K|C|L|2|D|E|3X|F|@$M|3Y|N|3Z|O|P]]|G|@]|6|$]]|$A|Q|C|R|2|S|E|40|F|@]|G|@]|6|$]]|$A|T|C|U|2|D|E|41|F|@]|G|@]|6|$]]|$A|V|C|W|2|X|E|42|F|@$M|43|N|44|O|Y]]|G|@]|6|$]]|$A|Z|C|10|2|D|E|45|F|@]|G|@]|6|$]]|$A|11|C|12|2|D|E|46|F|@$M|47|N|48|O|P]]|G|@]|6|$]]|$A|13|C|14|2|15|E|49|F|@]|G|@]|6|$16|17]]|$A|18|C|19|2|D|E|4A|F|@$M|4B|N|4C|O|P]|$M|4D|N|4E|O|P]]|G|@]|6|$]]|$A|1A|C|1B|2|15|E|4F|F|@]|G|@]|6|$16|17]]|$A|1C|C|1D|2|D|E|4G|F|@]|G|@]|6|$]]|$A|1E|C|1F|2|15|E|4H|F|@]|G|@]|6|$16|17]]|$A|1G|C|1H|2|D|E|4I|F|@$M|4J|N|4K|O|Y]]|G|@]|6|$]]|$A|1I|C|1J|2|D|E|4L|F|@$M|4M|N|4N|O|Y]]|G|@]|6|$]]|$A|1K|C|1L|2|D|E|4O|F|@$M|4P|N|4Q|O|P]|$M|4R|N|4S|O|P]|$M|4T|N|4U|O|P]]|G|@]|6|$]]|$A|1M|C|1N|2|15|E|4V|F|@]|G|@]|6|$16|17]]|$A|1O|C|1P|2|D|E|4W|F|@$M|4X|N|4Y|O|P]|$M|4Z|N|50|O|P]]|G|@]|6|$]]|$A|1Q|C|1R|2|D|E|51|F|@$M|52|N|53|O|P]]|G|@]|6|$]]|$A|1S|C|1T|2|D|E|54|F|@$M|55|N|56|O|P]]|G|@]|6|$]]|$A|1U|C|1V|2|15|E|57|F|@]|G|@]|6|$16|17]]|$A|1W|C|1X|2|D|E|58|F|@]|G|@]|6|$]]|$A|1Y|C|1Z|2|20|E|59|F|@$M|5A|N|5B|O|P]|$M|5C|N|5D|O|P]|$M|5E|N|5F|O|Y]]|G|@]|6|$]]|$A|21|C|22|2|X|E|5G|F|@$M|5H|N|5I|O|Y]]|G|@]|6|$]]|$A|23|C|24|2|D|E|5J|F|@$M|5K|N|5L|O|P]|$M|5M|N|5N|O|Y]]|G|@]|6|$]]|$A|25|C|26|2|15|E|5O|F|@]|G|@]|6|$16|17]]|$A|27|C|28|2|D|E|5P|F|@$M|5Q|N|5R|O|P]|$M|5S|N|5T|O|P]]|G|@]|6|$]]|$A|29|C|2A|2|15|E|5U|F|@]|G|@]|6|$16|17]]|$A|2B|C|2C|2|D|E|5V|F|@$M|5W|N|5X|O|P]|$M|5Y|N|5Z|O|P]]|G|@]|6|$]]|$A|2D|C|2E|2|D|E|60|F|@$M|61|N|62|O|P]]|G|@]|6|$]]|$A|2F|C|2G|2|D|E|63|F|@$M|64|N|65|O|P]]|G|@]|6|$]]|$A|2H|C|2I|2|15|E|66|F|@]|G|@]|6|$16|17]]|$A|2J|C|2K|2|D|E|67|F|@$M|68|N|69|O|P]]|G|@]|6|$]]|$A|2L|C|2M|2|15|E|6A|F|@]|G|@]|6|$16|17]]|$A|2N|C|2O|2|D|E|6B|F|@$M|6C|N|6D|O|Y]|$M|6E|N|6F|O|Y]|$M|6G|N|6H|O|Y]]|G|@]|6|$]]|$A|2P|C|2Q|2|20|E|6I|F|@$M|6J|N|6K|O|P]]|G|@]|6|$]]|$A|2R|C|2S|2|X|E|6L|F|@$M|6M|N|6N|O|Y]]|G|@]|6|$]]|$A|2T|C|2U|2|D|E|6O|F|@$M|6P|N|6Q|O|P]|$M|6R|N|6S|O|P]]|G|@]|6|$]]|$A|2V|C|2W|2|15|E|6T|F|@]|G|@]|6|$16|17]]|$A|2X|C|2Y|2|D|E|6U|F|@]|G|@]|6|$]]|$A|2Z|C|30|2|D|E|6V|F|@$M|6W|N|6X|O|P]]|G|@]|6|$]]|$A|31|C|32|2|15|E|6Y|F|@]|G|@]|6|$16|17]]|$A|33|C|34|2|D|E|6Z|F|@]|G|@]|6|$]]|$A|35|C|36|2|D|E|70|F|@]|G|@]|6|$]]|$A|37|C|38|2|15|E|71|F|@]|G|@]|6|$16|17]]|$A|39|C|3A|2|D|E|72|F|@]|G|@$M|73|N|74|A|75]]|6|$]]|$A|3B|C|3C|2|20|E|76|F|@$M|77|N|78|O|P]]|G|@]|6|$]]|$A|3D|C|3E|2|X|E|79|F|@$M|7A|N|7B|O|Y]]|G|@]|6|$]]|$A|3F|C|3G|2|D|E|7C|F|@]|G|@]|6|$]]|$A|3H|C|3I|2|D|E|7D|F|@]|G|@]|6|$]]|$A|3J|C|3K|2|S|E|7E|F|@]|G|@]|6|$]]|$A|3L|C|3M|2|X|E|7F|F|@$M|7G|N|7H|O|P]]|G|@]|6|$]]|$A|3N|C|3O|2|X|E|7I|F|@$M|7J|N|7K|O|P]]|G|@]|6|$]]|$A|3P|C|3Q|2|X|E|7L|F|@$M|7M|N|7N|O|P]]|G|@]|6|$]]|$A|3R|C|3S|2|X|E|7O|F|@]|G|@]|6|$]]|$A|3T|C|3U|2|D|E|7P|F|@]|G|@]|6|$]]]]","plain":"\n撤销更改\n相信你已经了解了 git 的基本概念,也清楚了工作区,暂存区和版本库的关系,现在让我们用所学的知识继解决实际问题吧!\n背景\n正常看得见的目录是我们最为熟悉的工作区,在工作中不可能总是100%的精力,难免会犯错,尤其是下午犯困,晚上加班更是如此.下面列举了常见的一些场景\n场景一: 工作区出现意外更改且尚未添加到暂存区\n北京时间现在是晚上10点钟,你正在赶制一份工作报告,尽管心中一万个不愿意,还是不得不做.\n开始模拟意外更改前,先查看一下 test.txt 文件相关信息:\n# 列出当前目录的文件\n$ ls\nfile1.txt   file2.txt   file3.txt   newFile.txt test.txt\n# 查看 `test.txt` 文件内容\n$ cat test.txt\ngit test\ngit init\ngit diff\nunderstand how git control version\nhow git work\ngit tracks changes of files\n# 查看 `test.txt` 文件状态\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    modified:   test.txt\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n# 查看 `test.txt` 文件差异\n$ git diff \ndiff --git a/test.txt b/test.txt\nindex d31bdd2..56c76b7 100644\n--- a/test.txt\n+++ b/test.txt\n@@ -3,4 +3,4 @@ git init\n git diff\n understand how git control version\n how git work\n-git tracks changes\n+git tracks changes of files\n$ \n还记得在上一节中我们讲解 git 版本控制的到底是什么,为了证明 git 管理的是更改而不是文件本身,我们特意在第二次更改时没有添加到暂存区,现在我们先把这个遗留问题解决掉.\n# 工作区更改添加到暂存区\n$ git add test.txt\n# 暂存区内容提交到版本没哭\n$ git commit -m \"git tracks changes of files\"\n[master b7bda05] git tracks changes of files\n 1 file changed, 1 insertion(+), 1 deletion(-)\n# 查看文件状态\n$ git status\nOn branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n$ \n现在正在加班加点干活,一不小心将心中的不满表露出来了,于是有了下面的内容:\n# 意外更改正是这么犯傻的一句话\n$ echo \"My stupid boss still prefers svn\" >> test.txt\n# 当前文件内容\n$ cat test.txt\ngit test\ngit init\ngit diff\nunderstand how git control version\nhow git work\ngit tracks changes of files\nMy stupid boss still prefers svn\n$ \n虽然强打精神,可还是很困,于是打算喝杯咖啡提提神,猛然发现 stupid boss 可能会让你丢掉这个月的奖金!\n暗自庆幸,咖啡果然是个好东西,既然发现了问题,那就事不宜迟赶紧修复,因为不适宜的话正是 stupid boss ,所以你完全可以手动删除,但是假如你说了一大堆不合适的话,或者复制粘贴时弄错了,这就不是删除一两行那么简单了!\n既然手动解决比较麻烦,那git 有没有什么好方法来解决这类问题呢?在寻求git 帮助前,首先再看一下当前文件状态(git status).正所谓\"知己知彼方能百战百胜\",还是看一眼吧!\n# 查看文件状态\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    modified:   test.txt\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ \ngit 不负众望,果然给了我们希望,(use \"git checkout -- <file>...\" to discard changes in working directory) 这句话的告诉我们可以丢弃工作区的更改!\n脑海中在快速回忆一下工作区,暂存区,版本库三者之间的关系,其实git checkout -- <file> 命令的意思是用暂存区的内容替换掉工作区内容,因此也就是丢弃掉工作区的更改了.\n事不宜迟,运行 git checkout -- <file> 命令试试看吧:\n# 丢弃工作区的更改\n$ git checkout -- test.txt\n# 查看文件内容: My stupid boss still prefers svn 终于不见了\n$ cat test.txt\ngit test\ngit init\ngit diff\nunderstand how git control version\nhow git work\ngit tracks changes of files\n# 查看文件状态\n$ git status\nOn branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n$ \n一顿操作猛如虎,撤销掉意外更改,回到上一次版本控制状态,世界如此美好...\n 注意: git checkout -- <file> 中的 -- 至关重要,没有它就是切换分支了!\n \n场景二: 工作区出现意外更改且已经添加到暂存区,但尚未提交到版本库\n时间一分一秒过去了,转眼间已经11点了,假设你不但写了一些胡话,还添加到暂存区了(git add).可想而知,这次意外比场景一要糟糕.\n# 模拟正常提交(不然岂不是从场景一到场景二你什么都没做,那还能叫做赶制工作报告吗?!)\n$ echo \"someone prefers svn,but i don't care it\" >> test.txt\n$ cat test.txt\ngit test\ngit init\ngit diff\nunderstand how git control version\nhow git work\ngit tracks changes of files\nsomeone prefers svn,but i don't care it\n$ git add test.txt\n$ git commit -m \"normal commit\"\n[master ab1cbd2] normal commit\n 1 file changed, 1 insertion(+)\n\n# 意外更改的前夕 \n$ cat test.txt\ngit test\ngit init\ngit diff\nunderstand how git control version\nhow git work\ngit tracks changes of files\nsomeone prefers svn,but i don't care it\n\n# 意外更改内容: my teammate is stupid too.\n$ echo \"my teammate is stupid too.\" >> test.txt\n$ cat test.txt\ngit test\ngit init\ngit diff\nunderstand how git control version\nhow git work\ngit tracks changes of files\nsomeone prefers svn,but i don't care it\nmy teammate is stupid too.\n\n# 意外操作: 将意外更改内容提交到暂存区\n$ git add test.txt \n不过庆幸的是,在提交到版本库(git commit)之前及时发现问题,还是看一下现在的文件状态(git status)吧!\n# 查看文件状态: 救命稻草 (use \"git reset HEAD <file>...\" to unstage)\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n    modified:   test.txt\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\n$ \ngit 同样告诉我们,可以使用 git reset HEAD <file> 命令撤销暂存区更改.\n其实 git reset HEAD <file> 命令是用版本库的内容替换掉暂存区的内容,也就是说原来暂存区的内容已被丢弃了!\n所以说这个命令并不会影响工作区内容,不如我们现在再看一眼工作区内容,方便执行 git reset HEAD <file> 命令后证实我们的结论.\n# 查看文件内容: my teammate is stupid too.\n$ cat test.txt\ngit test\ngit init\ngit diff\nunderstand how git control version\nhow git work\ngit tracks changes of files\nsomeone prefers svn,but i don't care it\nmy teammate is stupid too.\n$ \n迫不及待执行 git reset HEAD <file> 命令,先睹为快!\n# 救命稻草: 版本库内容替换掉暂存区内容\n$ git reset HEAD test.txt\nUnstaged changes after reset:\nM   test.txt\n\n# 效果: 目标文件已修改但未添加到暂存区\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    modified:   test.txt\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n# 目标文件内容: 仍然保持不变\n$ cat test.txt\ngit test\ngit init\ngit diff\nunderstand how git control version\nhow git work\ngit tracks changes of files\nsomeone prefers svn,but i don't care it\nmy teammate is stupid too.\n$ \n现在场景二已经退化成场景一了,目标文件发生意外更改但还没添加到暂存区,如何撤销工作区更改,请参考场景一方法.\n 提示:  git checkout -- test.txt\n \n场景三: 工作区出现意外更改不仅已添加到暂存区,还已提交到版本库,但尚未推送到远程仓库\n时间不紧不慢地已经到凌晨了,困意越来越浓,洋洋洒洒写下几千字的工作报告,总算是写完了,添加到暂存区(git add),提交到版本库(git commit)一气呵成,等等,好像有什么不对劲,难免会犯糊涂,这不又发生意外了!\n# 衔接场景二\n$ cat test.txt\ngit test\ngit init\ngit diff\nunderstand how git control version\nhow git work\ngit tracks changes of files\nsomeone prefers svn,but i don't care it\n\n# 正常提交一\n$ echo \"i love working,work makes me happy\" >> test.txt\n$ git add test.txt\n$ git commit -m \"encourage myself\"\n[master a44cf7a] encourage myself\n 1 file changed, 1 insertion(+)\n\n# 正常提交二\n$ echo \"fix 110 bugs,so happy\" >> test.txt\n$ git add test.txt\n$ git commit -m \"fix bugs\"\n[master c66399d] fix bugs\n 1 file changed, 1 insertion(+)\nsunpodeMacBook-Pro:demo sunpo$ git status\nOn branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n# 意外更改: hate to work overtime\n$ echo \"hate to work overtime\" >> test.txt\n$ git add test.txt\n$ git commit -m \"test.txt\"\n[master c965724] test.txt\n 1 file changed, 1 insertion(+)\n $ \n天妒英才,加班加点做事情,本想赢得老板的赏识,没想到最后一句话\"hate to work overtime\"让所有的努力都付之一炬,怎么办?\n死马当活马医,还是照例看看git status 能提供什么建议吧!\n$ git status\nOn branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n$ \n没有提供任何意见能帮助我们撤销意外更改,先别慌,容我深思三秒钟...\n既然意外更改已经提交到版本库,那么应该用什么内容替换版本库内容呢?有了,既然最新版本库不可用,那上一个版本库内容可用的啊,完全可以用上一个版本库内容替换最新版本库内容,真乃\"天生我材必有用\"!\n# 当前文件内容: 闯祸的\"hate to work overtime\"\n$ cat test.txt\ngit test\ngit init\ngit diff\nunderstand how git control version\nhow git work\ngit tracks changes of files\nsomeone prefers svn,but i don't care it\ni love working,work makes me happy\nfix 110 bugs,so happy\nhate to work overtime\n\n# 版本回退: 回到过去假装什么都没发生过\n$ git reset --hard HEAD^\nHEAD is now at c66399d fix bugs\nsunpodeMacBook-Pro:demo sunpo$ git status\nOn branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n# 岁月静好,一切似乎都没发生过\n$ cat test.txt\ngit test\ngit init\ngit diff\nunderstand how git control version\nhow git work\ngit tracks changes of files\nsomeone prefers svn,but i don't care it\ni love working,work makes me happy\nfix 110 bugs,so happy\n\n# 当前文件状态\n$ git status\nOn branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n$ \n详情请参考回到过去,时空穿越之旅就是这么方便哈!\n 提示: git reset --hard HEAD^\n \n场景四: 工作区出现意外更改不仅已添加到暂存区,还提交到版本库,还已推送到远程仓库\n场景一到场景三都是本地仓库,所有的文件更改只能本机访问,小伙伴也好,上级领导也罢都无法查看到你本地更改,但是一旦你推送到远程仓库了,那么其他人就能查看你的更改了!\n正常的提交更改还好,怕就怕这种\"stupid boss\"被领导看到就不好了,那应该怎么办?暂时还是自求多福吧!\n小结\n丢弃工作区更改: git checkout -- <file>\n丢弃暂存区更改: git reset HEAD <file>\n丢弃本地版本库更改: git reset --hard HEAD^\n丢弃远程版本库更改: 自求多福\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n撤销更改\n相信你已经了解了 git 的基本概念,也清楚了工作区,暂存区和版本库的关系,现在让我们用所学的知识继解决实际问题吧!\n背景\n正常看得见的目录是我们最...","summary":"相信你已经了解了 git 的基本概念,也清楚了工作区,暂存区和版本库的关系,现在让我们用所学的知识继解决实际问题吧!","abstract":"相信你已经了解了 git 的基本概念,也清楚了工作区,暂存区和版本库的关系,现在让我们用所学的知识继解决实际问题吧!","description":"","picture":"","coverImageUrl":"","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/18 12:09"},"authorId":2952369,"columnId":75668,"writeTime":1554276344,"updateTime":1554276344,"viewCount":87,"likeCount":3,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"},{"tagId":10284,"tagName":"GitHub"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2710,"type":40,"actionInfo":{"articleId":1409917,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554276331,"detail":{"id":1409917,"articleId":1409917,"title":"git 入门教程之版本控制\n                                                                            原","content":"entityMap|blocks|key|3vdpt|text|type|unstyled|depth|inlineStyleRanges|entityRanges|data|csedf|版本控制|header-one|fh64b|我们知道+git+是分布式版本控制系统,所以称被控制对象是版本本身没错,但是从git+命令中发现,并没有版本这个名词,有的只是commit,所以前几节我一直称其为提交.|offset|length|style|CODE|BOLD|a5fmh|为了避免后续教程引发歧义,特意说明,无论是版本也好,提交也罢,都是中文翻译而已,不必太过较真,直接原汁原味称commit也可以啊!|2ksu|假设你已掌握暂存区的相关概念,简单来说,暂存区就是更改文件的缓存集合,等待一次性全部提交到版本库,正因如此,方便我们批量操作相关性文件,打包提交到版本库,这正是暂存区的独特魅力.|cuk3g|我们反复在说+git+是分布式版本控制系统,分布式的概念已经粗略讲过多次了,下面我们讲一下版本控制,谈谈+git+的版本控制和其他系统的版本控制有什么不同,为什么+git+这么优秀,如此流行?|6722n|git+跟踪并管理的是更改,而非文件本身.正如linux+一切皆文件,java+一切皆对象一样,git+一切皆更改.新增文件是一个更改,新增文件内容是一个更改,修改文件内容是一个更改,删除文件内容也是一个更改,换言之,git+管理的正是这一个个的更改,并不是文件本身.|auclm|下面我们用事实说话,证明+git+管理的是更改而不是文件本身:|8neg2|第一步,追加+git+tracks+changes+到+test.txt+文件|bopav|#+查看+test.txt+文件内容\n$+cat+test.txt\ngit+test\ngit+init\ngit+diff\nunderstand+how+git+control+version\nhow+git+work\n#+追加+git+tracks+changes+文件内容到+test.txt+文件\n$+echo+\"git+tracks+changes\"+>>+test.txt\n#+再次查看+test.txt+文件内容\n$+cat+test.txt\ngit+test\ngit+init\ngit+diff\nunderstand+how+git+control+version\nhow+git+work\ngit+tracks+changes\n$+|code-block|syntax|javascript|2k7ue|第二步,添加test.txt+文件到暂存区并查看文件状态|10ckt|$+git+add+test.txt\n$+git+status\nOn+branch+master\nChanges+to+be+committed:\n++(use+\"git+reset+HEAD+<file>...\"+to+unstage)\n\n++++modified:+++test.txt\n\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\n$+|fb74r|对于上述内容应该不必再解释了吧,无外乎说test.txt+文件已修改(modified),即将被提交(to+be+committed).|11d1b|但是,此时偏偏不提交,继续修改+test.txt+文件:(这种情况实际工作中也有可能出现,比如你正在研发某功能,本以为已经开发完毕,满心欢喜添加到暂存区,然后意外发现一个小bug,分分钟就修复了,时间间隔很短以至于你根本不记得还需要再次添加到暂存区.)|9tihk|第三步,继续修改文件内容,忘记再次添加到暂存区|atr3m|#+编辑+test.txt+文件,将+git+tracks+changes+更改为+git+tracks+changes+of+files\nvim+test.txt\n#+查看+test.txt+文件内容\n$+cat+test.txt\ngit+test\ngit+init\ngit+diff\nunderstand+how+git+control+version\nhow+git+work\ngit+tracks+changes+of+files\n$+|fde1f|第四步,正常提交暂存区的全部更改到版本库|9uiut|$+git+commit+-m+\"git+tracks+changes\"\n[master+2daa74a]+git+tracks+changes\n+1+file+changed,+1+insertion(%2B)|d5can|此次提交后,我们再看一下文件状态:|fadpj|$+git+status\nOn+branch+master\nChanges+not+staged+for+commit:\n++(use+\"git+add+<file>...\"+to+update+what+will+be+committed)\n++(use+\"git+checkout+--+<file>...\"+to+discard+changes+in+working+directory)\n\n++++modified:+++test.txt\n\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\nno+changes+added+to+commit+(use+\"git+add\"+and/or+\"git+commit+-a\")\n$|b9631|发现有什么不同吗?以往提交后再次查看文件状态,工作区都是干净的,这次居然提示我们+test.txt+文件已经修改但未添加到暂存区?!|6r74s|等一下,我们先回忆一下我们的操作流程:|19ec3|第一次修改(git+tracks+changes)+->+git+add+->+第二次修改(git+tracks+changes+of+files)+->+git+commit|3kb9q|这样就很好理解了,git+管理的是更改而不是文件本身,如果是文件本身的话,应该将文件的内容全部提交才对,所以管理的是更改.|4nfgk|第一次修改过后使用+git+add+命令将工作区的第一次修改内容放到暂存区准备提交,但是此时工作区发生了第二次修改,注意,这次修改并没有放到暂存区,所以下一步的git+commit+命令提交的暂存区内容中自然也就没有第二次修改的内容了!所以git+commit+完毕后运行git+status命令才会发现此时工作区和暂存区还存在版本差异,即此时工作区不是干净的!|bud4i|这一次的实验很好理解,工作区的修改需要主动告诉暂存区,暂存区的全部更改再提交到版本库.所以版本库的提交取决于暂存区,而暂存区又取决工作区是否主动将更改添加进去了吗!|7ie5l|理论再多不如亲身体验,让我们直接比较一下工作区和版本库的差异吧!|3jdqv|#+比较+test.txt+文件在工作区和版本库的差异\n$+git+diff+HEAD+--+test.txt\ndiff+--git+a/test.txt+b/test.txt\nindex+d31bdd2..56c76b7+100644\n---+a/test.txt\n%2B%2B%2B+b/test.txt\n@@+-3,4+%2B3,4+@@+git+init\n+git+diff\n+understand+how+git+control+version\n+how+git+work\n-git+tracks+changes\n%2Bgit+tracks+changes+of+files\n$+|8sioh|由此可见,工作区比版本库多了git+tracks+changes+of+files,少了git+tracks+changes,所以说第二次修改内容+git+tracks+changes+of+files+并没有被提交.|9kpko|现在我们再解释一下-git+tracks+changes+和+%2Bgit+tracks+changes+of+files+的问题:|dp69r|首先查看工作区+test.txt+文件内容|2g5pi|$+cat+test.txt\ngit+test\ngit+init\ngit+diff\nunderstand+how+git+control+version\nhow+git+work\ngit+tracks+changes+of+files\n$+|7aq8v|根据上述分析,我们知道第一次的修改git+tracks+changes+已被提交到版本库,第二次的修改git+tracks+changes+of+files+没有被提交而是继续留在工作区.|bau51|因此,可以推断出目前版本库的文件应该是这样的:|3us3p|git+test\ngit+init\ngit+diff\nunderstand+how+git+control+version\nhow+git+work\ngit+tracks+changes|ft9iu|既然如何,工作区和版本库相比岂不刚好是少了一个git+tracks+changes,多了git+tracks+changes+of+files,其余文件内容完全相同!|cs1io|透过现象看本质,已经分析了现象也解释了产生现象的原因,是时候分析一下本质了.|5rlfc|抛出问题:因为git+tracks+changes+of+fiels+和+git+tracks+changes+被视为不同的更改,所以才会造成上述现象.如果git+tracks+changes+of+fiels+被认为是git+tracks+changes+%2B+of+fiels+两者叠加产生的更改,还会产生上述现象吗?|1frii|答案是否定的,如果两个更改可以叠加的话,按照版本控制的思路,第二次的修改即便没有提交也只是+of+fiels+没有加入到版本库而已,如此一来,工作区和版本库的差异将不再是少了一个git+tracks+changes,多了git+tracks+changes+of+files,而仅仅是多了of+files!|3p9uc|由此可见,git+版本控制系统其实是全量更新的思维模式,并不是差量更新模式.|c71ld|小结|header-two|8kvei|工作区的更改需要git+add+添加到暂存区,git+commit+将暂存区的全部更改提交到版本库.|unordered-list-item|5umni|工作区,暂存区,版本库三者既相关独立又密切关联,三者是传递性依赖的关系.|5elv1|git+版本控制的是文件的更改,而不是文件本身,是全量更新模式,而不是差量更新模式.|2l2n1|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|5|3|13|3|1R|6|29|2|0|L|2|Q|2|1I|6|0|0|7|3|1H|3|2A|3|0|0|3|N|B|Z|A|1C|9|31|3|0|D|3|0|7|I|S|8|0|0|6|8|0|0|K|8|0|G|8|0|0|0|0|0|0|0|15|8|0|0|T|7|26|A|0|9|3|0|A|7|28|A|3C|A|3S|A|0|J|2|0|0|0|E|R|18|I|22|R|0|9|J|V|S|0|8|8|0|0|H|I|1F|R|0|0|0|N|I|18|R|0|0|7|R|11|I|26|R|32|I|3N|8|0|1A|8|2H|I|32|R|40|8|0|5|3|I|4|V|4|0|0|8|7|N|A|0|0|0|3|0^^$0|$]|1|@$2|3|4|-4|5|6|7|32|8|@]|9|@]|A|$]]|$2|B|4|C|5|D|7|33|8|@]|9|@]|A|$]]|$2|E|4|F|5|6|7|34|8|@$G|35|H|36|I|J]|$G|37|H|38|I|J]|$G|39|H|3A|I|J]|$G|3B|H|3C|I|K]]|9|@]|A|$]]|$2|L|4|M|5|6|7|3D|8|@$G|3E|H|3F|I|K]|$G|3G|H|3H|I|K]|$G|3I|H|3J|I|J]]|9|@]|A|$]]|$2|N|4|O|5|6|7|3K|8|@]|9|@]|A|$]]|$2|P|4|Q|5|6|7|3L|8|@$G|3M|H|3N|I|J]|$G|3O|H|3P|I|J]|$G|3Q|H|3R|I|J]]|9|@]|A|$]]|$2|R|4|S|5|6|7|3S|8|@$G|3T|H|3U|I|J]|$G|3V|H|3W|I|J]|$G|3X|H|3Y|I|J]|$G|3Z|H|40|I|J]|$G|41|H|42|I|J]]|9|@]|A|$]]|$2|T|4|U|5|6|7|43|8|@$G|44|H|45|I|J]]|9|@]|A|$]]|$2|V|4|W|5|6|7|46|8|@$G|47|H|48|I|J]|$G|49|H|4A|I|J]]|9|@]|A|$]]|$2|X|4|Y|5|Z|7|4B|8|@]|9|@]|A|$10|11]]|$2|12|4|13|5|6|7|4C|8|@$G|4D|H|4E|I|J]]|9|@]|A|$]]|$2|14|4|15|5|Z|7|4F|8|@]|9|@]|A|$10|11]]|$2|16|4|17|5|6|7|4G|8|@$G|4H|H|4I|I|J]]|9|@]|A|$]]|$2|18|4|19|5|6|7|4J|8|@$G|4K|H|4L|I|J]]|9|@]|A|$]]|$2|1A|4|1B|5|6|7|4M|8|@]|9|@]|A|$]]|$2|1C|4|1D|5|Z|7|4N|8|@]|9|@]|A|$10|11]]|$2|1E|4|1F|5|6|7|4O|8|@]|9|@]|A|$]]|$2|1G|4|1H|5|Z|7|4P|8|@]|9|@]|A|$10|11]]|$2|1I|4|1J|5|6|7|4Q|8|@]|9|@]|A|$]]|$2|1K|4|1L|5|Z|7|4R|8|@]|9|@]|A|$10|11]]|$2|1M|4|1N|5|6|7|4S|8|@$G|4T|H|4U|I|J]]|9|@]|A|$]]|$2|1O|4|1P|5|6|7|4V|8|@]|9|@]|A|$]]|$2|1Q|4|1R|5|6|7|4W|8|@$G|4X|H|4Y|I|J]|$G|4Z|H|50|I|J]]|9|@]|A|$]]|$2|1S|4|1T|5|6|7|51|8|@$G|52|H|53|I|J]]|9|@]|A|$]]|$2|1U|4|1V|5|6|7|54|8|@$G|55|H|56|I|J]|$G|57|H|58|I|J]|$G|59|H|5A|I|J]|$G|5B|H|5C|I|J]]|9|@]|A|$]]|$2|1W|4|1X|5|6|7|5D|8|@$G|5E|H|5F|I|K]]|9|@]|A|$]]|$2|1Y|4|1Z|5|6|7|5G|8|@]|9|@]|A|$]]|$2|20|4|21|5|Z|7|5H|8|@]|9|@]|A|$10|11]]|$2|22|4|23|5|6|7|5I|8|@$G|5J|H|5K|I|J]|$G|5L|H|5M|I|J]|$G|5N|H|5O|I|J]]|9|@]|A|$]]|$2|24|4|25|5|6|7|5P|8|@$G|5Q|H|5R|I|J]|$G|5S|H|5T|I|J]]|9|@]|A|$]]|$2|26|4|27|5|6|7|5U|8|@$G|5V|H|5W|I|J]]|9|@]|A|$]]|$2|28|4|29|5|Z|7|5X|8|@]|9|@]|A|$10|11]]|$2|2A|4|2B|5|6|7|5Y|8|@$G|5Z|H|60|I|J]|$G|61|H|62|I|J]]|9|@]|A|$]]|$2|2C|4|2D|5|6|7|63|8|@]|9|@]|A|$]]|$2|2E|4|2F|5|Z|7|64|8|@]|9|@]|A|$10|11]]|$2|2G|4|2H|5|6|7|65|8|@$G|66|H|67|I|J]|$G|68|H|69|I|J]]|9|@]|A|$]]|$2|2I|4|2J|5|6|7|6A|8|@]|9|@]|A|$]]|$2|2K|4|2L|5|6|7|6B|8|@$G|6C|H|6D|I|J]|$G|6E|H|6F|I|J]|$G|6G|H|6H|I|J]|$G|6I|H|6J|I|J]|$G|6K|H|6L|I|J]]|9|@]|A|$]]|$2|2M|4|2N|5|6|7|6M|8|@$G|6N|H|6O|I|J]|$G|6P|H|6Q|I|J]|$G|6R|H|6S|I|J]|$G|6T|H|6U|I|J]]|9|@]|A|$]]|$2|2O|4|2P|5|6|7|6V|8|@$G|6W|H|6X|I|J]|$G|6Y|H|6Z|I|K]|$G|70|H|71|I|K]]|9|@]|A|$]]|$2|2Q|4|2R|5|2S|7|72|8|@]|9|@]|A|$]]|$2|2T|4|2U|5|2V|7|73|8|@$G|74|H|75|I|J]|$G|76|H|77|I|J]]|9|@]|A|$]]|$2|2W|4|2X|5|2V|7|78|8|@]|9|@]|A|$]]|$2|2Y|4|2Z|5|2V|7|79|8|@$G|7A|H|7B|I|J]]|9|@]|A|$]]|$2|30|4|31|5|6|7|7C|8|@]|9|@]|A|$]]]]","plain":"\n版本控制\n我们知道 git 是分布式版本控制系统,所以称被控制对象是版本本身没错,但是从git 命令中发现,并没有版本这个名词,有的只是commit,所以前几节我一直称其为提交.\n为了避免后续教程引发歧义,特意说明,无论是版本也好,提交也罢,都是中文翻译而已,不必太过较真,直接原汁原味称commit也可以啊!\n假设你已掌握暂存区的相关概念,简单来说,暂存区就是更改文件的缓存集合,等待一次性全部提交到版本库,正因如此,方便我们批量操作相关性文件,打包提交到版本库,这正是暂存区的独特魅力.\n我们反复在说 git 是分布式版本控制系统,分布式的概念已经粗略讲过多次了,下面我们讲一下版本控制,谈谈 git 的版本控制和其他系统的版本控制有什么不同,为什么 git 这么优秀,如此流行?\ngit 跟踪并管理的是更改,而非文件本身.正如linux 一切皆文件,java 一切皆对象一样,git 一切皆更改.新增文件是一个更改,新增文件内容是一个更改,修改文件内容是一个更改,删除文件内容也是一个更改,换言之,git 管理的正是这一个个的更改,并不是文件本身.\n下面我们用事实说话,证明 git 管理的是更改而不是文件本身:\n第一步,追加 git tracks changes 到 test.txt 文件\n# 查看 test.txt 文件内容\n$ cat test.txt\ngit test\ngit init\ngit diff\nunderstand how git control version\nhow git work\n# 追加 git tracks changes 文件内容到 test.txt 文件\n$ echo \"git tracks changes\" >> test.txt\n# 再次查看 test.txt 文件内容\n$ cat test.txt\ngit test\ngit init\ngit diff\nunderstand how git control version\nhow git work\ngit tracks changes\n$ \n第二步,添加test.txt 文件到暂存区并查看文件状态\n$ git add test.txt\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n    modified:   test.txt\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\n$ \n对于上述内容应该不必再解释了吧,无外乎说test.txt 文件已修改(modified),即将被提交(to be committed).\n但是,此时偏偏不提交,继续修改 test.txt 文件:(这种情况实际工作中也有可能出现,比如你正在研发某功能,本以为已经开发完毕,满心欢喜添加到暂存区,然后意外发现一个小bug,分分钟就修复了,时间间隔很短以至于你根本不记得还需要再次添加到暂存区.)\n第三步,继续修改文件内容,忘记再次添加到暂存区\n# 编辑 test.txt 文件,将 git tracks changes 更改为 git tracks changes of files\nvim test.txt\n# 查看 test.txt 文件内容\n$ cat test.txt\ngit test\ngit init\ngit diff\nunderstand how git control version\nhow git work\ngit tracks changes of files\n$ \n第四步,正常提交暂存区的全部更改到版本库\n$ git commit -m \"git tracks changes\"\n[master 2daa74a] git tracks changes\n 1 file changed, 1 insertion(+)\n此次提交后,我们再看一下文件状态:\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    modified:   test.txt\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$\n发现有什么不同吗?以往提交后再次查看文件状态,工作区都是干净的,这次居然提示我们 test.txt 文件已经修改但未添加到暂存区?!\n等一下,我们先回忆一下我们的操作流程:\n第一次修改(git tracks changes) -> git add -> 第二次修改(git tracks changes of files) -> git commit\n这样就很好理解了,git 管理的是更改而不是文件本身,如果是文件本身的话,应该将文件的内容全部提交才对,所以管理的是更改.\n第一次修改过后使用 git add 命令将工作区的第一次修改内容放到暂存区准备提交,但是此时工作区发生了第二次修改,注意,这次修改并没有放到暂存区,所以下一步的git commit 命令提交的暂存区内容中自然也就没有第二次修改的内容了!所以git commit 完毕后运行git status命令才会发现此时工作区和暂存区还存在版本差异,即此时工作区不是干净的!\n这一次的实验很好理解,工作区的修改需要主动告诉暂存区,暂存区的全部更改再提交到版本库.所以版本库的提交取决于暂存区,而暂存区又取决工作区是否主动将更改添加进去了吗!\n理论再多不如亲身体验,让我们直接比较一下工作区和版本库的差异吧!\n# 比较 test.txt 文件在工作区和版本库的差异\n$ git diff HEAD -- test.txt\ndiff --git a/test.txt b/test.txt\nindex d31bdd2..56c76b7 100644\n--- a/test.txt\n+++ b/test.txt\n@@ -3,4 +3,4 @@ git init\n git diff\n understand how git control version\n how git work\n-git tracks changes\n+git tracks changes of files\n$ \n由此可见,工作区比版本库多了git tracks changes of files,少了git tracks changes,所以说第二次修改内容 git tracks changes of files 并没有被提交.\n现在我们再解释一下-git tracks changes 和 +git tracks changes of files 的问题:\n首先查看工作区 test.txt 文件内容\n$ cat test.txt\ngit test\ngit init\ngit diff\nunderstand how git control version\nhow git work\ngit tracks changes of files\n$ \n根据上述分析,我们知道第一次的修改git tracks changes 已被提交到版本库,第二次的修改git tracks changes of files 没有被提交而是继续留在工作区.\n因此,可以推断出目前版本库的文件应该是这样的:\ngit test\ngit init\ngit diff\nunderstand how git control version\nhow git work\ngit tracks changes\n既然如何,工作区和版本库相比岂不刚好是少了一个git tracks changes,多了git tracks changes of files,其余文件内容完全相同!\n透过现象看本质,已经分析了现象也解释了产生现象的原因,是时候分析一下本质了.\n抛出问题:因为git tracks changes of fiels 和 git tracks changes 被视为不同的更改,所以才会造成上述现象.如果git tracks changes of fiels 被认为是git tracks changes + of fiels 两者叠加产生的更改,还会产生上述现象吗?\n答案是否定的,如果两个更改可以叠加的话,按照版本控制的思路,第二次的修改即便没有提交也只是 of fiels 没有加入到版本库而已,如此一来,工作区和版本库的差异将不再是少了一个git tracks changes,多了git tracks changes of files,而仅仅是多了of files!\n由此可见,git 版本控制系统其实是全量更新的思维模式,并不是差量更新模式.\n小结\n工作区的更改需要git add 添加到暂存区,git commit 将暂存区的全部更改提交到版本库.\n工作区,暂存区,版本库三者既相关独立又密切关联,三者是传递性依赖的关系.\ngit 版本控制的是文件的更改,而不是文件本身,是全量更新模式,而不是差量更新模式.\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n版本控制\n我们知道 git 是分布式版本控制系统,所以称被控制对象是版本本身没错,但是从git 命令中发现,并没有版本这个名词,有的只是commit,所以前几...","summary":"我们知道 git 是分布式版本控制系统,所以称被控制对象是版本本身没错,但是从git 命令中发现,并没有版本这个名词,有的只是commit,所以前几节我一直称其...","abstract":"我们知道 git 是分布式版本控制系统,所以称被控制对象是版本本身没错,但是从git 命令中发现,并没有版本这个名词,有的只是commit,所以前几节我一直称其...","description":"","picture":"","coverImageUrl":"","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/18 11:20"},"authorId":2952369,"columnId":75668,"writeTime":1554276331,"updateTime":1554276331,"viewCount":64,"likeCount":2,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"},{"tagId":10668,"tagName":"分布式"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2709,"type":40,"actionInfo":{"articleId":1409916,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554276320,"detail":{"id":1409916,"articleId":1409916,"title":"git 入门教程之基本概念\n                                                                            原","content":"entityMap|0|type|IMAGE|mutability|IMMUTABLE|data|imageUrl|https://ask.qcloudimg.com/http-save/yehe-2952369/my8s7zjs1w.png|imageAlt|working-directory.png|1|https://ask.qcloudimg.com/http-save/yehe-2952369/dvjqbnf4gu.png|repository.png|2|https://ask.qcloudimg.com/http-save/yehe-2952369/1cg8pcozh0.jpeg|relationship.jpg|blocks|key|2jusa|text|unstyled|depth|inlineStyleRanges|entityRanges|bt4ui|基本概念|header-one|8ksr3|了解工作区,暂存区和版本库的区别和联系有助于我们更好理解+git+的工作流程,了解命令的操作意图.|offset|length|style|CODE|27oo|+git+和其他版本控制系统如+svn+的不同之处就是有暂存区的概念.\n+|blockquote|9heis|header-two|f03vs|工作区+%7C+Working+Directory|unordered-list-item|BOLD|8k3gp|正常情况下能看到的目录(不包括隐藏文件),也就是用户主动创建的目录|4jp1i|?|atomic|f037k|暂存区+%7C+Stage|22oqg|工作区下的隐藏.git目录下的.index文件,因此也称为索引.|45fc3|版本库+%7C+Repository|cmd07|工作区下的隐藏目录.git目录|881sh|f4otj|通过前几节我们知道,将文件纳入版本控制,需要分两步操作:|e8j5n|第一步+git+add+添加文件,实际上是将文件更改添加到暂存区.|ecf7v|第二步+git+commit+提交更改,实际上是将暂存区所有内容提交到当前分支.|bd5jd|我们使用+git+init+命令初始化创建+git+仓库时,git+会自动创建唯一一个+master+分支,默认所有操作是在+master+分支上进行的,所以+git+commit+就是徃+master+分支上提交更改的.|838gv|通俗地讲,文件更改可以多次添加到暂存区,即允许多次执行+git+add+命令,然后一次性提交暂存区的全部更改到版本库,即只需要执行一次+git+commit+命令即可.|bc5bn|说说个人理解+git+为何分成三部分进行版本控制操作,二部分行不行?|b2d1j|答案是肯定的,没有暂存区概念的+svn+同样可以进行版本控制,所以+git+增加暂存区必然是有存在的意外也就是所谓的好处的.|8uf1j|第一,暂存区的概念允许将本地文件的更改添加进来,也就是说本地文件的更改只有添加到暂存区才能进行下一步的提交更改,所以说那些更改添加到暂存区是由开发者本人决定的,这其实有了一定灵活性,并不是所有的更改都需要被记录!|b35h3|第二,暂存区作为中间过程,暂存区的内容是打算提交更改的内容,也就是说暂存区可以视为一种临时缓存,用来记录预提交更改.实际工作中,新功能的开发并不是一蹴而就的,是由一系列的更改一起组成的,如果将这些更改分散开来单独提交,那势必会产生很多commit,如果等待全部工作完成再提交的话,解决了过多commit的问题,但是又遇到新问题就是你可能很长时间才能提交一次更改,失去了版本控制的意义.综上所述,暂存区的出现一种很好的解决方案,它允许将相关性代码添加在一起,方便后续提交更改时提交的都是相关性代码!|3nluu|第三,作为分布式版本控制系统,不像集中式控制系统那样,对网络强相关,失去网络的+svn+是没办法再进行版本控制的,但失去网络的+git+仍然可以进行版本控制,只不过不能远程操作了而已,不过这部分也是无可厚非的,正所谓\"巧妇难为无米之炊\",你总不能要求断网下继续访问百度吧!|acs70|好了,我们继续回到+git+常用操作上,看一下工作区,暂存区和版本库三者如何协同工作的.|58mef|首先,先修改test.txt文件.|8celq|#+查看+test.txt+文件内容\n$+cat+test.txt\ngit+test\ngit+init\ngit+diff\nunderstand+how+git+control+version\n#+追加+how+git+work+到+test.txt+文件\n$+echo+\"how+git+work\"+>>+test.txt\n#+再次查看+test.txt+文件内容\n$+cat+test.txt\ngit+test\ngit+init\ngit+diff\nunderstand+how+git+control+version\nhow+git+work\n$+|code-block|syntax|javascript|btqa2|紧接着新建newFile.txt+并随便输入内容:|8jup3|#+查看当前文件夹下全部文件\n$+ls+.\nfile1.txt+++file2.txt+++file3.txt+++test.txt\n#+创建新文件+newFile.txt\n$+touch+newFile.txt\n#+再次查看当前文件夹下全部文件\n$+ls\nfile1.txt+++file2.txt+++file3.txt+++newFile.txt+test.txt\n#+输入+add+newFile.txt+文件内容+到+newFile.txt+文件\n$+echo+\"add+newFile.txt\"+>+newFile.txt\n#+查看+newFile.txt+文件内容\n$+cat+newFile.txt\nadd+newFile.txt\n$+|dk623|现在运行git+status+命令查看当前文件状态:|551v0|$+git+status\nOn+branch+master\nChanges+not+staged+for+commit:\n++(use+\"git+add+<file>...\"+to+update+what+will+be+committed)\n++(use+\"git+checkout+--+<file>...\"+to+discard+changes+in+working+directory)\n\n++++modified:+++test.txt\n\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n++++newFile.txt\n\nno+changes+added+to+commit+(use+\"git+add\"+and/or+\"git+commit+-a\")\n$+|66idb|从输出结果中得知,test.txt+文件已修改(modified),还没添加到暂存区,而newFile.txt+文件还没被跟踪(Untracked).|dtuu9|现在我们使用git+add+命令将+test.txt+和+newFile.txt+都添加到暂存区,再用+git+status+查看文件状态:|euqfa|#+添加+test.txt+文件\ngit+add+test.txt\n#+添加+newFile.txt+文件\ngit+add+newFile.txt\n#+查看文件状态\ngit+status\nOn+branch+master\nChanges+to+be+committed:\n++(use+\"git+reset+HEAD+<file>...\"+to+unstage)\n\n++++new+file:+++newFile.txt\n++++modified:+++test.txt\n\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n$+|2ecn8|现在输出结果和上次就不一样了,显示的是即将被提交文件,其中newFile.txt+是新文件(new+file),test.txt+是修改文件(modified).|7tcil|所以,git+add+命令作用是将需要提交的更改文件临时放到暂存区中,然后执行git+commit+命令就可以一次性将暂存区的所有内容提交到当前分支.|1p5cs|$+git+commit+-m+\"understand+how+stage+works\"\n[master+a5cd3fb]+understand+how+stage+works\n+2+files+changed,+2+insertions(%2B)\n+create+mode+100644+newFile.txt\n$+git+status\nOn+branch+master\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\nnothing+added+to+commit+but+untracked+files+present+(use+\"git+add\"+to+track)\n$+|dqek9|暂存区的所有内容提交到版本库,所以运行git+status+时,工作区是干净的,即此时暂存区没有内容了!|p1st|+.DS_Store+是+mac+电脑自动生成的文件,可以暂不理会,等到后面的.gitignore+文件时再处理.\n+|anb2o|图解|9uo06|下图展示了工作区,暂存区,版本库之间的关系:|a20p6|45b6n|图中左侧是工作区,右侧是版本库,版本库中标记index+的区域是暂存区,标记+master+的是+master+分支所代表的目录树.|493he|HEAD+是指向+master+分支的指针,标记+objects+的区域是+git+的对象库,真实路径位于.git/objects目录下,用于表示创建的对象和内容.|4mcpk|意图说明|header-three|gvh6|git+add+添加文件|t50e|工作区的修改或者新增的文件执行git+add+命令后,暂存区(index)的目录树会自动更新,同时引发这次变化的文件内容会被记录下来,即生成对象库(objects)中的新对象,而对象的+id会被记录到暂存区的文件索引(index)中.|25e2k|git+commit+提交文件|brrrn|暂存区的目录树写入到对象库(objects),master+分支的目录树自动更新.|4ao5t|git+reset+HEAD+撤销文件|39orr|暂存区的目录树被重写,被master+分支的目录树所替换,但是工作区不受影响.|be7dl|git+rm+--cached+<file>+删除缓存文件|csk6e|删除暂存区文件,工作区不受影响.|265dk|git+checkout+.+检出文件|69vv9|暂存区的文件替换工作区文件,注意:当前尚未添加到暂存区的改动会全部丢失!|dmfu7|git+checkout+HEAD+.+检出文件|ca8na|HEAD+指针指向的+master+分支中的文件替换暂存区以及工作区文件,注意:不仅清除工作区未提交的改动,连暂存区未提交的改动也会被清除!|87av1|小结|3k316|以上就是常用命令的背后意图,主要是工作区,暂存区和版本库之间文件同步策略的关系.|720ol|git+add+是工作区更新到暂存区|785i8|git+commit+是暂存区更新到版本库|2agio|git+reset+HEAD+是版本库更新到暂存区|fmmad|git+checkout+--+<file>+是暂存区更新到工作区|9n6p8|git+checkout+HEAD+<file>+是版本库同时更新暂存区和工作区|8omlh|git+rm+--cached+清空暂存区|ck80o|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|T|3|0|1|3|G|3|0|0|0|N|0|0|0|1|0|0|0|B|0|7|4|F|6|0|0|G|0|9|4|0|0|1|1|0|0|4|7|0|4|A|0|5|8|M|3|U|3|18|6|1R|6|28|A|2N|6|0|S|7|1W|A|0|7|3|0|G|3|Y|3|0|0|39|6|41|6|0|14|3|1S|3|0|A|3|0|6|8|0|0|5|B|0|0|4|A|0|0|9|8|18|B|0|6|7|I|8|T|B|1G|A|0|0|T|B|1K|8|0|3|7|13|A|0|0|J|A|0|1|9|13|A|0|0|0|0|1|2|0|M|5|13|6|1D|6|0|0|4|9|6|P|7|12|3|1H|C|0|0|0|C|0|7|0|F|7|0|0|F|0|A|0|N|6|0|0|J|0|E|0|C|6|0|0|T|0|M|0|0|0|J|0|E|0|0|0|O|0|J|0|0|4|B|6|0|0|0|0|7|0|0|A|0|0|E|0|0|M|0|0|O|0|0|F|0^^$0|$1|$2|3|4|5|6|$7|8|9|A]]|B|$2|3|4|5|6|$7|C|9|D]]|E|$2|3|4|5|6|$7|F|9|G]]]|H|@$I|J|K|-4|2|L|M|4K|N|@]|O|@]|6|$]]|$I|P|K|Q|2|R|M|4L|N|@]|O|@]|6|$]]|$I|S|K|T|2|L|M|4M|N|@$U|4N|V|4O|W|X]]|O|@]|6|$]]|$I|Y|K|Z|2|10|M|4P|N|@$U|4Q|V|4R|W|X]|$U|4S|V|4T|W|X]]|O|@]|6|$]]|$I|11|K|Q|2|12|M|4U|N|@]|O|@]|6|$]]|$I|13|K|14|2|15|M|4V|N|@$U|4W|V|4X|W|16]]|O|@]|6|$]]|$I|17|K|18|2|L|M|4Y|N|@]|O|@]|6|$]]|$I|19|K|1A|2|1B|M|4Z|N|@]|O|@$U|50|V|51|I|52]]|6|$]]|$I|1C|K|1D|2|15|M|53|N|@$U|54|V|55|W|16]]|O|@]|6|$]]|$I|1E|K|1F|2|L|M|56|N|@$U|57|V|58|W|X]|$U|59|V|5A|W|X]]|O|@]|6|$]]|$I|1G|K|1H|2|15|M|5B|N|@$U|5C|V|5D|W|16]]|O|@]|6|$]]|$I|1I|K|1J|2|L|M|5E|N|@$U|5F|V|5G|W|X]]|O|@]|6|$]]|$I|1K|K|1A|2|1B|M|5H|N|@]|O|@$U|5I|V|5J|I|5K]]|6|$]]|$I|1L|K|1M|2|L|M|5L|N|@]|O|@]|6|$]]|$I|1N|K|1O|2|15|M|5M|N|@$U|5N|V|5O|W|X]]|O|@]|6|$]]|$I|1P|K|1Q|2|15|M|5P|N|@$U|5Q|V|5R|W|X]]|O|@]|6|$]]|$I|1R|K|1S|2|L|M|5S|N|@$U|5T|V|5U|W|X]|$U|5V|V|5W|W|X]|$U|5X|V|5Y|W|X]|$U|5Z|V|60|W|X]|$U|61|V|62|W|X]|$U|63|V|64|W|X]|$U|65|V|66|W|X]]|O|@]|6|$]]|$I|1T|K|1U|2|L|M|67|N|@$U|68|V|69|W|X]|$U|6A|V|6B|W|X]]|O|@]|6|$]]|$I|1V|K|1W|2|L|M|6C|N|@$U|6D|V|6E|W|X]]|O|@]|6|$]]|$I|1X|K|1Y|2|L|M|6F|N|@$U|6G|V|6H|W|X]|$U|6I|V|6J|W|X]]|O|@]|6|$]]|$I|1Z|K|20|2|L|M|6K|N|@]|O|@]|6|$]]|$I|21|K|22|2|L|M|6L|N|@$U|6M|V|6N|W|X]|$U|6O|V|6P|W|X]]|O|@]|6|$]]|$I|23|K|24|2|L|M|6Q|N|@$U|6R|V|6S|W|X]|$U|6T|V|6U|W|X]]|O|@]|6|$]]|$I|25|K|26|2|L|M|6V|N|@$U|6W|V|6X|W|X]]|O|@]|6|$]]|$I|27|K|28|2|L|M|6Y|N|@$U|6Z|V|70|W|X]]|O|@]|6|$]]|$I|29|K|2A|2|2B|M|71|N|@]|O|@]|6|$2C|2D]]|$I|2E|K|2F|2|L|M|72|N|@$U|73|V|74|W|X]]|O|@]|6|$]]|$I|2G|K|2H|2|2B|M|75|N|@]|O|@]|6|$2C|2D]]|$I|2I|K|2J|2|L|M|76|N|@$U|77|V|78|W|X]]|O|@]|6|$]]|$I|2K|K|2L|2|2B|M|79|N|@]|O|@]|6|$2C|2D]]|$I|2M|K|2N|2|L|M|7A|N|@$U|7B|V|7C|W|X]|$U|7D|V|7E|W|X]]|O|@]|6|$]]|$I|2O|K|2P|2|L|M|7F|N|@$U|7G|V|7H|W|X]|$U|7I|V|7J|W|X]|$U|7K|V|7L|W|X]|$U|7M|V|7N|W|X]]|O|@]|6|$]]|$I|2Q|K|2R|2|2B|M|7O|N|@]|O|@]|6|$2C|2D]]|$I|2S|K|2T|2|L|M|7P|N|@$U|7Q|V|7R|W|X]|$U|7S|V|7T|W|X]]|O|@]|6|$]]|$I|2U|K|2V|2|L|M|7U|N|@$U|7V|V|7W|W|X]|$U|7X|V|7Y|W|X]]|O|@]|6|$]]|$I|2W|K|2X|2|2B|M|7Z|N|@]|O|@]|6|$2C|2D]]|$I|2Y|K|2Z|2|L|M|80|N|@$U|81|V|82|W|X]]|O|@]|6|$]]|$I|30|K|31|2|10|M|83|N|@$U|84|V|85|W|X]|$U|86|V|87|W|X]]|O|@]|6|$]]|$I|32|K|33|2|12|M|88|N|@]|O|@]|6|$]]|$I|34|K|35|2|L|M|89|N|@]|O|@]|6|$]]|$I|36|K|1A|2|1B|M|8A|N|@]|O|@$U|8B|V|8C|I|8D]]|6|$]]|$I|37|K|38|2|L|M|8E|N|@$U|8F|V|8G|W|X]|$U|8H|V|8I|W|X]|$U|8J|V|8K|W|X]]|O|@]|6|$]]|$I|39|K|3A|2|L|M|8L|N|@$U|8M|V|8N|W|X]|$U|8O|V|8P|W|X]|$U|8Q|V|8R|W|X]|$U|8S|V|8T|W|X]|$U|8U|V|8V|W|X]]|O|@]|6|$]]|$I|3B|K|3C|2|3D|M|8W|N|@]|O|@]|6|$]]|$I|3E|K|3F|2|15|M|8X|N|@$U|8Y|V|8Z|W|16]|$U|90|V|91|W|X]]|O|@]|6|$]]|$I|3G|K|3H|2|L|M|92|N|@$U|93|V|94|W|X]]|O|@]|6|$]]|$I|3I|K|3J|2|15|M|95|N|@$U|96|V|97|W|16]|$U|98|V|99|W|X]]|O|@]|6|$]]|$I|3K|K|3L|2|L|M|9A|N|@$U|9B|V|9C|W|X]]|O|@]|6|$]]|$I|3M|K|3N|2|15|M|9D|N|@$U|9E|V|9F|W|16]|$U|9G|V|9H|W|X]]|O|@]|6|$]]|$I|3O|K|3P|2|L|M|9I|N|@$U|9J|V|9K|W|X]]|O|@]|6|$]]|$I|3Q|K|3R|2|15|M|9L|N|@$U|9M|V|9N|W|16]|$U|9O|V|9P|W|X]]|O|@]|6|$]]|$I|3S|K|3T|2|L|M|9Q|N|@]|O|@]|6|$]]|$I|3U|K|3V|2|15|M|9R|N|@$U|9S|V|9T|W|16]|$U|9U|V|9V|W|X]]|O|@]|6|$]]|$I|3W|K|3X|2|L|M|9W|N|@]|O|@]|6|$]]|$I|3Y|K|3Z|2|15|M|9X|N|@$U|9Y|V|9Z|W|16]|$U|A0|V|A1|W|X]]|O|@]|6|$]]|$I|40|K|41|2|L|M|A2|N|@$U|A3|V|A4|W|X]|$U|A5|V|A6|W|X]]|O|@]|6|$]]|$I|42|K|43|2|3D|M|A7|N|@]|O|@]|6|$]]|$I|44|K|45|2|L|M|A8|N|@]|O|@]|6|$]]|$I|46|K|47|2|15|M|A9|N|@$U|AA|V|AB|W|X]]|O|@]|6|$]]|$I|48|K|49|2|15|M|AC|N|@$U|AD|V|AE|W|X]]|O|@]|6|$]]|$I|4A|K|4B|2|15|M|AF|N|@$U|AG|V|AH|W|X]]|O|@]|6|$]]|$I|4C|K|4D|2|15|M|AI|N|@$U|AJ|V|AK|W|X]]|O|@]|6|$]]|$I|4E|K|4F|2|15|M|AL|N|@$U|AM|V|AN|W|X]]|O|@]|6|$]]|$I|4G|K|4H|2|15|M|AO|N|@$U|AP|V|AQ|W|X]]|O|@]|6|$]]|$I|4I|K|4J|2|L|M|AR|N|@]|O|@]|6|$]]]]","plain":"\n基本概念\n了解工作区,暂存区和版本库的区别和联系有助于我们更好理解 git 的工作流程,了解命令的操作意图.\n git 和其他版本控制系统如 svn 的不同之处就是有暂存区的概念.\n \n基本概念\n工作区 | Working Directory\n正常情况下能看到的目录(不包括隐藏文件),也就是用户主动创建的目录\n?\n暂存区 | Stage\n工作区下的隐藏.git目录下的.index文件,因此也称为索引.\n版本库 | Repository\n工作区下的隐藏目录.git目录\n?\n通过前几节我们知道,将文件纳入版本控制,需要分两步操作:\n第一步 git add 添加文件,实际上是将文件更改添加到暂存区.\n第二步 git commit 提交更改,实际上是将暂存区所有内容提交到当前分支.\n我们使用 git init 命令初始化创建 git 仓库时,git 会自动创建唯一一个 master 分支,默认所有操作是在 master 分支上进行的,所以 git commit 就是徃 master 分支上提交更改的.\n通俗地讲,文件更改可以多次添加到暂存区,即允许多次执行 git add 命令,然后一次性提交暂存区的全部更改到版本库,即只需要执行一次 git commit 命令即可.\n说说个人理解 git 为何分成三部分进行版本控制操作,二部分行不行?\n答案是肯定的,没有暂存区概念的 svn 同样可以进行版本控制,所以 git 增加暂存区必然是有存在的意外也就是所谓的好处的.\n第一,暂存区的概念允许将本地文件的更改添加进来,也就是说本地文件的更改只有添加到暂存区才能进行下一步的提交更改,所以说那些更改添加到暂存区是由开发者本人决定的,这其实有了一定灵活性,并不是所有的更改都需要被记录!\n第二,暂存区作为中间过程,暂存区的内容是打算提交更改的内容,也就是说暂存区可以视为一种临时缓存,用来记录预提交更改.实际工作中,新功能的开发并不是一蹴而就的,是由一系列的更改一起组成的,如果将这些更改分散开来单独提交,那势必会产生很多commit,如果等待全部工作完成再提交的话,解决了过多commit的问题,但是又遇到新问题就是你可能很长时间才能提交一次更改,失去了版本控制的意义.综上所述,暂存区的出现一种很好的解决方案,它允许将相关性代码添加在一起,方便后续提交更改时提交的都是相关性代码!\n第三,作为分布式版本控制系统,不像集中式控制系统那样,对网络强相关,失去网络的 svn 是没办法再进行版本控制的,但失去网络的 git 仍然可以进行版本控制,只不过不能远程操作了而已,不过这部分也是无可厚非的,正所谓\"巧妇难为无米之炊\",你总不能要求断网下继续访问百度吧!\n好了,我们继续回到 git 常用操作上,看一下工作区,暂存区和版本库三者如何协同工作的.\n首先,先修改test.txt文件.\n# 查看 test.txt 文件内容\n$ cat test.txt\ngit test\ngit init\ngit diff\nunderstand how git control version\n# 追加 how git work 到 test.txt 文件\n$ echo \"how git work\" >> test.txt\n# 再次查看 test.txt 文件内容\n$ cat test.txt\ngit test\ngit init\ngit diff\nunderstand how git control version\nhow git work\n$ \n紧接着新建newFile.txt 并随便输入内容:\n# 查看当前文件夹下全部文件\n$ ls .\nfile1.txt   file2.txt   file3.txt   test.txt\n# 创建新文件 newFile.txt\n$ touch newFile.txt\n# 再次查看当前文件夹下全部文件\n$ ls\nfile1.txt   file2.txt   file3.txt   newFile.txt test.txt\n# 输入 add newFile.txt 文件内容 到 newFile.txt 文件\n$ echo \"add newFile.txt\" > newFile.txt\n# 查看 newFile.txt 文件内容\n$ cat newFile.txt\nadd newFile.txt\n$ \n现在运行git status 命令查看当前文件状态:\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    modified:   test.txt\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n    newFile.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ \n从输出结果中得知,test.txt 文件已修改(modified),还没添加到暂存区,而newFile.txt 文件还没被跟踪(Untracked).\n现在我们使用git add 命令将 test.txt 和 newFile.txt 都添加到暂存区,再用 git status 查看文件状态:\n# 添加 test.txt 文件\ngit add test.txt\n# 添加 newFile.txt 文件\ngit add newFile.txt\n# 查看文件状态\ngit status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n    new file:   newFile.txt\n    modified:   test.txt\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n$ \n现在输出结果和上次就不一样了,显示的是即将被提交文件,其中newFile.txt 是新文件(new file),test.txt 是修改文件(modified).\n所以,git add 命令作用是将需要提交的更改文件临时放到暂存区中,然后执行git commit 命令就可以一次性将暂存区的所有内容提交到当前分支.\n$ git commit -m \"understand how stage works\"\n[master a5cd3fb] understand how stage works\n 2 files changed, 2 insertions(+)\n create mode 100644 newFile.txt\n$ git status\nOn branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n$ \n暂存区的所有内容提交到版本库,所以运行git status 时,工作区是干净的,即此时暂存区没有内容了!\n .DS_Store 是 mac 电脑自动生成的文件,可以暂不理会,等到后面的.gitignore 文件时再处理.\n \n图解\n下图展示了工作区,暂存区,版本库之间的关系:\n?\n图中左侧是工作区,右侧是版本库,版本库中标记index 的区域是暂存区,标记 master 的是 master 分支所代表的目录树.\nHEAD 是指向 master 分支的指针,标记 objects 的区域是 git 的对象库,真实路径位于.git/objects目录下,用于表示创建的对象和内容.\n意图说明\ngit add 添加文件\n工作区的修改或者新增的文件执行git add 命令后,暂存区(index)的目录树会自动更新,同时引发这次变化的文件内容会被记录下来,即生成对象库(objects)中的新对象,而对象的 id会被记录到暂存区的文件索引(index)中.\ngit commit 提交文件\n暂存区的目录树写入到对象库(objects),master 分支的目录树自动更新.\ngit reset HEAD 撤销文件\n暂存区的目录树被重写,被master 分支的目录树所替换,但是工作区不受影响.\ngit rm --cached <file> 删除缓存文件\n删除暂存区文件,工作区不受影响.\ngit checkout . 检出文件\n暂存区的文件替换工作区文件,注意:当前尚未添加到暂存区的改动会全部丢失!\ngit checkout HEAD . 检出文件\nHEAD 指针指向的 master 分支中的文件替换暂存区以及工作区文件,注意:不仅清除工作区未提交的改动,连暂存区未提交的改动也会被清除!\n小结\n以上就是常用命令的背后意图,主要是工作区,暂存区和版本库之间文件同步策略的关系.\ngit add 是工作区更新到暂存区\ngit commit 是暂存区更新到版本库\ngit reset HEAD 是版本库更新到暂存区\ngit checkout -- <file> 是暂存区更新到工作区\ngit checkout HEAD <file> 是版本库同时更新暂存区和工作区\ngit rm --cached 清空暂存区\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n基本概念\n了解工作区,暂存区和版本库的区别和联系有助于我们更好理解 git 的工作流程,了解命令的操作意图.\n git 和其他版本控制系统如 svn 的不同之...","summary":"了解工作区,暂存区和版本库的区别和联系有助于我们更好理解 git 的工作流程,了解命令的操作意图.","abstract":"了解工作区,暂存区和版本库的区别和联系有助于我们更好理解 git 的工作流程,了解命令的操作意图.","description":"","picture":"https://ask.qcloudimg.com/http-save/yehe-2952369/my8s7zjs1w.png","coverImageUrl":"https://ask.qcloudimg.com/http-save/yehe-2952369/my8s7zjs1w.png","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/18 11:08"},"authorId":2952369,"columnId":75668,"writeTime":1554276320,"updateTime":1554276320,"viewCount":70,"likeCount":4,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"},{"tagId":10285,"tagName":"SVN"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2708,"type":40,"actionInfo":{"articleId":1409915,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554276306,"detail":{"id":1409915,"articleId":1409915,"title":"git 入门教程之回到过去\n                                                                            原","content":"entityMap|blocks|key|97aul|text|type|unstyled|depth|inlineStyleRanges|entityRanges|data|7bqbb|回到过去|header-one|66nn2|背景|header-two|ek02p|现在你已经掌握git的基本操作了,文件发生更改首先使用+git+add+添加更改,然后+git+commit+提交全部更改,当本地文件再次发生更改时,仍然需要git+add+和+git+commit+两步操作,中途如何想查看文件是否发生更改,使用git+status+查看版本库状态,git+diff+命令帮助我们查看更改详情.|offset|length|style|CODE|2g12n|像这样重复的操作其实每次都会产生一个快照,用于保存文件状态,只不过这个快照不是完整的文件,被称为提交或者版本commit+.一旦发生意外,假如文件修改乱了或者误删了文件,我们可以从最近的一个+commit+中进行恢复,然后继续工作,这就是git+管理的好处之一.|frcpq|每一次重大更新或者你认为比较重要的时刻,我们总会留作纪念,添加些什么特殊标记来区分平时的提交,还记得我们每次提交都会添加备注吗?git+commit+-m+<remark>+这条命令现在就可以大显身手了,我们现在要做的就是找到我们提交的历史记录,而历史记录中有我们提交的详情,这样即使过了一个月或者更长时间,我们也能清楚知道当时的情景!|3237b|查看提交历史记录+git+log,接下来我们赶紧试一下吧|BOLD|dpfta|$+git+log\ncommit+36f234a60d858871f040cb0d7ca3e78251df82f7+(HEAD+->+master)\nAuthor:+snowdreams1006+<snowdreams1006@163.com>\nDate:+++Thu+Mar+7+22:19:00+2019+%2B0800\n\n++++add+understand+how+git+control+version\n\ncommit+2006f72ffe2ce2278b5974313b8598847cf445e4\nAuthor:+snowdreams1006+<snowdreams1006@163.com>\nDate:+++Tue+Mar+5+13:27:46+2019+%2B0800\n\n++++add+3+files.\n\ncommit+eaa4850070354ae987dc5108a9fd57fda9d64730\nAuthor:+snowdreams1006+<snowdreams1006@163.com>\nDate:+++Tue+Mar+5+12:18:57+2019+%2B0800\n\n++++add+git+init\n\ncommit+6ad8956bc09a6a62c731711eabe796690aa6471c\nAuthor:+snowdreams1006+<snowdreams1006@163.com>\nDate:+++Tue+Mar+5+12:17:51+2019+%2B0800\n\n++++add+test.txt|code-block|syntax|javascript|dtgni|git+log+命令默认显示最近到最远的提交历史,这一点也很好理解,毕竟我们是在命令行操作,输入git+log+完毕后自然先要定位到命令处,看到最新提交记录方便我们确认是否符合我们预期,还有一点就是如果提交历史过多,从头开始到最新提交记录岂不是眼花缭乱,简直不敢想象啊!|2si8c|下面以最新的一次提交+commit+为例,简单解释一下输出内容:|2qs7b|#+提交唯一标示id:+36f234a60d858871f040cb0d7ca3e78251df82f7\ncommit+36f234a60d858871f040cb0d7ca3e78251df82f7+(HEAD+->+master)\n\n#+作者:+snowdreams1006+邮箱:+<snowdreams1006@163.com>\nAuthor:+snowdreams1006+<snowdreams1006@163.com>\n\n#+日期:+Thu+Mar+7+22:19:00+2019+%2B0800\nDate:+++Thu+Mar+7+22:19:00+2019+%2B0800\n\n#+提交备注:+add+understand+how+git+control+version\n\n++++add+understand+how+git+control+version|6lreu|默认输出内容有点多,不仅有提交+id+,提交备注还有作者时间之类的,由于每个+commit+都如此,这样一来,满屏都展示不下,那能不能简化些呢?|cu6in|一行显示提交日志+**+--pretty=oneline+**,即git+log+--pretty=oneline|8ao9a|$+git+log+--pretty=oneline\n36f234a60d858871f040cb0d7ca3e78251df82f7+(HEAD+->+master)+add+understand+how+git+control+version\n2006f72ffe2ce2278b5974313b8598847cf445e4+add+3+files.\neaa4850070354ae987dc5108a9fd57fda9d64730+add+git+init\n6ad8956bc09a6a62c731711eabe796690aa6471c+add+test.txt\n$+|230su|相比无参数git+log,是不是简短了一些呢?+和之前日志相比少了作者和时间等信息,仍然保留提交+id+和提交备注.|2vhkp|因为提交+commit+是+git+的基础,当然不能省略,而提交备注能够帮助我们理解commit+的含义,毕竟提交备注使我们自定义的内容,这也是我们为什么提交时要写提交备注的原因!|4608g|现在我们已经了解到版本库存放了我们的提交,接下来让我们验证一下是否能够回到过去吧!|a93ud|回到上一个提交,上一个提交自然是相对当前提交而言,只有知道当前提交才能知道上一个提交以及上一个提交的上一个提交.+提交id+36f234a60d858871f040cb0d7ca3e78251df82f7,那么上一个提交HEAD%5E,上上一个提交是HEAD%5E%5E.如果此时我想回到往上数100个版本,那么是不是可以这么写?|cvfkc|HEAD%5E%5E%5E%5E...%5E%5E%5E+其中%5E+有100个,如果需要手动打出100个%5E的话,那么绝对是疯了!+既然有这种相对定位方式,自然也有绝对定位方式,用绝对定位方式解决就是这样:+HEAD~100|85onf|$+git+log\ncommit+36f234a60d858871f040cb0d7ca3e78251df82f7+(HEAD+->+master)\nAuthor:+snowdreams1006+<snowdreams1006@163.com>\nDate:+++Thu+Mar+7+22:19:00+2019+%2B0800\n\n++++add+understand+how+git+control+version|1mpj2|**回到上一个版本+git+reset+--hard+HEAD%5E+**|u94v|在操作之前我们先看一下当前文件+test.txt+的内容:|do55l|$+cat+test.txt\ngit+test\ngit+init\ngit+diff\nunderstand+how+git+control+version|hjad|现在让我们开始回到过去,运行+git+reset+--hard+HEAD%5E+命令:|5bod5|$+git+reset+--hard+HEAD%5E\nHEAD+is+now+at+2006f72+add+3+files.\n$+|8kfu5|现在让我们再看一下,test.txt+的内容有没有被还原:|a1v2u|$+cat+test.txt\ngit+test\ngit+init|9gf1p|果然被还原了!这就是git的神奇之处,说明我们已经能够回到过去了!|iu4e|现在我们先用git+log+查看下提交历史:|2mna5|$+git+log\ncommit+2006f72ffe2ce2278b5974313b8598847cf445e4+(HEAD+->+master)\nAuthor:+snowdreams1006+<snowdreams1006@163.com>\nDate:+++Tue+Mar+5+13:27:46+2019+%2B0800\n\n++++add+3+files.\n\ncommit+eaa4850070354ae987dc5108a9fd57fda9d64730\nAuthor:+snowdreams1006+<snowdreams1006@163.com>\nDate:+++Tue+Mar+5+12:18:57+2019+%2B0800\n\n++++add+git+init\n\ncommit+6ad8956bc09a6a62c731711eabe796690aa6471c\nAuthor:+snowdreams1006+<snowdreams1006@163.com>\nDate:+++Tue+Mar+5+12:17:51+2019+%2B0800\n\n++++add+test.txt\n$+|4q11u|和上次相比,少了一条提交记录:|746pk|commit+36f234a60d858871f040cb0d7ca3e78251df82f7+(HEAD+->+master)\nAuthor:+snowdreams1006+<snowdreams1006@163.com>\nDate:+++Thu+Mar+7+22:19:00+2019+%2B0800\n\n++++add+understand+how+git+control+version|403hi|这样是正常的,毕竟你已经处于+过去+了,当然看不到+未来+的提交记录.|ITALIC|erhfh|正如影视穿越剧那样,主人公意外穿越过去,总是想要回到未来,怎么办,没有法器没有未来的确切目标怎么行?!|6l645|git+的穿越剧也需要这样一种法器,能准确告诉时光机把我们带到具体的那个时间点,当然这个时间点不一定是未来时刻,过去时刻也行,反正就是一个准确的坐标.|8mopo|聪明的你肯定已经猜测到这个任务是由commit+担任的,所有我们现在要找到未来的时间点,也就是commit+id,就是那一长串+hash+字符串.|3sq57|只要当前命令行窗口还没有关闭,慢慢往上翻,总是能找到当初我们的穿越点commit的,即36f234a60d858871f040cb0d7ca3e78251df82f7|4jp3v|**回到当初提交+git+reset+--hard+<commit>+**+万事俱备只欠东风,已经成功定位到未来坐标,等待穿越到未来!|sm4o|$+git+reset+--hard+36f234a60d858871f040cb0d7ca3e78251df82f7\nHEAD+is+now+at+36f234a+add+understand+how+git+control+version\n$+|8jr13|现在我们再次查看+test.txt+内容:|22q5|$+cat+test.txt\ngit+test\ngit+init\ngit+diff\nunderstand+how+git+control+versi|80fb8|果然成功穿越回到未来!|9iv4u|上述穿越回到未来的场景是我们知道目标+commit+,也就是在当前命令行窗口没有关闭的情况下,手动查找穿越点+commit.那如果命令行窗口已关闭或者没办法通过查阅历史命令来定位穿越点+commit+情况下怎么办呢?|en1np|这种情况下也是有补救措施的,git+提供了命令历史+git+reflog,记录了我们操作的命令历史.|34foi|**翻阅历史命令+git+reflog+**|76i86|$+git+reflog\n36f234a+(HEAD+->+master)+HEAD@{0}:+reset:+moving+to+36f234a60d858871f040cb0d7ca3e78251df82f7\n2006f72+HEAD@{1}:+reset:+moving+to+HEAD%5E\n36f234a+(HEAD+->+master)+HEAD@{2}:+commit:+add+understand+how+git+control+version\n2006f72+HEAD@{3}:+commit:+add+3+files.\neaa4850+HEAD@{4}:+commit:+add+git+init\n6ad8956+HEAD@{5}:+commit+(initial):+add+test.txt|dhkb1|确实记录了我们操作的关键命令,从上述输出结果可以看出,穿越点+commit+正是36f234a60d858871f040cb0d7ca3e78251df82f7,剩下的事情应该不必多说了吧!|83i80|小结|j35o|HEAD+是当前提交的指针,指向的提交就是当前提交,上一个提交是+HEAD%5E,上上个提交是+HEAD%5E%5E,前100个提交是HEAD~100.|unordered-list-item|3mpap|git+log+查看提交历史,git+log+--pretty=oneline+简短化输出提交历史.|3uv9c|git+reflog+查看命令历史,以便我们重拾关键步骤信息.|23tvs|git+reset+--hard+<commit>+穿越到指定提交,比如上一个提交就是+git+reset+--hard+HEAD%5E+.|fbsfl|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|0|7|3|S|7|18|A|27|7|2H|A|3F|A|3Y|8|0|1I|6|2O|6|3B|3|0|1S|M|0|0|G|9|7|0|0|0|7|1C|7|0|B|6|0|0|13|6|0|C|G|X|O|0|0|5|7|0|5|6|E|3|16|6|0|0|0|7|1Q|14|32|5|3F|6|0|0|E|H|1|11|1|2G|8|0|0|A|M|0|G|8|0|0|F|M|0|0|A|8|0|0|A|3|0|6|7|0|0|0|0|F|2|Q|2|0|0|0|3|0|H|6|1B|6|0|Y|6|17|14|0|9|P|0|0|9|8|0|0|0|J|6|1J|6|2L|6|0|E|3|Q|A|0|9|A|0|0|V|6|14|14|0|0|0|4|X|5|1A|6|1P|8|0|0|7|F|O|0|0|A|0|0|P|18|M|0^^$0|$]|1|@$2|3|4|-4|5|6|7|3J|8|@]|9|@]|A|$]]|$2|B|4|C|5|D|7|3K|8|@]|9|@]|A|$]]|$2|E|4|F|5|G|7|3L|8|@]|9|@]|A|$]]|$2|H|4|I|5|6|7|3M|8|@$J|3N|K|3O|L|M]|$J|3P|K|3Q|L|M]|$J|3R|K|3S|L|M]|$J|3T|K|3U|L|M]|$J|3V|K|3W|L|M]|$J|3X|K|3Y|L|M]|$J|3Z|K|40|L|M]]|9|@]|A|$]]|$2|N|4|O|5|6|7|41|8|@$J|42|K|43|L|M]|$J|44|K|45|L|M]|$J|46|K|47|L|M]]|9|@]|A|$]]|$2|P|4|Q|5|6|7|48|8|@$J|49|K|4A|L|M]]|9|@]|A|$]]|$2|R|4|S|5|6|7|4B|8|@$J|4C|K|4D|L|T]|$J|4E|K|4F|L|M]]|9|@]|A|$]]|$2|U|4|V|5|W|7|4G|8|@]|9|@]|A|$X|Y]]|$2|Z|4|10|5|6|7|4H|8|@$J|4I|K|4J|L|M]|$J|4K|K|4L|L|M]]|9|@]|A|$]]|$2|11|4|12|5|6|7|4M|8|@$J|4N|K|4O|L|M]]|9|@]|A|$]]|$2|13|4|14|5|W|7|4P|8|@]|9|@]|A|$X|Y]]|$2|15|4|16|5|6|7|4Q|8|@$J|4R|K|4S|L|M]]|9|@]|A|$]]|$2|17|4|18|5|6|7|4T|8|@$J|4U|K|4V|L|M]|$J|4W|K|4X|L|M]]|9|@]|A|$]]|$2|19|4|1A|5|W|7|4Y|8|@]|9|@]|A|$X|Y]]|$2|1B|4|1C|5|6|7|4Z|8|@$J|50|K|51|L|M]]|9|@]|A|$]]|$2|1D|4|1E|5|6|7|52|8|@$J|53|K|54|L|M]|$J|55|K|56|L|M]|$J|57|K|58|L|M]]|9|@]|A|$]]|$2|1F|4|1G|5|6|7|59|8|@]|9|@]|A|$]]|$2|1H|4|1I|5|6|7|5A|8|@$J|5B|K|5C|L|T]|$J|5D|K|5E|L|M]|$J|5F|K|5G|L|M]|$J|5H|K|5I|L|M]]|9|@]|A|$]]|$2|1J|4|1K|5|6|7|5J|8|@$J|5K|K|5L|L|M]|$J|5M|K|5N|L|M]|$J|5O|K|5P|L|M]|$J|5Q|K|5R|L|M]]|9|@]|A|$]]|$2|1L|4|1M|5|W|7|5S|8|@]|9|@]|A|$X|Y]]|$2|1N|4|1O|5|6|7|5T|8|@$J|5U|K|5V|L|M]]|9|@]|A|$]]|$2|1P|4|1Q|5|6|7|5W|8|@$J|5X|K|5Y|L|M]]|9|@]|A|$]]|$2|1R|4|1S|5|W|7|5Z|8|@]|9|@]|A|$X|Y]]|$2|1T|4|1U|5|6|7|60|8|@$J|61|K|62|L|M]]|9|@]|A|$]]|$2|1V|4|1W|5|W|7|63|8|@]|9|@]|A|$X|Y]]|$2|1X|4|1Y|5|6|7|64|8|@$J|65|K|66|L|M]]|9|@]|A|$]]|$2|1Z|4|20|5|W|7|67|8|@]|9|@]|A|$X|Y]]|$2|21|4|22|5|6|7|68|8|@$J|69|K|6A|L|M]]|9|@]|A|$]]|$2|23|4|24|5|6|7|6B|8|@$J|6C|K|6D|L|M]]|9|@]|A|$]]|$2|25|4|26|5|W|7|6E|8|@]|9|@]|A|$X|Y]]|$2|27|4|28|5|6|7|6F|8|@]|9|@]|A|$]]|$2|29|4|2A|5|W|7|6G|8|@]|9|@]|A|$X|Y]]|$2|2B|4|2C|5|6|7|6H|8|@$J|6I|K|6J|L|2D]|$J|6K|K|6L|L|2D]]|9|@]|A|$]]|$2|2E|4|2F|5|6|7|6M|8|@]|9|@]|A|$]]|$2|2G|4|2H|5|6|7|6N|8|@$J|6O|K|6P|L|M]]|9|@]|A|$]]|$2|2I|4|2J|5|6|7|6Q|8|@$J|6R|K|6S|L|M]|$J|6T|K|6U|L|M]]|9|@]|A|$]]|$2|2K|4|2L|5|6|7|6V|8|@$J|6W|K|6X|L|M]|$J|6Y|K|6Z|L|M]]|9|@]|A|$]]|$2|2M|4|2N|5|6|7|70|8|@$J|71|K|72|L|M]]|9|@]|A|$]]|$2|2O|4|2P|5|W|7|73|8|@]|9|@]|A|$X|Y]]|$2|2Q|4|2R|5|6|7|74|8|@$J|75|K|76|L|M]]|9|@]|A|$]]|$2|2S|4|2T|5|W|7|77|8|@]|9|@]|A|$X|Y]]|$2|2U|4|2V|5|6|7|78|8|@]|9|@]|A|$]]|$2|2W|4|2X|5|6|7|79|8|@$J|7A|K|7B|L|M]|$J|7C|K|7D|L|M]|$J|7E|K|7F|L|M]]|9|@]|A|$]]|$2|2Y|4|2Z|5|6|7|7G|8|@$J|7H|K|7I|L|M]|$J|7J|K|7K|L|M]]|9|@]|A|$]]|$2|30|4|31|5|6|7|7L|8|@$J|7M|K|7N|L|M]]|9|@]|A|$]]|$2|32|4|33|5|W|7|7O|8|@]|9|@]|A|$X|Y]]|$2|34|4|35|5|6|7|7P|8|@$J|7Q|K|7R|L|M]|$J|7S|K|7T|L|M]]|9|@]|A|$]]|$2|36|4|37|5|G|7|7U|8|@]|9|@]|A|$]]|$2|38|4|39|5|3A|7|7V|8|@$J|7W|K|7X|L|M]|$J|7Y|K|7Z|L|M]|$J|80|K|81|L|M]|$J|82|K|83|L|M]]|9|@]|A|$]]|$2|3B|4|3C|5|3A|7|84|8|@$J|85|K|86|L|M]|$J|87|K|88|L|M]]|9|@]|A|$]]|$2|3D|4|3E|5|3A|7|89|8|@$J|8A|K|8B|L|M]]|9|@]|A|$]]|$2|3F|4|3G|5|3A|7|8C|8|@$J|8D|K|8E|L|M]|$J|8F|K|8G|L|M]]|9|@]|A|$]]|$2|3H|4|3I|5|6|7|8H|8|@]|9|@]|A|$]]]]","plain":"\n回到过去\n背景\n现在你已经掌握git的基本操作了,文件发生更改首先使用 git add 添加更改,然后 git commit 提交全部更改,当本地文件再次发生更改时,仍然需要git add 和 git commit 两步操作,中途如何想查看文件是否发生更改,使用git status 查看版本库状态,git diff 命令帮助我们查看更改详情.\n像这样重复的操作其实每次都会产生一个快照,用于保存文件状态,只不过这个快照不是完整的文件,被称为提交或者版本commit .一旦发生意外,假如文件修改乱了或者误删了文件,我们可以从最近的一个 commit 中进行恢复,然后继续工作,这就是git 管理的好处之一.\n每一次重大更新或者你认为比较重要的时刻,我们总会留作纪念,添加些什么特殊标记来区分平时的提交,还记得我们每次提交都会添加备注吗?git commit -m <remark> 这条命令现在就可以大显身手了,我们现在要做的就是找到我们提交的历史记录,而历史记录中有我们提交的详情,这样即使过了一个月或者更长时间,我们也能清楚知道当时的情景!\n查看提交历史记录 git log,接下来我们赶紧试一下吧\n$ git log\ncommit 36f234a60d858871f040cb0d7ca3e78251df82f7 (HEAD -> master)\nAuthor: snowdreams1006 <snowdreams1006@163.com>\nDate:   Thu Mar 7 22:19:00 2019 +0800\n\n    add understand how git control version\n\ncommit 2006f72ffe2ce2278b5974313b8598847cf445e4\nAuthor: snowdreams1006 <snowdreams1006@163.com>\nDate:   Tue Mar 5 13:27:46 2019 +0800\n\n    add 3 files.\n\ncommit eaa4850070354ae987dc5108a9fd57fda9d64730\nAuthor: snowdreams1006 <snowdreams1006@163.com>\nDate:   Tue Mar 5 12:18:57 2019 +0800\n\n    add git init\n\ncommit 6ad8956bc09a6a62c731711eabe796690aa6471c\nAuthor: snowdreams1006 <snowdreams1006@163.com>\nDate:   Tue Mar 5 12:17:51 2019 +0800\n\n    add test.txt\ngit log 命令默认显示最近到最远的提交历史,这一点也很好理解,毕竟我们是在命令行操作,输入git log 完毕后自然先要定位到命令处,看到最新提交记录方便我们确认是否符合我们预期,还有一点就是如果提交历史过多,从头开始到最新提交记录岂不是眼花缭乱,简直不敢想象啊!\n下面以最新的一次提交 commit 为例,简单解释一下输出内容:\n# 提交唯一标示id: 36f234a60d858871f040cb0d7ca3e78251df82f7\ncommit 36f234a60d858871f040cb0d7ca3e78251df82f7 (HEAD -> master)\n\n# 作者: snowdreams1006 邮箱: <snowdreams1006@163.com>\nAuthor: snowdreams1006 <snowdreams1006@163.com>\n\n# 日期: Thu Mar 7 22:19:00 2019 +0800\nDate:   Thu Mar 7 22:19:00 2019 +0800\n\n# 提交备注: add understand how git control version\n\n    add understand how git control version\n默认输出内容有点多,不仅有提交 id ,提交备注还有作者时间之类的,由于每个 commit 都如此,这样一来,满屏都展示不下,那能不能简化些呢?\n一行显示提交日志 ** --pretty=oneline **,即git log --pretty=oneline\n$ git log --pretty=oneline\n36f234a60d858871f040cb0d7ca3e78251df82f7 (HEAD -> master) add understand how git control version\n2006f72ffe2ce2278b5974313b8598847cf445e4 add 3 files.\neaa4850070354ae987dc5108a9fd57fda9d64730 add git init\n6ad8956bc09a6a62c731711eabe796690aa6471c add test.txt\n$ \n相比无参数git log,是不是简短了一些呢? 和之前日志相比少了作者和时间等信息,仍然保留提交 id 和提交备注.\n因为提交 commit 是 git 的基础,当然不能省略,而提交备注能够帮助我们理解commit 的含义,毕竟提交备注使我们自定义的内容,这也是我们为什么提交时要写提交备注的原因!\n现在我们已经了解到版本库存放了我们的提交,接下来让我们验证一下是否能够回到过去吧!\n回到上一个提交,上一个提交自然是相对当前提交而言,只有知道当前提交才能知道上一个提交以及上一个提交的上一个提交. 提交id 36f234a60d858871f040cb0d7ca3e78251df82f7,那么上一个提交HEAD^,上上一个提交是HEAD^^.如果此时我想回到往上数100个版本,那么是不是可以这么写?\nHEAD^^^^...^^^ 其中^ 有100个,如果需要手动打出100个^的话,那么绝对是疯了! 既然有这种相对定位方式,自然也有绝对定位方式,用绝对定位方式解决就是这样: HEAD~100\n$ git log\ncommit 36f234a60d858871f040cb0d7ca3e78251df82f7 (HEAD -> master)\nAuthor: snowdreams1006 <snowdreams1006@163.com>\nDate:   Thu Mar 7 22:19:00 2019 +0800\n\n    add understand how git control version\n**回到上一个版本 git reset --hard HEAD^ **\n在操作之前我们先看一下当前文件 test.txt 的内容:\n$ cat test.txt\ngit test\ngit init\ngit diff\nunderstand how git control version\n现在让我们开始回到过去,运行 git reset --hard HEAD^ 命令:\n$ git reset --hard HEAD^\nHEAD is now at 2006f72 add 3 files.\n$ \n现在让我们再看一下,test.txt 的内容有没有被还原:\n$ cat test.txt\ngit test\ngit init\n果然被还原了!这就是git的神奇之处,说明我们已经能够回到过去了!\n现在我们先用git log 查看下提交历史:\n$ git log\ncommit 2006f72ffe2ce2278b5974313b8598847cf445e4 (HEAD -> master)\nAuthor: snowdreams1006 <snowdreams1006@163.com>\nDate:   Tue Mar 5 13:27:46 2019 +0800\n\n    add 3 files.\n\ncommit eaa4850070354ae987dc5108a9fd57fda9d64730\nAuthor: snowdreams1006 <snowdreams1006@163.com>\nDate:   Tue Mar 5 12:18:57 2019 +0800\n\n    add git init\n\ncommit 6ad8956bc09a6a62c731711eabe796690aa6471c\nAuthor: snowdreams1006 <snowdreams1006@163.com>\nDate:   Tue Mar 5 12:17:51 2019 +0800\n\n    add test.txt\n$ \n和上次相比,少了一条提交记录:\ncommit 36f234a60d858871f040cb0d7ca3e78251df82f7 (HEAD -> master)\nAuthor: snowdreams1006 <snowdreams1006@163.com>\nDate:   Thu Mar 7 22:19:00 2019 +0800\n\n    add understand how git control version\n这样是正常的,毕竟你已经处于 过去 了,当然看不到 未来 的提交记录.\n正如影视穿越剧那样,主人公意外穿越过去,总是想要回到未来,怎么办,没有法器没有未来的确切目标怎么行?!\ngit 的穿越剧也需要这样一种法器,能准确告诉时光机把我们带到具体的那个时间点,当然这个时间点不一定是未来时刻,过去时刻也行,反正就是一个准确的坐标.\n聪明的你肯定已经猜测到这个任务是由commit 担任的,所有我们现在要找到未来的时间点,也就是commit id,就是那一长串 hash 字符串.\n只要当前命令行窗口还没有关闭,慢慢往上翻,总是能找到当初我们的穿越点commit的,即36f234a60d858871f040cb0d7ca3e78251df82f7\n**回到当初提交 git reset --hard <commit> ** 万事俱备只欠东风,已经成功定位到未来坐标,等待穿越到未来!\n$ git reset --hard 36f234a60d858871f040cb0d7ca3e78251df82f7\nHEAD is now at 36f234a add understand how git control version\n$ \n现在我们再次查看 test.txt 内容:\n$ cat test.txt\ngit test\ngit init\ngit diff\nunderstand how git control versi\n果然成功穿越回到未来!\n上述穿越回到未来的场景是我们知道目标 commit ,也就是在当前命令行窗口没有关闭的情况下,手动查找穿越点 commit.那如果命令行窗口已关闭或者没办法通过查阅历史命令来定位穿越点 commit 情况下怎么办呢?\n这种情况下也是有补救措施的,git 提供了命令历史 git reflog,记录了我们操作的命令历史.\n**翻阅历史命令 git reflog **\n$ git reflog\n36f234a (HEAD -> master) HEAD@{0}: reset: moving to 36f234a60d858871f040cb0d7ca3e78251df82f7\n2006f72 HEAD@{1}: reset: moving to HEAD^\n36f234a (HEAD -> master) HEAD@{2}: commit: add understand how git control version\n2006f72 HEAD@{3}: commit: add 3 files.\neaa4850 HEAD@{4}: commit: add git init\n6ad8956 HEAD@{5}: commit (initial): add test.txt\n确实记录了我们操作的关键命令,从上述输出结果可以看出,穿越点 commit 正是36f234a60d858871f040cb0d7ca3e78251df82f7,剩下的事情应该不必多说了吧!\n小结\nHEAD 是当前提交的指针,指向的提交就是当前提交,上一个提交是 HEAD^,上上个提交是 HEAD^^,前100个提交是HEAD~100.\ngit log 查看提交历史,git log --pretty=oneline 简短化输出提交历史.\ngit reflog 查看命令历史,以便我们重拾关键步骤信息.\ngit reset --hard <commit> 穿越到指定提交,比如上一个提交就是 git reset --hard HEAD^ .\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n回到过去\n背景\n现在你已经掌握git的基本操作了,文件发生更改首先使用 git add 添加更改,然后 git commit 提交全部更改,当本地文件再次发生...","summary":"现在你已经掌握git的基本操作了,文件发生更改首先使用 git add 添加更改,然后 git commit 提交全部更改,当本地文件再次发生更改时,仍然需要g...","abstract":"现在你已经掌握git的基本操作了,文件发生更改首先使用 git add 添加更改,然后 git commit 提交全部更改,当本地文件再次发生更改时,仍然需要g...","description":"","picture":"","coverImageUrl":"","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/18 10:54"},"authorId":2952369,"columnId":75668,"writeTime":1554276306,"updateTime":1554276306,"viewCount":73,"likeCount":3,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2707,"type":40,"actionInfo":{"articleId":1409914,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554276292,"detail":{"id":1409914,"articleId":1409914,"title":"git 入门教程之版本管理\n                                                                            原","content":"entityMap|blocks|key|5oalc|text|type|unstyled|depth|inlineStyleRanges|entityRanges|data|f1b5p|版本管理|header-one|etnf4|背景|header-two|6kh84|在上一节中我们已经成功创建版本库并且已经添加test.txt等文件,这一节我们继续讲解如何进行版本控制.|offset|length|style|CODE|5ilpl|首先我们先查看test.txt+文件有什么内容吧!|2mdhs|#+查看文件内容\n$+cat+test.txt\ngit+test\ngit+init\ngit+diff+\n$|code-block|syntax|javascript|mrqo|接下来模拟正常工作,接着输入一下内容:|u8o|#+追加新内容到+test.txt+文件\necho+\"understand+how+git+control+version\"+>>+test.txt\n\n#+查看当前文件内容\n$+cat+test.txt\ngit+test\ngit+init\ngit+diff\nunderstand+how+git+control+version\n$+|4gjdc|紧接着运行+git+status+看一下输出结果:|BOLD|bmm2j|#+查看文件状态\n$+git+status\nOn+branch+master\nChanges+to+be+committed:\n++(use+\"git+reset+HEAD+<file>...\"+to+unstage)\n\n++++modified:+++test.txt\n\nChanges+not+staged+for+commit:\n++(use+\"git+add+<file>...\"+to+update+what+will+be+committed)\n++(use+\"git+checkout+--+<file>...\"+to+discard+changes+in+working+directory)\n\n++++modified:+++test.txt\n\n$+|6ns4n|从上述+git+status+命令输出的结果可以看出,test.txt+已经被修改但还没提交,但是具体发生了什么变化却没能告诉我们,如果能够告诉我们具体修改细节那就好了!|bdcoa|运行**git+diff**命令可以实现上述需求|2oifp|$+git+diff\ndiff+--git+a/test.txt+b/test.txt\nindex+729112f..989ce33+100644\n---+a/test.txt\n%2B%2B%2B+b/test.txt\n@@+-1,3+%2B1,4+@@\n+git+test\n+git+init\n+git+diff\n%2Bunderstand+how+git+control+version\n$+|4cd7r|git+diff+命令即查看差异(difference),从输出结果可以看出我们在最后一行新增了understand+how+git+control+version+文字.|42jvq|通过git+status+知道文件发生了改动,git+diff+让我们看到了改动的细节,现在我们提交到版本库就放心多了,还记得上节课如何添加版本库的命令吗?|aftf5|分两步操作:+git+add+<file>+和+git+commit+-m+<remark>|ebtr2|第一步:+git+add+<file>|1n5ls|$+git+add+test.txt\n$+|d1b22|等一下,在执行+git+commit+命令之前,我们再运行+git+status+命令查看一下当前仓库状态:|3trrr|$+git+status\nOn+branch+master\nChanges+to+be+committed:\n++(use+\"git+reset+HEAD+<file>...\"+to+unstage)\n\n++++modified:+++test.txt\n\n$+|a0j04|此时+git+status+命令告诉我们+test.txt+文件已被修改等待提交,好了,那么接着第二步的commit吧!|474ep|第二步:+git+commit+-m+<remark>|4m3b5|#+提交到版本库并添加备注\n$+git+commit+-m+\"add+understand+how+git+control+version\"\n[master+36f234a]+add+understand+how+git+control+version\n+1+file+changed,+2+insertions(%2B)\n$+|2i37d|提交后,我们此时再次运行git+status+命令查看当前仓库状态:|d1s57|$+git+status\nOn+branch+master\nnothing+to+commit,+working+tree+clean\n$+|6teaj|输出结果显示没有需要提价的改动,工作目录是干净的.|2vt37|小结|d2h6p|查看工作区状态+git+status|unordered-list-item|dnku0|比较修改差异+git+diff|7pcri|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|0|M|8|0|7|8|0|0|0|0|6|A|6|A|0|0|4|A|R|8|0|4|8|0|0|0|8|1C|Y|0|2|A|N|8|0|7|E|O|M|0|5|E|0|0|8|A|U|A|0|0|3|A|L|8|0|5|M|0|0|C|A|0|0|0|0|8|A|0|7|8|0^^$0|$]|1|@$2|3|4|-4|5|6|7|28|8|@]|9|@]|A|$]]|$2|B|4|C|5|D|7|29|8|@]|9|@]|A|$]]|$2|E|4|F|5|G|7|2A|8|@]|9|@]|A|$]]|$2|H|4|I|5|6|7|2B|8|@$J|2C|K|2D|L|M]]|9|@]|A|$]]|$2|N|4|O|5|6|7|2E|8|@$J|2F|K|2G|L|M]]|9|@]|A|$]]|$2|P|4|Q|5|R|7|2H|8|@]|9|@]|A|$S|T]]|$2|U|4|V|5|6|7|2I|8|@]|9|@]|A|$]]|$2|W|4|X|5|R|7|2J|8|@]|9|@]|A|$S|T]]|$2|Y|4|Z|5|6|7|2K|8|@$J|2L|K|2M|L|10]|$J|2N|K|2O|L|M]]|9|@]|A|$]]|$2|11|4|12|5|R|7|2P|8|@]|9|@]|A|$S|T]]|$2|13|4|14|5|6|7|2Q|8|@$J|2R|K|2S|L|M]|$J|2T|K|2U|L|M]]|9|@]|A|$]]|$2|15|4|16|5|6|7|2V|8|@$J|2W|K|2X|L|M]]|9|@]|A|$]]|$2|17|4|18|5|R|7|2Y|8|@]|9|@]|A|$S|T]]|$2|19|4|1A|5|6|7|2Z|8|@$J|30|K|31|L|M]|$J|32|K|33|L|M]]|9|@]|A|$]]|$2|1B|4|1C|5|6|7|34|8|@$J|35|K|36|L|M]|$J|37|K|38|L|M]]|9|@]|A|$]]|$2|1D|4|1E|5|6|7|39|8|@$J|3A|K|3B|L|M]|$J|3C|K|3D|L|M]]|9|@]|A|$]]|$2|1F|4|1G|5|6|7|3E|8|@$J|3F|K|3G|L|M]]|9|@]|A|$]]|$2|1H|4|1I|5|R|7|3H|8|@]|9|@]|A|$S|T]]|$2|1J|4|1K|5|6|7|3I|8|@$J|3J|K|3K|L|M]|$J|3L|K|3M|L|M]]|9|@]|A|$]]|$2|1L|4|1M|5|R|7|3N|8|@]|9|@]|A|$S|T]]|$2|1N|4|1O|5|6|7|3O|8|@$J|3P|K|3Q|L|M]|$J|3R|K|3S|L|M]]|9|@]|A|$]]|$2|1P|4|1Q|5|6|7|3T|8|@$J|3U|K|3V|L|M]]|9|@]|A|$]]|$2|1R|4|1S|5|R|7|3W|8|@]|9|@]|A|$S|T]]|$2|1T|4|1U|5|6|7|3X|8|@$J|3Y|K|3Z|L|M]]|9|@]|A|$]]|$2|1V|4|1W|5|R|7|40|8|@]|9|@]|A|$S|T]]|$2|1X|4|1Y|5|6|7|41|8|@]|9|@]|A|$]]|$2|1Z|4|20|5|G|7|42|8|@]|9|@]|A|$]]|$2|21|4|22|5|23|7|43|8|@$J|44|K|45|L|M]]|9|@]|A|$]]|$2|24|4|25|5|23|7|46|8|@$J|47|K|48|L|M]]|9|@]|A|$]]|$2|26|4|27|5|6|7|49|8|@]|9|@]|A|$]]]]","plain":"\n版本管理\n背景\n在上一节中我们已经成功创建版本库并且已经添加test.txt等文件,这一节我们继续讲解如何进行版本控制.\n首先我们先查看test.txt 文件有什么内容吧!\n# 查看文件内容\n$ cat test.txt\ngit test\ngit init\ngit diff \n$\n接下来模拟正常工作,接着输入一下内容:\n# 追加新内容到 test.txt 文件\necho \"understand how git control version\" >> test.txt\n\n# 查看当前文件内容\n$ cat test.txt\ngit test\ngit init\ngit diff\nunderstand how git control version\n$ \n紧接着运行 git status 看一下输出结果:\n# 查看文件状态\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n    modified:   test.txt\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    modified:   test.txt\n\n$ \n从上述 git status 命令输出的结果可以看出,test.txt 已经被修改但还没提交,但是具体发生了什么变化却没能告诉我们,如果能够告诉我们具体修改细节那就好了!\n运行**git diff**命令可以实现上述需求\n$ git diff\ndiff --git a/test.txt b/test.txt\nindex 729112f..989ce33 100644\n--- a/test.txt\n+++ b/test.txt\n@@ -1,3 +1,4 @@\n git test\n git init\n git diff\n+understand how git control version\n$ \ngit diff 命令即查看差异(difference),从输出结果可以看出我们在最后一行新增了understand how git control version 文字.\n通过git status 知道文件发生了改动,git diff 让我们看到了改动的细节,现在我们提交到版本库就放心多了,还记得上节课如何添加版本库的命令吗?\n分两步操作: git add <file> 和 git commit -m <remark>\n第一步: git add <file>\n$ git add test.txt\n$ \n等一下,在执行 git commit 命令之前,我们再运行 git status 命令查看一下当前仓库状态:\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n    modified:   test.txt\n\n$ \n此时 git status 命令告诉我们 test.txt 文件已被修改等待提交,好了,那么接着第二步的commit吧!\n第二步: git commit -m <remark>\n# 提交到版本库并添加备注\n$ git commit -m \"add understand how git control version\"\n[master 36f234a] add understand how git control version\n 1 file changed, 2 insertions(+)\n$ \n提交后,我们此时再次运行git status 命令查看当前仓库状态:\n$ git status\nOn branch master\nnothing to commit, working tree clean\n$ \n输出结果显示没有需要提价的改动,工作目录是干净的.\n小结\n查看工作区状态 git status\n比较修改差异 git diff\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n版本管理\n背景\n在上一节中我们已经成功创建版本库并且已经添加test.txt等文件,这一节我们继续讲解如何进行版本控制.\n首先我们先查看test.txt 文件...","summary":"在上一节中我们已经成功创建版本库并且已经添加test.txt等文件,这一节我们继续讲解如何进行版本控制.","abstract":"在上一节中我们已经成功创建版本库并且已经添加test.txt等文件,这一节我们继续讲解如何进行版本控制.","description":"","picture":"","coverImageUrl":"","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/18 10:46"},"authorId":2952369,"columnId":75668,"writeTime":1554276292,"updateTime":1554276292,"viewCount":60,"likeCount":4,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2706,"type":40,"actionInfo":{"articleId":1409913,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554276278,"detail":{"id":1409913,"articleId":1409913,"title":"git 入门教程之本地仓库\n                                                                            原","content":"entityMap|blocks|key|es24n|text|type|unstyled|depth|inlineStyleRanges|entityRanges|data|bl7j2|本地仓库|header-one|9c6dq|背景|header-two|8p48n|创建工作目录|header-three|9bnsl|平时工作时我们习惯对文档分门别类进行管理,.doc+.txt+等文本类型的文件习惯存在+doc文件下,开发java+js+等源代码文件存在在+src+目录下,这一点很好理解,那么讲解+git的项目我们也要创建一个文件夹,姑且新建一个demo的文件夹吧!|offset|length|style|CODE|fv1b1|#+在工作空间创建指定目录\nmkdir+demo\n\n#+切换至工作目录\ncd+demo|code-block|syntax|javascript|ca3j3|创建本地仓库|f05m9|既然已经创建了工作文件夹,那么我们自然是希望该文件下的所有文件都能被+git+管理,也就是说在当前文件下的创建新文件,修改原文件内容或者删除文件等操作都能纳入版本控制中,不然为什么要用git+呢?|fdnk3|下面这个命令就是告诉git+这个+demo+目录要纳入版本控制了.|5vqfe|#+初始化本地仓库\ngit+init+|aip3u|一旦运行git+init+命令,细心的读者可能会发现在原来的+demo+目录下多了.git隐藏文件,正因如此,原来被我们称为工作目录的+demo+才能纳入版本控制,我们将.git目录称之为版本库.|BOLD|11cbj|由于当前项目+demo+只在我们自己电脑上,其他人无法访问,所以我们称这种形式的版本库为本地仓库.|8ljl8|添加文件到版本库|kruf|首先明确的是,所有的版本控制系统只能追踪文本文件的改动,文本文件就是平常熟悉的.txt+.html+.js+.css+.java+.xml等等文件,非文本文件的其他格式有哪些?+例如二进制文件,像我们平时听音乐的.mp3,看视频的.mp4,浏览图片的.png等这些都是二进制文件,需要专门的软件才能正常打开,不信的话,你用记事本看看能不能打开视频?|15tlr|了解文本文件和二进制文件的区别,那是不是说二进制文件没法进行版本控制了,刚才你不是还说demo+目录下的所有文件吗?这不是自相矛盾吗!|ct1tp|非也非也,git+当然也能够管理二进制文件,对于文本文件的追踪,可以细粒度到哪个文件在哪一行发生了哪些变化,而二进制文件只能粗粒度知道哪个文件变化了,并不知道具体变化.|9vkr6|不幸的是,Microsoft+的Word格式是二进制格式,因此,版本控制系统是没法跟踪Word文件的改动的,前面我们举的例子只是为了演示,如果要真正使用版本控制系统,就要以纯文本方式编写文件.|cdc9p|因为文本是有编码的,比如中文有常用的GBK编码,日文有Shift_JIS编码,如果没有历史遗留问题,强烈建议使用标准的UTF-8编码,所有语言使用同一种编码,既没有冲突,又被所有平台所支持.|1k9sq|言归正传,现在我们在demo+目录下创建一个test.txt+演示文件,内容如下git+test|ar57u|#+创建新文件\ntouch+test.txt\n\n#+编辑新文件,输入+git+test\necho+\"git+test\"+>+test.txt|6lgjc|接下来我们还需要两步操作才能将test.txt纳入git管理:|4kai5|第一步,使用git+add+<file>+命令将文件添加到本地仓库:|ajoat|#+添加到本地仓库:+第一步指定要添加的文件\ngit+add+test.txt|606n3|第二步,使用git+commit+-m+<message>+命令将文件提交到本地仓库:|9kkek|#+添加到本地仓库:+第二步指定添加文件备注\ngit+commit+-m+\"add+test.txt\"|d5ncs|经过上述两步操作,test.txt+文件已经纳入到版本控制中了,这里你可能会有疑问了为什么需要add+commit两步呢?+因为commit+可以一次性提交很多文件,所以你可以多次add不同的文件,比如:|40l6|#+创建三个文件file1.txt+file2.txt+file3.txt\ntouch+file1.txt+file2.txt+file3.txt\n\n#+添加一个文件file1.txt\ngit+add+file1.txt\n\n#+添加两个文件file2.txt+file3.txt\ngit+add+file2.txt+file3.txt\n\n#+一次性提交全部文件\ngit+commit+-m+\"add+3+files.\"|ftfdg|小结|edoos|初始化本地仓库+git+init|unordered-list-item|7dka|添加文件到本地仓库分两步+git+add+<file>+和+git+commit+-m+<message>|5cp81|实际工作中,大致以下流程|eio95|#+在工作空间创建指定目录\nmkdir+demo\n\n#+切换至工作目录\ncd+demo\n\n#+初始化本地仓库\ngit+init+\n\n#+创建新文件\ntouch+test.txt\n\n#+编辑新文件,输入+git+test\necho+\"git+test\"+>+test.txt\n\n#+添加到本地仓库:+第一步指定要添加的文件\ngit+add+test.txt\n\n#+添加到本地仓库:+第二步指定添加文件备注\ngit+commit+-m+\"add+test.txt\"\n\n...\n\n#+继续编辑目标文件,追加+git+init\necho+\"git+init\"+>>+test.txt\n\n#+将目标文件添加到本地仓库\ngit+add+test.txt\n\n#+添加本次新增文件的备注\ngit+commit+-m+\"add+git+init\"|70d2l|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|0|0|L|4|Q|4|18|3|1H|4|1M|2|1Z|3|38|4|0|0|0|Z|3|2K|3|0|A|3|H|4|0|0|4|8|V|4|15|4|1W|4|2D|4|2M|3|0|7|4|18|4|0|0|K|4|S|4|23|4|2J|5|13|4|18|5|1E|3|1I|4|1N|5|1T|4|2Y|4|37|4|3H|4|0|2|4|7|5|L|5|17|4|0|5|3|G|5|O|4|1J|5|0|5|9|G|4|17|4|0|I|3|R|9|1N|5|0|A|4|M|8|14|8|0|0|F|8|P|3|0|6|E|0|0|6|N|0|0|9|8|1B|3|1F|6|1S|6|2I|3|0|0|0|8|8|0|D|E|U|N|0|0|0^^$0|$]|1|@$2|3|4|-4|5|6|7|2F|8|@]|9|@]|A|$]]|$2|B|4|C|5|D|7|2G|8|@]|9|@]|A|$]]|$2|E|4|F|5|G|7|2H|8|@]|9|@]|A|$]]|$2|H|4|I|5|J|7|2I|8|@]|9|@]|A|$]]|$2|K|4|L|5|6|7|2J|8|@$M|2K|N|2L|O|P]|$M|2M|N|2N|O|P]|$M|2O|N|2P|O|P]|$M|2Q|N|2R|O|P]|$M|2S|N|2T|O|P]|$M|2U|N|2V|O|P]|$M|2W|N|2X|O|P]]|9|@]|A|$]]|$2|Q|4|R|5|S|7|2Y|8|@]|9|@]|A|$T|U]]|$2|V|4|W|5|J|7|2Z|8|@]|9|@]|A|$]]|$2|X|4|Y|5|6|7|30|8|@$M|31|N|32|O|P]|$M|33|N|34|O|P]]|9|@]|A|$]]|$2|Z|4|10|5|6|7|35|8|@$M|36|N|37|O|P]|$M|38|N|39|O|P]]|9|@]|A|$]]|$2|11|4|12|5|S|7|3A|8|@]|9|@]|A|$T|U]]|$2|13|4|14|5|6|7|3B|8|@$M|3C|N|3D|O|P]|$M|3E|N|3F|O|P]|$M|3G|N|3H|O|P]|$M|3I|N|3J|O|P]|$M|3K|N|3L|O|P]|$M|3M|N|3N|O|15]]|9|@]|A|$]]|$2|16|4|17|5|6|7|3O|8|@$M|3P|N|3Q|O|P]|$M|3R|N|3S|O|15]]|9|@]|A|$]]|$2|18|4|19|5|J|7|3T|8|@]|9|@]|A|$]]|$2|1A|4|1B|5|6|7|3U|8|@$M|3V|N|3W|O|15]|$M|3X|N|3Y|O|15]|$M|3Z|N|40|O|15]|$M|41|N|42|O|15]|$M|43|N|44|O|P]|$M|45|N|46|O|P]|$M|47|N|48|O|P]|$M|49|N|4A|O|P]|$M|4B|N|4C|O|P]|$M|4D|N|4E|O|P]|$M|4F|N|4G|O|P]|$M|4H|N|4I|O|P]|$M|4J|N|4K|O|P]]|9|@]|A|$]]|$2|1C|4|1D|5|6|7|4L|8|@$M|4M|N|4N|O|15]|$M|4O|N|4P|O|15]|$M|4Q|N|4R|O|15]|$M|4S|N|4T|O|P]]|9|@]|A|$]]|$2|1E|4|1F|5|6|7|4U|8|@$M|4V|N|4W|O|P]|$M|4X|N|4Y|O|15]|$M|4Z|N|50|O|15]|$M|51|N|52|O|15]]|9|@]|A|$]]|$2|1G|4|1H|5|6|7|53|8|@$M|54|N|55|O|P]|$M|56|N|57|O|P]|$M|58|N|59|O|P]]|9|@]|A|$]]|$2|1I|4|1J|5|6|7|5A|8|@$M|5B|N|5C|O|P]|$M|5D|N|5E|O|P]|$M|5F|N|5G|O|P]]|9|@]|A|$]]|$2|1K|4|1L|5|6|7|5H|8|@$M|5I|N|5J|O|P]|$M|5K|N|5L|O|P]|$M|5M|N|5N|O|P]]|9|@]|A|$]]|$2|1M|4|1N|5|S|7|5O|8|@]|9|@]|A|$T|U]]|$2|1O|4|1P|5|6|7|5P|8|@$M|5Q|N|5R|O|P]|$M|5S|N|5T|O|P]]|9|@]|A|$]]|$2|1Q|4|1R|5|6|7|5U|8|@$M|5V|N|5W|O|P]]|9|@]|A|$]]|$2|1S|4|1T|5|S|7|5X|8|@]|9|@]|A|$T|U]]|$2|1U|4|1V|5|6|7|5Y|8|@$M|5Z|N|60|O|P]]|9|@]|A|$]]|$2|1W|4|1X|5|S|7|61|8|@]|9|@]|A|$T|U]]|$2|1Y|4|1Z|5|6|7|62|8|@$M|63|N|64|O|P]|$M|65|N|66|O|P]|$M|67|N|68|O|P]|$M|69|N|6A|O|P]|$M|6B|N|6C|O|P]]|9|@]|A|$]]|$2|20|4|21|5|S|7|6D|8|@]|9|@]|A|$T|U]]|$2|22|4|23|5|G|7|6E|8|@]|9|@]|A|$]]|$2|24|4|25|5|26|7|6F|8|@$M|6G|N|6H|O|P]]|9|@]|A|$]]|$2|27|4|28|5|26|7|6I|8|@$M|6J|N|6K|O|P]|$M|6L|N|6M|O|P]]|9|@]|A|$]]|$2|29|4|2A|5|26|7|6N|8|@]|9|@]|A|$]]|$2|2B|4|2C|5|S|7|6O|8|@]|9|@]|A|$T|U]]|$2|2D|4|2E|5|6|7|6P|8|@]|9|@]|A|$]]]]","plain":"\n本地仓库\n背景\n创建工作目录\n平时工作时我们习惯对文档分门别类进行管理,.doc .txt 等文本类型的文件习惯存在 doc文件下,开发java js 等源代码文件存在在 src 目录下,这一点很好理解,那么讲解 git的项目我们也要创建一个文件夹,姑且新建一个demo的文件夹吧!\n# 在工作空间创建指定目录\nmkdir demo\n\n# 切换至工作目录\ncd demo\n创建本地仓库\n既然已经创建了工作文件夹,那么我们自然是希望该文件下的所有文件都能被 git 管理,也就是说在当前文件下的创建新文件,修改原文件内容或者删除文件等操作都能纳入版本控制中,不然为什么要用git 呢?\n下面这个命令就是告诉git 这个 demo 目录要纳入版本控制了.\n# 初始化本地仓库\ngit init \n一旦运行git init 命令,细心的读者可能会发现在原来的 demo 目录下多了.git隐藏文件,正因如此,原来被我们称为工作目录的 demo 才能纳入版本控制,我们将.git目录称之为版本库.\n由于当前项目 demo 只在我们自己电脑上,其他人无法访问,所以我们称这种形式的版本库为本地仓库.\n添加文件到版本库\n首先明确的是,所有的版本控制系统只能追踪文本文件的改动,文本文件就是平常熟悉的.txt .html .js .css .java .xml等等文件,非文本文件的其他格式有哪些? 例如二进制文件,像我们平时听音乐的.mp3,看视频的.mp4,浏览图片的.png等这些都是二进制文件,需要专门的软件才能正常打开,不信的话,你用记事本看看能不能打开视频?\n了解文本文件和二进制文件的区别,那是不是说二进制文件没法进行版本控制了,刚才你不是还说demo 目录下的所有文件吗?这不是自相矛盾吗!\n非也非也,git 当然也能够管理二进制文件,对于文本文件的追踪,可以细粒度到哪个文件在哪一行发生了哪些变化,而二进制文件只能粗粒度知道哪个文件变化了,并不知道具体变化.\n不幸的是,Microsoft 的Word格式是二进制格式,因此,版本控制系统是没法跟踪Word文件的改动的,前面我们举的例子只是为了演示,如果要真正使用版本控制系统,就要以纯文本方式编写文件.\n因为文本是有编码的,比如中文有常用的GBK编码,日文有Shift_JIS编码,如果没有历史遗留问题,强烈建议使用标准的UTF-8编码,所有语言使用同一种编码,既没有冲突,又被所有平台所支持.\n言归正传,现在我们在demo 目录下创建一个test.txt 演示文件,内容如下git test\n# 创建新文件\ntouch test.txt\n\n# 编辑新文件,输入 git test\necho \"git test\" > test.txt\n接下来我们还需要两步操作才能将test.txt纳入git管理:\n第一步,使用git add <file> 命令将文件添加到本地仓库:\n# 添加到本地仓库: 第一步指定要添加的文件\ngit add test.txt\n第二步,使用git commit -m <message> 命令将文件提交到本地仓库:\n# 添加到本地仓库: 第二步指定添加文件备注\ngit commit -m \"add test.txt\"\n经过上述两步操作,test.txt 文件已经纳入到版本控制中了,这里你可能会有疑问了为什么需要add commit两步呢? 因为commit 可以一次性提交很多文件,所以你可以多次add不同的文件,比如:\n# 创建三个文件file1.txt file2.txt file3.txt\ntouch file1.txt file2.txt file3.txt\n\n# 添加一个文件file1.txt\ngit add file1.txt\n\n# 添加两个文件file2.txt file3.txt\ngit add file2.txt file3.txt\n\n# 一次性提交全部文件\ngit commit -m \"add 3 files.\"\n小结\n初始化本地仓库 git init\n添加文件到本地仓库分两步 git add <file> 和 git commit -m <message>\n实际工作中,大致以下流程\n# 在工作空间创建指定目录\nmkdir demo\n\n# 切换至工作目录\ncd demo\n\n# 初始化本地仓库\ngit init \n\n# 创建新文件\ntouch test.txt\n\n# 编辑新文件,输入 git test\necho \"git test\" > test.txt\n\n# 添加到本地仓库: 第一步指定要添加的文件\ngit add test.txt\n\n# 添加到本地仓库: 第二步指定添加文件备注\ngit commit -m \"add test.txt\"\n\n...\n\n# 继续编辑目标文件,追加 git init\necho \"git init\" >> test.txt\n\n# 将目标文件添加到本地仓库\ngit add test.txt\n\n# 添加本次新增文件的备注\ngit commit -m \"add git init\"\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n本地仓库\n背景\n创建工作目录\n平时工作时我们习惯对文档分门别类进行管理,.doc .txt 等文本类型的文件习惯存在 doc文件下,开发java js 等源代...","summary":"平时工作时我们习惯对文档分门别类进行管理,.doc .txt 等文本类型的文件习惯存在 doc文件下,开发java js 等源代码文件存在在 src 目录下,这...","abstract":"平时工作时我们习惯对文档分门别类进行管理,.doc .txt 等文本类型的文件习惯存在 doc文件下,开发java js 等源代码文件存在在 src 目录下,这...","description":"","picture":"","coverImageUrl":"","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/18 10:41"},"authorId":2952369,"columnId":75668,"writeTime":1554276278,"updateTime":1554276278,"viewCount":77,"likeCount":3,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2705,"type":40,"actionInfo":{"articleId":1409912,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554276224,"detail":{"id":1409912,"articleId":1409912,"title":"git 入门教程之实战 git\n                                                                            原","content":"entityMap|0|type|LINK|mutability|MUTABLE|data|url|https://git-scm.com/|1|https://learngitbranching.js.org/|2|https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000|blocks|key|3d9f7|text|unstyled|depth|inlineStyleRanges|entityRanges|3fhpk|实战+git|header-one|49fqg|git+是一款分布式版本控制系统,可以简单概括:+不要把鸡蛋放在一个篮子里,你的一举一动都在监视中.|offset|length|style|CODE|BOLD|8qgr5|实战场景|header-two|78fs1|你作为某项目的其中一员或者负责人,和小伙伴们一起开发,大家既有着各自分工互不干扰,也有着相互合作,最终每个人的劳动成果汇聚成最后的项目,愉快完成项目!|2cd49|要求|98t63|理解+git+的工作流程,懂得实际工作中如何交流合作|unordered-list-item|13c1l|掌握+git+常用操作,工具为我所有,进而提高工作效率|7hart|独当一面,最好能够独自解决使用git+过程中遇到的问题|aedrn|主动分享经验,能够教会别人如何使用+git+更上一层楼|7mt19|推荐|diaq8|最好的教程在官网+git+官网|434pr|在线练习常用操作+Learning+Git+Branching|7p3kb|廖雪峰的官方网站+git教程|esulk|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|0|3|7|9|P|C|0|0|0|0|3|3|0|3|3|0|F|3|0|I|3|0|0|9|6|0|0|9|M|1|0|9|5|2|0^^$0|$1|$2|3|4|5|6|$7|8]]|9|$2|3|4|5|6|$7|A]]|B|$2|3|4|5|6|$7|C]]]|D|@$E|F|G|-4|2|H|I|1L|J|@]|K|@]|6|$]]|$E|L|G|M|2|N|I|1M|J|@]|K|@]|6|$]]|$E|O|G|P|2|H|I|1N|J|@$Q|1O|R|1P|S|T]|$Q|1Q|R|1R|S|U]|$Q|1S|R|1T|S|U]]|K|@]|6|$]]|$E|V|G|W|2|X|I|1U|J|@]|K|@]|6|$]]|$E|Y|G|Z|2|H|I|1V|J|@]|K|@]|6|$]]|$E|10|G|11|2|X|I|1W|J|@]|K|@]|6|$]]|$E|12|G|13|2|14|I|1X|J|@$Q|1Y|R|1Z|S|T]]|K|@]|6|$]]|$E|15|G|16|2|14|I|20|J|@$Q|21|R|22|S|T]]|K|@]|6|$]]|$E|17|G|18|2|14|I|23|J|@$Q|24|R|25|S|T]]|K|@]|6|$]]|$E|19|G|1A|2|14|I|26|J|@$Q|27|R|28|S|T]]|K|@]|6|$]]|$E|1B|G|1C|2|X|I|29|J|@]|K|@]|6|$]]|$E|1D|G|1E|2|14|I|2A|J|@]|K|@$Q|2B|R|2C|E|2D]]|6|$]]|$E|1F|G|1G|2|14|I|2E|J|@]|K|@$Q|2F|R|2G|E|2H]]|6|$]]|$E|1H|G|1I|2|14|I|2I|J|@]|K|@$Q|2J|R|2K|E|2L]]|6|$]]|$E|1J|G|1K|2|H|I|2M|J|@]|K|@]|6|$]]]]","plain":"\n实战 git\ngit 是一款分布式版本控制系统,可以简单概括: 不要把鸡蛋放在一个篮子里,你的一举一动都在监视中.\n实战场景\n你作为某项目的其中一员或者负责人,和小伙伴们一起开发,大家既有着各自分工互不干扰,也有着相互合作,最终每个人的劳动成果汇聚成最后的项目,愉快完成项目!\n要求\n理解 git 的工作流程,懂得实际工作中如何交流合作\n掌握 git 常用操作,工具为我所有,进而提高工作效率\n独当一面,最好能够独自解决使用git 过程中遇到的问题\n主动分享经验,能够教会别人如何使用 git 更上一层楼\n推荐\n最好的教程在官网 git 官网\n在线练习常用操作 Learning Git Branching\n廖雪峰的官方网站 git教程\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n实战 git\ngit 是一款分布式版本控制系统,可以简单概括: 不要把鸡蛋放在一个篮子里,你的一举一动都在监视中.\n实战场景\n你作为某项目的其中一员或者负责人...","summary":"git 是一款分布式版本控制系统,可以简单概括: 不要把鸡蛋放在一个篮子里,你的一举一动都在监视中.","abstract":"git 是一款分布式版本控制系统,可以简单概括: 不要把鸡蛋放在一个篮子里,你的一举一动都在监视中.","description":"","picture":"","coverImageUrl":"","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/18 10:26"},"authorId":2952369,"columnId":75668,"writeTime":1554276224,"updateTime":1554276224,"viewCount":46,"likeCount":2,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2704,"type":40,"actionInfo":{"articleId":1409911,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554276211,"detail":{"id":1409911,"articleId":1409911,"title":"git 入门教程之配置 git\n                                                                            原","content":"entityMap|0|type|LINK|mutability|MUTABLE|data|url|https://snowdreams1006.github.io/git/base/config.html|blocks|key|47pin|text|unstyled|depth|inlineStyleRanges|entityRanges|5e9h|配置+git|header-one|fbju3|安装完成后,还需要最后一步配置就可以愉快使用了,在命令行输入：|e0n8s|git+config+--global+user.name+\"your+username\"\ngit+config+--global+user.email+\"example@example.com\"|code-block|syntax|javascript|7bfqq|因为Git是分布式版本控制系统,所以每个机器都必须自报家门:你的名字和Email地址.|6ahnt|配置文件|header-two|85kcv|git+提供git+config工具,专门用来配置相应的工作环境变量,支持三种不同的位置.|offset|length|style|CODE|8f6l8|/etc/gitconfig++配置文件+(优先级最低)|unordered-list-item|fhjbh|系统中对所有用户都生效的配置,效果等同于git+config+--system|5fs0u|~/.gitconfig+配置文件+(优先级其次)|4p12f|系统中仅仅对当前登录用户生效的配置,效果等同于git+config+--global|94f6l|$(pwd)/.git/config+配置文件+(优先级最高)|9s83q|仅仅对当前项目生效,效果等同于git+config|3cqge|+每一级别的配置都会自动覆盖上级相同配置,当前项目配置优先于其余配置\n+|blockquote|fk8ru|查看配置|du6fi|如果要查看已有的配置信息,可以输入+git+config+--list+命令,如果看到重复变量名,表示来自不同配置文件(比如/etc/gitconfig+和+~/.gitconfig),实际上git会采用最后一个!|BOLD|4domg|#+查看已有配置信息\ngit+config+--list\n\n#+查看当前用户配置信息\ncat+~/.gitconfig\n\n#+查看系统级别配置信息\ncat+/etc/gitconfig|32e2t|也可以直接查看某项环境变量值,比如|a9g6t|#+查看用户名称变量\ngit+config+user.name|49na1|原文请访问+https://snowdreams1006.github.io/git/base/config.html|afnas|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|0|0|0|0|0|3|6|A|0|0|E|0|K|J|0|0|C|0|N|J|0|0|I|0|F|A|0|0|0|I|H|1Q|E|27|C|2O|3|2U|4|0|0|0|0|6|1H|0|0^^$0|$1|$2|3|4|5|6|$7|8]]]|9|@$A|B|C|-4|2|D|E|1X|F|@]|G|@]|6|$]]|$A|H|C|I|2|J|E|1Y|F|@]|G|@]|6|$]]|$A|K|C|L|2|D|E|1Z|F|@]|G|@]|6|$]]|$A|M|C|N|2|O|E|20|F|@]|G|@]|6|$P|Q]]|$A|R|C|S|2|D|E|21|F|@]|G|@]|6|$]]|$A|T|C|U|2|V|E|22|F|@]|G|@]|6|$]]|$A|W|C|X|2|D|E|23|F|@$Y|24|Z|25|10|11]|$Y|26|Z|27|10|11]]|G|@]|6|$]]|$A|12|C|13|2|14|E|28|F|@$Y|29|Z|2A|10|11]]|G|@]|6|$]]|$A|15|C|16|2|D|E|2B|F|@$Y|2C|Z|2D|10|11]]|G|@]|6|$]]|$A|17|C|18|2|14|E|2E|F|@$Y|2F|Z|2G|10|11]]|G|@]|6|$]]|$A|19|C|1A|2|D|E|2H|F|@$Y|2I|Z|2J|10|11]]|G|@]|6|$]]|$A|1B|C|1C|2|14|E|2K|F|@$Y|2L|Z|2M|10|11]]|G|@]|6|$]]|$A|1D|C|1E|2|D|E|2N|F|@$Y|2O|Z|2P|10|11]]|G|@]|6|$]]|$A|1F|C|1G|2|1H|E|2Q|F|@]|G|@]|6|$]]|$A|1I|C|1J|2|V|E|2R|F|@]|G|@]|6|$]]|$A|1K|C|1L|2|D|E|2S|F|@$Y|2T|Z|2U|10|11]|$Y|2V|Z|2W|10|11]|$Y|2X|Z|2Y|10|11]|$Y|2Z|Z|30|10|11]|$Y|31|Z|32|10|1M]]|G|@]|6|$]]|$A|1N|C|1O|2|O|E|33|F|@]|G|@]|6|$P|Q]]|$A|1P|C|1Q|2|D|E|34|F|@]|G|@]|6|$]]|$A|1R|C|1S|2|O|E|35|F|@]|G|@]|6|$P|Q]]|$A|1T|C|1U|2|D|E|36|F|@]|G|@$Y|37|Z|38|A|39]]|6|$]]|$A|1V|C|1W|2|D|E|3A|F|@]|G|@]|6|$]]]]","plain":"\n配置 git\n安装完成后,还需要最后一步配置就可以愉快使用了,在命令行输入：\ngit config --global user.name \"your username\"\ngit config --global user.email \"example@example.com\"\n因为Git是分布式版本控制系统,所以每个机器都必须自报家门:你的名字和Email地址.\n配置文件\ngit 提供git config工具,专门用来配置相应的工作环境变量,支持三种不同的位置.\n/etc/gitconfig  配置文件 (优先级最低)\n系统中对所有用户都生效的配置,效果等同于git config --system\n~/.gitconfig 配置文件 (优先级其次)\n系统中仅仅对当前登录用户生效的配置,效果等同于git config --global\n$(pwd)/.git/config 配置文件 (优先级最高)\n仅仅对当前项目生效,效果等同于git config\n 每一级别的配置都会自动覆盖上级相同配置,当前项目配置优先于其余配置\n \n查看配置\n如果要查看已有的配置信息,可以输入 git config --list 命令,如果看到重复变量名,表示来自不同配置文件(比如/etc/gitconfig 和 ~/.gitconfig),实际上git会采用最后一个!\n# 查看已有配置信息\ngit config --list\n\n# 查看当前用户配置信息\ncat ~/.gitconfig\n\n# 查看系统级别配置信息\ncat /etc/gitconfig\n也可以直接查看某项环境变量值,比如\n# 查看用户名称变量\ngit config user.name\n原文请访问 https://snowdreams1006.github.io/git/base/config.html\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n配置 git\n安装完成后,还需要最后一步配置就可以愉快使用了,在命令行输入：\ngit config --global user.name \"your user...","summary":"因为Git是分布式版本控制系统,所以每个机器都必须自报家门:你的名字和Email地址.","abstract":"因为Git是分布式版本控制系统,所以每个机器都必须自报家门:你的名字和Email地址.","description":"","picture":"","coverImageUrl":"","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/17 10:58"},"authorId":2952369,"columnId":75668,"writeTime":1554276211,"updateTime":1554276211,"viewCount":72,"likeCount":3,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2703,"type":40,"actionInfo":{"articleId":1409910,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554276198,"detail":{"id":1409910,"articleId":1409910,"title":"git 入门教程之安装 git\n                                                                            原","content":"entityMap|0|type|LINK|mutability|MUTABLE|data|url|http://git-scm.com/downloads|1|2|IMAGE|IMMUTABLE|imageUrl|https://ask.qcloudimg.com/http-save/yehe-2952369/p9q8dfcf4e.jpeg|imageAlt|windows-install.jpg|3|https://brew.sh/index_zh-cn|4|https://itunes.apple.com/cn/app/xcode/id497799835?mt=12|5|https://ask.qcloudimg.com/http-save/yehe-2952369/0ru7lbh062.jpeg|mac-xcode-install.jpeg|6|https://snowdreams1006.github.io/git/base/install.html|blocks|key|2pjfn|text|unstyled|depth|inlineStyleRanges|entityRanges|b8ud4|安装+git|header-one|blv4v|git+目前支持+Linux/Unix、Solaris、Mac和+Windows+平台上运行,根据自身环境选择安装.|offset|length|style|CODE|3ngpu|Linux+系统|header-two|6adet|linux+系统安装软件大致有两种途径,一种是利用安装包管理工具安装,另一种采用源码包安装方式.|bjojp|安装前先确认下是否之前已安装过,在命令行窗口输入git+--version+,如果打印出版本号则表示已安装,否则参考一下内容进行安装.|90ucs|查看+git+版本|e6qe|git+--version|code-block|syntax|javascript|ct684|Debian/Ubuntu|header-three|1c9nb|#+安装+git+依赖\napt-get+install+libcurl4-gnutls-dev+libexpat1-dev+gettext+\\\n++libz-dev+libssl-dev\n\n#+安装+git\napt-get+install+git\n\n#+查看+git+版本\ngit+--version|29sqj|Centos/RedHat|9svqn|#+安装+git+依赖\nyum+install+curl-devel+expat-devel+gettext-devel+\\\n++openssl-devel+zlib-devel\n\n#+安装+git\nyum+-y+install+git\n\n#+查看+git+版本\ngit+--version|4iin5|+git-core+和+git+历史渊源:\n+以前有个软件也叫GIT(GNU+Interactive+Tools),所以git只能叫git-core了,后来由于git名气实在太大以至于GNU+Interactive+Tools改名成gnuit,而git-core正式改为git.\n+|blockquote|f7pa2|源码安装|fbd44|先从git+官网下载指定版本源码,然后解压,依次输入：./config,make,+sudo+make+install+这几个命令安装到指定目录即可.|7vkq0|header-four|b0982|#+安装+git+相关依赖\napt-get+install+libcurl4-gnutls-dev+libexpat1-dev+gettext+\\\n++libz-dev+libssl-dev\n\n#+下载指定版本源码包\nwget+https://github.com/git/git/archive/v2.21.0.tar.gz\n\n#+解压\ntar+-zxf+v2.21.0.tar.gz\n\n#+切换到+git目录\ncd+git-2.21.0\n\n#+安装\nmake+prefix=/usr/local+all\n\n#+安装\nsudo+make+prefix=/usr/local+install++|53g6n|21v15|#+安装+git+相关依赖\nyum+install+curl-devel+expat-devel+gettext-devel+\\\n++openssl-devel+zlib-devel\n\n#+解压\ntar+-zxf+v2.21.0.tar.gz\n\n#+切换到+git目录\ncd+git-2.21.0\n\n#+安装\nmake+prefix=/usr/local+all\n\n#+安装\nsudo+make+prefix=/usr/local+install++|1rh9m|Windows+系统|dh417|直接从git+官网下载安装程序,然后按默认选项安装即可.+安装完成后,在开始菜单里找到Git->Git+Bash,弹出命令行窗口,则说明安装成功！|8munr|?|atomic|3v0bi|Mac+系统|9bvm8|一般有两种安装方式,一种是利用+mac+的homebrew管理工具安装git,具体安装方法参考homebrew官方文档|9p9im|另一种方法安装xcode默认集成git,首先从+App+Store下载+xcode+,下载完成后运行Xcode，选择菜单Xcode->Preferences，在弹出窗口中找到Downloads，选择Command+Line+Tools，点Install就可以完成安装了|9243l|4fmvp|原文请访问+https://snowdreams1006.github.io/git/base/install.html|4n8l|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|0|3|0|0|0|O|D|0|3|3|0|0|0|0|0|0|1|8|C|3|1O|3|1U|8|28|3|2K|L|38|5|3F|8|3R|3|0|0|R|8|10|4|16|H|2|6|0|0|0|0|0|0|0|17|D|3|6|1|0|0|1|2|0|0|L|8|Z|3|1B|C|3|0|7|5|G|3|1E|5|1O|I|2F|9|2R|I|3B|7|10|5|4|0|0|1|5|0|6|1I|6|0^^$0|$1|$2|3|4|5|6|$7|8]]|9|$2|3|4|5|6|$7|8]]|A|$2|B|4|C|6|$D|E|F|G]]|H|$2|3|4|5|6|$7|I]]|J|$2|3|4|5|6|$7|K]]|L|$2|B|4|C|6|$D|M|F|N]]|O|$2|3|4|5|6|$7|P]]]|Q|@$R|S|T|-4|2|U|V|2Q|W|@]|X|@]|6|$]]|$R|Y|T|Z|2|10|V|2R|W|@]|X|@]|6|$]]|$R|11|T|12|2|U|V|2S|W|@$13|2T|14|2U|15|16]]|X|@]|6|$]]|$R|17|T|18|2|19|V|2V|W|@]|X|@]|6|$]]|$R|1A|T|1B|2|U|V|2W|W|@]|X|@]|6|$]]|$R|1C|T|1D|2|U|V|2X|W|@$13|2Y|14|2Z|15|16]]|X|@]|6|$]]|$R|1E|T|1F|2|U|V|30|W|@$13|31|14|32|15|16]]|X|@]|6|$]]|$R|1G|T|1H|2|1I|V|33|W|@]|X|@]|6|$1J|1K]]|$R|1L|T|1M|2|1N|V|34|W|@]|X|@]|6|$]]|$R|1O|T|1P|2|1I|V|35|W|@]|X|@]|6|$1J|1K]]|$R|1Q|T|1R|2|1N|V|36|W|@]|X|@]|6|$]]|$R|1S|T|1T|2|1I|V|37|W|@]|X|@]|6|$1J|1K]]|$R|1U|T|1V|2|1W|V|38|W|@$13|39|14|3A|15|16]|$13|3B|14|3C|15|16]|$13|3D|14|3E|15|16]|$13|3F|14|3G|15|16]|$13|3H|14|3I|15|16]|$13|3J|14|3K|15|16]|$13|3L|14|3M|15|16]|$13|3N|14|3O|15|16]|$13|3P|14|3Q|15|16]]|X|@]|6|$]]|$R|1X|T|1Y|2|1N|V|3R|W|@]|X|@]|6|$]]|$R|1Z|T|20|2|U|V|3S|W|@$13|3T|14|3U|15|16]|$13|3V|14|3W|15|16]|$13|3X|14|3Y|15|16]]|X|@$13|3Z|14|40|R|41]]|6|$]]|$R|21|T|1M|2|22|V|42|W|@]|X|@]|6|$]]|$R|23|T|24|2|1I|V|43|W|@]|X|@]|6|$1J|1K]]|$R|25|T|1R|2|22|V|44|W|@]|X|@]|6|$]]|$R|26|T|27|2|1I|V|45|W|@]|X|@]|6|$1J|1K]]|$R|28|T|29|2|19|V|46|W|@]|X|@]|6|$]]|$R|2A|T|2B|2|U|V|47|W|@$13|48|14|49|15|16]]|X|@$13|4A|14|4B|R|4C]]|6|$]]|$R|2C|T|2D|2|2E|V|4D|W|@]|X|@$13|4E|14|4F|R|4G]]|6|$]]|$R|2F|T|2G|2|19|V|4H|W|@]|X|@]|6|$]]|$R|2H|T|2I|2|U|V|4I|W|@$13|4J|14|4K|15|16]|$13|4L|14|4M|15|16]]|X|@$13|4N|14|4O|R|4P]]|6|$]]|$R|2J|T|2K|2|U|V|4Q|W|@$13|4R|14|4S|15|16]|$13|4T|14|4U|15|16]|$13|4V|14|4W|15|16]|$13|4X|14|4Y|15|16]|$13|4Z|14|50|15|16]|$13|51|14|52|15|16]|$13|53|14|54|15|16]]|X|@$13|55|14|56|R|57]]|6|$]]|$R|2L|T|2D|2|2E|V|58|W|@]|X|@$13|59|14|5A|R|5B]]|6|$]]|$R|2M|T|2N|2|U|V|5C|W|@]|X|@$13|5D|14|5E|R|5F]]|6|$]]|$R|2O|T|2P|2|U|V|5G|W|@]|X|@]|6|$]]]]","plain":"\n安装 git\ngit 目前支持 Linux/Unix、Solaris、Mac和 Windows 平台上运行,根据自身环境选择安装.\nLinux 系统\nlinux 系统安装软件大致有两种途径,一种是利用安装包管理工具安装,另一种采用源码包安装方式.\n安装前先确认下是否之前已安装过,在命令行窗口输入git --version ,如果打印出版本号则表示已安装,否则参考一下内容进行安装.\n查看 git 版本\ngit --version\nDebian/Ubuntu\n# 安装 git 依赖\napt-get install libcurl4-gnutls-dev libexpat1-dev gettext \\\n  libz-dev libssl-dev\n\n# 安装 git\napt-get install git\n\n# 查看 git 版本\ngit --version\nCentos/RedHat\n# 安装 git 依赖\nyum install curl-devel expat-devel gettext-devel \\\n  openssl-devel zlib-devel\n\n# 安装 git\nyum -y install git\n\n# 查看 git 版本\ngit --version\n git-core 和 git 历史渊源:\n 以前有个软件也叫GIT(GNU Interactive Tools),所以git只能叫git-core了,后来由于git名气实在太大以至于GNU Interactive Tools改名成gnuit,而git-core正式改为git.\n \n源码安装\n先从git 官网下载指定版本源码,然后解压,依次输入：./config,make, sudo make install 这几个命令安装到指定目录即可.\nDebian/Ubuntu\n# 安装 git 相关依赖\napt-get install libcurl4-gnutls-dev libexpat1-dev gettext \\\n  libz-dev libssl-dev\n\n# 下载指定版本源码包\nwget https://github.com/git/git/archive/v2.21.0.tar.gz\n\n# 解压\ntar -zxf v2.21.0.tar.gz\n\n# 切换到 git目录\ncd git-2.21.0\n\n# 安装\nmake prefix=/usr/local all\n\n# 安装\nsudo make prefix=/usr/local install  \nCentos/RedHat\n# 安装 git 相关依赖\nyum install curl-devel expat-devel gettext-devel \\\n  openssl-devel zlib-devel\n\n# 解压\ntar -zxf v2.21.0.tar.gz\n\n# 切换到 git目录\ncd git-2.21.0\n\n# 安装\nmake prefix=/usr/local all\n\n# 安装\nsudo make prefix=/usr/local install  \nWindows 系统\n直接从git 官网下载安装程序,然后按默认选项安装即可. 安装完成后,在开始菜单里找到Git->Git Bash,弹出命令行窗口,则说明安装成功！\n?\nMac 系统\n一般有两种安装方式,一种是利用 mac 的homebrew管理工具安装git,具体安装方法参考homebrew官方文档\n另一种方法安装xcode默认集成git,首先从 App Store下载 xcode ,下载完成后运行Xcode，选择菜单Xcode->Preferences，在弹出窗口中找到Downloads，选择Command Line Tools，点Install就可以完成安装了\n?\n原文请访问 https://snowdreams1006.github.io/git/base/install.html\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n安装 git\ngit 目前支持 Linux/Unix、Solaris、Mac和 Windows 平台上运行,根据自身环境选择安装.\nLinux 系统\nlinu...","summary":"git 目前支持 Linux/Unix、Solaris、Mac和 Windows 平台上运行,根据自身环境选择安装.","abstract":"git 目前支持 Linux/Unix、Solaris、Mac和 Windows 平台上运行,根据自身环境选择安装.","description":"","picture":"https://ask.qcloudimg.com/http-save/yehe-2952369/p9q8dfcf4e.jpeg","coverImageUrl":"https://ask.qcloudimg.com/http-save/yehe-2952369/p9q8dfcf4e.jpeg","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/17 10:51"},"authorId":2952369,"columnId":75668,"writeTime":1554276198,"updateTime":1554276198,"viewCount":91,"likeCount":3,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"},{"tagId":10308,"tagName":"Linux"},{"tagId":10161,"tagName":"Xcode"},{"tagId":10310,"tagName":"Ubuntu"},{"tagId":10312,"tagName":"CentOS"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2702,"type":40,"actionInfo":{"articleId":1409909,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554276164,"detail":{"id":1409909,"articleId":1409909,"title":"git 入门教程之初识git\n                                                                            原","content":"entityMap|0|type|LINK|mutability|MUTABLE|data|url|https://snowdreams1006.github.io/git/base/about.html|blocks|key|btkv0|text|unstyled|depth|inlineStyleRanges|entityRanges|840cg|初识+git|header-one|dn6eg|git+是一个开源的分布式版本控制系统,用于敏捷高效地处理任何或小或大的项目.|offset|length|style|CODE|BOLD|as2h1|背景|header-two|4hvik|我们都知道,Linus+在1991年创建了开源的linux系统,随着不断发展壮大,目前已发展成为最大的服务器系统软件.|6rcf1|Linus+虽然创建了+linux,但+linux+的发展壮大是靠全世界热心的志愿者参与贡献的,这么多人在世界各地为linux系统编写代码,那么linux的代码是如何管理呢?|dumun|事实上,在2002年以前,世界各地的志愿者直接将源代码通过+diff+的方式发送给Linus,然后由Linus本人通过手动方式合并代码!|f43pa|...|99ru3|Linus花了两周时间自己用+C语言+写了一个分布式版本控制系统，这就是Git！|2f676|一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下.|dnjb4|分布式+和+集中式|3ou77|先说集中式版本控制系统,版本库是集中存放在专门的中央服务器中,而平时使用过程中需要时刻处于联网状态才能和中央服务器保持联系.日常工作流程是这样的,上班前先从中央服务器拉取最新工作内容,本地修改完毕后推送到中央服务器,第二天上班再拉取最新内容,修改后再推送给中央服务器...|ekpqe|集中式版本控制系统的特点就是必须要有一个专门的中央服务器,工作中必须联网才能进行版本控制,试想一下如果正在在外地出差或者没有网络条件下,还怎么进行版本控制,岂不是又重新回到原始时代了吗?|1gg55|那再说说分布式版本控制系统,版本库是存放在各自使用者的电脑的,不需要专门的中央服务器,每个人电脑中就是一份完整的版本库,因此不需要联网也能工作,工作流程和其他的版本控制系统大致相同.|6ovbr|由此可见,集中式的版本控制系统依赖于中央服务器,要求使用者一直保持通信,而分布式的版本控制系统并不依赖中央服务器,不必强制联网.|6fo5c|万一出现意外,集中式版本控制系统中充当中央服务器的电脑宕机了,那么所有人就没法工作了,再也不能享受版本控制带来的便利了!+同样的情况发生在分布式版本控制系统身上会如何呢?一台电脑宕机没关系,所有人的电脑不可能同时都宕机吧,因为每个人电脑中都是一份完整的版本控制,那么找到其中一个人的版本手动复制到宕机电脑中瞬间不久恢复运行了么?所以说分布式比集中式更安全!|bkfal|可能会有疑问了,既然分布式版本控制系统中每个人都拥有完整的版本库,那么两个人到底如何交流以谁的版本为准呢?一个版本,两个版本还好,假设有100个版本库呢?|4hlmj|实际上,这并不重要,假设有100个人在合作开发一个项目,而你作为项目负责人,你可能并不关心100人的全部工作细节,在乎的只是最终成果,而这些成果是由10个项目组长提交维护的,所以你关心的只是10个版本,假设没有集中式的中央服务器角色,那么你需要手动合并10个版本库,最终完成项目.|8itd|这样看起来中央服务器确实还是有存在的必要,为了方便不同版本库之间进行交流,通常分布式版本控制系统也有一台充当中央服务器角色的电脑,需要理解的是,此时中央服务器的作用仅仅是方便大家交换各自的修改而已,没有它,大家还是可以照常工作的,只是彼此间交换修改不太方便而已!|e8cot|+不论是分布式还是集中式,存在即合理,如何取舍有着各自应用场景,分别代表民主和专制.\n+|blockquote|78hic|git+和+svn|4bh7|git+是分布式版本控制系统的代表,除此之外还有BitKeeper,Mercurial,Bazaar+等分布式控制系统,每种分布式控制系统均有自身特点,毋容置疑的是git是最简单最流行!|3tpsi|svn+是集中式版本控制系统的代表,是目前使用最广泛的集中式版本控制系统,cvs+ClearCase等均属于集中式.|1rbui|不论是分布式还是集中式,不论是免费还是收费,不一昧追求最好的,只需要最适合自己的即可.|3ujgc|git+是分布式控制系统,svn+是集中式版本控制系统|unordered-list-item|bem7b|git+将内容按元数据方式存储,svn+是按文件方式存储|aouga|git+的内容完整性优于svn,因为+git+内容存储基于sha-1哈希算法,确保内容的完整性.|45oom|小结|3ej5j|git+是Linus为了帮助管理+Linux+内核开发而开发的一个开放源码的版本控制软件.|dkget|原文请访问+https://snowdreams1006.github.io/git/base/about.html|ba85n|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|0|3|A|9|0|0|O|5|0|C|5|K|5|1M|5|20|5|0|U|4|0|0|F|3|0|0|0|0|0|0|0|J|5|0|0|0|0|0|0|0|3|O|9|Y|9|18|6|2A|3|0|0|3|11|3|15|9|0|0|0|3|D|3|0|0|3|G|3|0|0|3|C|3|J|3|T|5|0|0|0|3|H|5|0|6|1G|0|0^^$0|$1|$2|3|4|5|6|$7|8]]]|9|@$A|B|C|-4|2|D|E|2E|F|@]|G|@]|6|$]]|$A|H|C|I|2|J|E|2F|F|@]|G|@]|6|$]]|$A|K|C|L|2|D|E|2G|F|@$M|2H|N|2I|O|P]|$M|2J|N|2K|O|Q]]|G|@]|6|$]]|$A|R|C|S|2|T|E|2L|F|@]|G|@]|6|$]]|$A|U|C|V|2|D|E|2M|F|@$M|2N|N|2O|O|P]]|G|@]|6|$]]|$A|W|C|X|2|D|E|2P|F|@$M|2Q|N|2R|O|P]|$M|2S|N|2T|O|P]|$M|2U|N|2V|O|P]|$M|2W|N|2X|O|P]]|G|@]|6|$]]|$A|Y|C|Z|2|D|E|2Y|F|@$M|2Z|N|30|O|P]]|G|@]|6|$]]|$A|10|C|11|2|D|E|31|F|@]|G|@]|6|$]]|$A|12|C|13|2|D|E|32|F|@$M|33|N|34|O|P]]|G|@]|6|$]]|$A|14|C|15|2|D|E|35|F|@]|G|@]|6|$]]|$A|16|C|17|2|T|E|36|F|@]|G|@]|6|$]]|$A|18|C|19|2|D|E|37|F|@]|G|@]|6|$]]|$A|1A|C|1B|2|D|E|38|F|@]|G|@]|6|$]]|$A|1C|C|1D|2|D|E|39|F|@]|G|@]|6|$]]|$A|1E|C|1F|2|D|E|3A|F|@]|G|@]|6|$]]|$A|1G|C|1H|2|D|E|3B|F|@$M|3C|N|3D|O|P]]|G|@]|6|$]]|$A|1I|C|1J|2|D|E|3E|F|@]|G|@]|6|$]]|$A|1K|C|1L|2|D|E|3F|F|@]|G|@]|6|$]]|$A|1M|C|1N|2|D|E|3G|F|@]|G|@]|6|$]]|$A|1O|C|1P|2|1Q|E|3H|F|@]|G|@]|6|$]]|$A|1R|C|1S|2|T|E|3I|F|@]|G|@]|6|$]]|$A|1T|C|1U|2|D|E|3J|F|@$M|3K|N|3L|O|P]|$M|3M|N|3N|O|P]|$M|3O|N|3P|O|P]|$M|3Q|N|3R|O|P]|$M|3S|N|3T|O|P]]|G|@]|6|$]]|$A|1V|C|1W|2|D|E|3U|F|@$M|3V|N|3W|O|P]|$M|3X|N|3Y|O|P]|$M|3Z|N|40|O|P]]|G|@]|6|$]]|$A|1X|C|1Y|2|D|E|41|F|@]|G|@]|6|$]]|$A|1Z|C|20|2|21|E|42|F|@$M|43|N|44|O|P]|$M|45|N|46|O|P]]|G|@]|6|$]]|$A|22|C|23|2|21|E|47|F|@$M|48|N|49|O|P]|$M|4A|N|4B|O|P]]|G|@]|6|$]]|$A|24|C|25|2|21|E|4C|F|@$M|4D|N|4E|O|P]|$M|4F|N|4G|O|P]|$M|4H|N|4I|O|P]|$M|4J|N|4K|O|P]]|G|@]|6|$]]|$A|26|C|27|2|T|E|4L|F|@]|G|@]|6|$]]|$A|28|C|29|2|D|E|4M|F|@$M|4N|N|4O|O|P]|$M|4P|N|4Q|O|P]]|G|@]|6|$]]|$A|2A|C|2B|2|D|E|4R|F|@]|G|@$M|4S|N|4T|A|4U]]|6|$]]|$A|2C|C|2D|2|D|E|4V|F|@]|G|@]|6|$]]]]","plain":"\n初识 git\ngit 是一个开源的分布式版本控制系统,用于敏捷高效地处理任何或小或大的项目.\n背景\n我们都知道,Linus 在1991年创建了开源的linux系统,随着不断发展壮大,目前已发展成为最大的服务器系统软件.\nLinus 虽然创建了 linux,但 linux 的发展壮大是靠全世界热心的志愿者参与贡献的,这么多人在世界各地为linux系统编写代码,那么linux的代码是如何管理呢?\n事实上,在2002年以前,世界各地的志愿者直接将源代码通过 diff 的方式发送给Linus,然后由Linus本人通过手动方式合并代码!\n...\nLinus花了两周时间自己用 C语言 写了一个分布式版本控制系统，这就是Git！\n一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下.\n分布式 和 集中式\n先说集中式版本控制系统,版本库是集中存放在专门的中央服务器中,而平时使用过程中需要时刻处于联网状态才能和中央服务器保持联系.日常工作流程是这样的,上班前先从中央服务器拉取最新工作内容,本地修改完毕后推送到中央服务器,第二天上班再拉取最新内容,修改后再推送给中央服务器...\n集中式版本控制系统的特点就是必须要有一个专门的中央服务器,工作中必须联网才能进行版本控制,试想一下如果正在在外地出差或者没有网络条件下,还怎么进行版本控制,岂不是又重新回到原始时代了吗?\n那再说说分布式版本控制系统,版本库是存放在各自使用者的电脑的,不需要专门的中央服务器,每个人电脑中就是一份完整的版本库,因此不需要联网也能工作,工作流程和其他的版本控制系统大致相同.\n由此可见,集中式的版本控制系统依赖于中央服务器,要求使用者一直保持通信,而分布式的版本控制系统并不依赖中央服务器,不必强制联网.\n万一出现意外,集中式版本控制系统中充当中央服务器的电脑宕机了,那么所有人就没法工作了,再也不能享受版本控制带来的便利了! 同样的情况发生在分布式版本控制系统身上会如何呢?一台电脑宕机没关系,所有人的电脑不可能同时都宕机吧,因为每个人电脑中都是一份完整的版本控制,那么找到其中一个人的版本手动复制到宕机电脑中瞬间不久恢复运行了么?所以说分布式比集中式更安全!\n可能会有疑问了,既然分布式版本控制系统中每个人都拥有完整的版本库,那么两个人到底如何交流以谁的版本为准呢?一个版本,两个版本还好,假设有100个版本库呢?\n实际上,这并不重要,假设有100个人在合作开发一个项目,而你作为项目负责人,你可能并不关心100人的全部工作细节,在乎的只是最终成果,而这些成果是由10个项目组长提交维护的,所以你关心的只是10个版本,假设没有集中式的中央服务器角色,那么你需要手动合并10个版本库,最终完成项目.\n这样看起来中央服务器确实还是有存在的必要,为了方便不同版本库之间进行交流,通常分布式版本控制系统也有一台充当中央服务器角色的电脑,需要理解的是,此时中央服务器的作用仅仅是方便大家交换各自的修改而已,没有它,大家还是可以照常工作的,只是彼此间交换修改不太方便而已!\n 不论是分布式还是集中式,存在即合理,如何取舍有着各自应用场景,分别代表民主和专制.\n \ngit 和 svn\ngit 是分布式版本控制系统的代表,除此之外还有BitKeeper,Mercurial,Bazaar 等分布式控制系统,每种分布式控制系统均有自身特点,毋容置疑的是git是最简单最流行!\nsvn 是集中式版本控制系统的代表,是目前使用最广泛的集中式版本控制系统,cvs ClearCase等均属于集中式.\n不论是分布式还是集中式,不论是免费还是收费,不一昧追求最好的,只需要最适合自己的即可.\ngit 是分布式控制系统,svn 是集中式版本控制系统\ngit 将内容按元数据方式存储,svn 是按文件方式存储\ngit 的内容完整性优于svn,因为 git 内容存储基于sha-1哈希算法,确保内容的完整性.\n小结\ngit 是Linus为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件.\n原文请访问 https://snowdreams1006.github.io/git/base/about.html\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n初识 git\ngit 是一个开源的分布式版本控制系统,用于敏捷高效地处理任何或小或大的项目.\n背景\n我们都知道,Linus 在1991年创建了开源的linux...","summary":"我们都知道,Linus 在1991年创建了开源的linux系统,随着不断发展壮大,目前已发展成为最大的服务器系统软件.","abstract":"我们都知道,Linus 在1991年创建了开源的linux系统,随着不断发展壮大,目前已发展成为最大的服务器系统软件.","description":"","picture":"","coverImageUrl":"","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/16 15:17"},"authorId":2952369,"columnId":75668,"writeTime":1554276164,"updateTime":1554276164,"viewCount":62,"likeCount":3,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10668,"tagName":"分布式"},{"tagId":10285,"tagName":"SVN"},{"tagId":10283,"tagName":"Git"},{"tagId":10308,"tagName":"Linux"},{"tagId":10667,"tagName":"开源"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2701,"type":40,"actionInfo":{"articleId":1409908,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554276141,"detail":{"id":1409908,"articleId":1409908,"title":"git 入门教程之1分钟快速了解 git\n                                                                            原","content":"entityMap|0|type|LINK|mutability|MUTABLE|data|url|https://snowdreams1006.github.io/git/|blocks|key|dkgh7|text|unstyled|depth|inlineStyleRanges|entityRanges|5rf5c|git+是分布式版本控制系统,是文本文档管理的利器,是帮助你管理文件动态的好帮手.|offset|length|style|CODE|BOLD|dce79|如果你曾经手动管理过文档,一定有这样的经历,比如你正在编辑文档,想删除某段落,又担心不久后可能会恢复,此时你可能会先备份然后再删除,或者想要修改某段落,几经修改后发现还是最初的比较好,这是就哭笑不得了...|bhr6k|从最初的新建文档,经过反反复复的修改,最终定稿文档的过程极其繁琐冗长,这就是手动式管理文档的痛点.|4ich6|如果有这么一种工具,能帮我自动记录每次文档的改动,想要查看文档变更详情只需要打开软件就能一目了然告诉我发生了哪些改变?岂不美哉!|2jqa3|%7C版本%7C文件%7C用户%7C说明%7C时间%7C+%7C-%7C-%7C-%7C-%7C-%7C+%7C1%7CREADME.md%7Csnowdreams1006%7C初始化简介文档%7C2019-03-01+08:00%7C+%7C2%7CREADME.md%7Csnowdreams1006%7C增加特点说明%7C2019-03-01+10:00%7C+%7C3%7CREADME.md%7Csnowdreams1006%7C增加要求说明%7C2019-03-01+12:00%7C|5qvu|事实上,还真有这样的软件,专业术语称为版本控制系统,而git就是最先进的分布式版本控制系统;|1r228|特点:|qpbs|文件的变更从此有迹可循,再也不怕丢失文件;|unordered-list-item|8dehp|有网无网均可工作,数据交换不需再相互拷贝;|bs9dm|人人平等的开放环境,有机会贡献自己的智慧;|f0mkv|原文请访问+https://snowdreams1006.github.io/git/|bphff|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|3|5|9|G|4|0|0|0|0|0|J|4|R|3|10|9|0|0|0|0|0|6|11|0|0^^$0|$1|$2|3|4|5|6|$7|8]]]|9|@$A|B|C|-4|2|D|E|1B|F|@]|G|@]|6|$]]|$A|H|C|I|2|D|E|1C|F|@$J|1D|K|1E|L|M]|$J|1F|K|1G|L|N]|$J|1H|K|1I|L|N]]|G|@]|6|$]]|$A|O|C|P|2|D|E|1J|F|@]|G|@]|6|$]]|$A|Q|C|R|2|D|E|1K|F|@]|G|@]|6|$]]|$A|S|C|T|2|D|E|1L|F|@]|G|@]|6|$]]|$A|U|C|V|2|D|E|1M|F|@]|G|@]|6|$]]|$A|W|C|X|2|D|E|1N|F|@$J|1O|K|1P|L|M]|$J|1Q|K|1R|L|M]|$J|1S|K|1T|L|N]]|G|@]|6|$]]|$A|Y|C|Z|2|D|E|1U|F|@]|G|@]|6|$]]|$A|10|C|11|2|12|E|1V|F|@]|G|@]|6|$]]|$A|13|C|14|2|12|E|1W|F|@]|G|@]|6|$]]|$A|15|C|16|2|12|E|1X|F|@]|G|@]|6|$]]|$A|17|C|18|2|D|E|1Y|F|@]|G|@$J|1Z|K|20|A|21]]|6|$]]|$A|19|C|1A|2|D|E|22|F|@]|G|@]|6|$]]]]","plain":"\ngit 是分布式版本控制系统,是文本文档管理的利器,是帮助你管理文件动态的好帮手.\n如果你曾经手动管理过文档,一定有这样的经历,比如你正在编辑文档,想删除某段落,又担心不久后可能会恢复,此时你可能会先备份然后再删除,或者想要修改某段落,几经修改后发现还是最初的比较好,这是就哭笑不得了...\n从最初的新建文档,经过反反复复的修改,最终定稿文档的过程极其繁琐冗长,这就是手动式管理文档的痛点.\n如果有这么一种工具,能帮我自动记录每次文档的改动,想要查看文档变更详情只需要打开软件就能一目了然告诉我发生了哪些改变?岂不美哉!\n|版本|文件|用户|说明|时间| |-|-|-|-|-| |1|README.md|snowdreams1006|初始化简介文档|2019-03-01 08:00| |2|README.md|snowdreams1006|增加特点说明|2019-03-01 10:00| |3|README.md|snowdreams1006|增加要求说明|2019-03-01 12:00|\n事实上,还真有这样的软件,专业术语称为版本控制系统,而git就是最先进的分布式版本控制系统;\n特点:\n文件的变更从此有迹可循,再也不怕丢失文件;\n有网无网均可工作,数据交换不需再相互拷贝;\n人人平等的开放环境,有机会贡献自己的智慧;\n原文请访问 https://snowdreams1006.github.io/git/\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\ngit 是分布式版本控制系统,是文本文档管理的利器,是帮助你管理文件动态的好帮手.\n如果你曾经手动管理过文档,一定有这样的经历,比如你正在编辑文档,想删除某段...","summary":"git 是分布式版本控制系统,是文本文档管理的利器,是帮助你管理文件动态的好帮手.","abstract":"git 是分布式版本控制系统,是文本文档管理的利器,是帮助你管理文件动态的好帮手.","description":"","picture":"","coverImageUrl":"","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/16 15:09"},"authorId":2952369,"columnId":75668,"writeTime":1554276141,"updateTime":1554276141,"viewCount":62,"likeCount":4,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"},{"tagId":10668,"tagName":"分布式"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2700,"type":40,"actionInfo":{"articleId":1409907,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554276128,"detail":{"id":1409907,"articleId":1409907,"title":"markdown 快速入门之掘金入门指南\n                                                                            原","content":"entityMap|0|type|LINK|mutability|MUTABLE|data|url|https://gold.xitu.io/|1|https://www.appinn.com/markdown/|2|https://snowdreams1006.github.io/markdown/juejin.html|blocks|key|r3ef|text|unstyled|depth|inlineStyleRanges|entityRanges|frjva|掘金入门指南|header-one|cdir2|用掘金－Markdown+编辑器写文章|header-three|a4t17|欢迎使用+掘金－Markdown+编辑器撰写技术文章，只专注于内容和技术，不再费心排版的问题。这是一份简要的+Markdown+引导指南，希望可以帮助您顺利的开始使用+Markdown+编辑器。|7doa4|丰富的快捷键|8o55g|本+Markdown+编辑器支持丰富的格式快捷键，可以非常便捷、轻松的使用+Markdown+语言，形成优美的排版和内容格式。|ebed6|支持的快捷键有：|3fego|加粗：+Ctrl/Cmd+%2B+B|unordered-list-item|offset|length|style|CODE|dv8t2|标题：+Ctrl/Cmd+%2B+H|aupki|插入链接：+Ctrl/Cmd+%2B+K|6j7g4|插入代码：+Ctrl/Cmd+%2B+Shift+%2B+C|5o9ej|行内代码：+Ctrl/Cmd+%2B+Shift+%2B+K|5pd3e|插入图片：+Ctrl/Cmd+%2B+Shift+%2B+I|c6ior|无序列表：+Ctrl/Cmd+%2B+Shift+%2B+L|aci9q|撤销：+Ctrl/Cmd+%2B+Z|8ut85|常用语法|8168r|标题|header-four|467c8|+语法格式：**+'#'%2B'空格'%2B'文本'+**\n+|blockquote|88gj4|一级标题|fmar2|二级标题|header-two|fnidh|三级标题|866ef|四级标题|4ekru|五级标题|header-five|oskf|六级标题|header-six|6tm5q|列表|5vqc4|+无序列表语法格式：**+'-'+%2B+'空格'+＋+'文本'+**\n+|8cqkn|文本一|4gi31|文本二|3fjj1|文本三|t0sq|+有序列表语法格式：**+'数字'+%2B+'.'+%2B+'空格'+%2B+'文本'+**\n+|7r6hc|ordered-list-item|2ftsq|a2k7h|dmmc0|+任务列表语法格式：**+'-'+%2B+'空格'+%2B+'[+]'+%2B+'文本'+**\n+|8npr1|[x]+文本一|ek399|[+]+文本二|1pme6|[+]+文本三|ds1oa|链接和图片|f9v0g|在+Markdown+中插入链接不需要其他按钮，你只需要使用［显示文本］(链接地址)这样的格式语法即可。例如：+稀土掘金+插入图片的语法与插入链接的语法很像，只是前面多了一个+!.语法如下：\\\\[图片上传失败...(image-3bb04f-1552714113658)]|av2bh|引用|3hqus|+语法：**+'>'%2B'空格'%2B'文本'+**\n+|17q1f|例如：|3v7r8|+Markdown+是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。\n+|28o3u|代码|5sga6|如下是代码段的语法：|79o3o|<pre>+```编程语言++这是代码段+```+</pre>|4se7i|e9d47|def+bubbleSort(alist):\n+for+passnum+in+range(len(alist)-1,0,-1):\n+#print+alist,passnum\n+for+i+in+range(passnum):\n+if+alist[i]>alist[i%2B1]:\n+temp+=+alist[i]\n+alist[i]+=+alist[i%2B1]\n+alist[i%2B1]+=+temp\n+return+alist|code-block|syntax|javascript|o6jr|表格|10hr5|Markdown　Extra　表格语法：|BOLD|cqorf|++项目价格+++iPhone$560+iPad$780+iMac$1000++|table|aligns|k9nd|align|left|7te47|rows|cp34r|cells|1brln|raw|p68d|项目|f061v|eatme|价格|7vmdi|7mpv7|dib31|iPhone|2stb1|a8ucm|$560|6u3hv|a2oao|dog1i|iPad|96n31|eb7hb|$780|5iira|fr5op|1tvhf|iMac|49t53|ecfoj|$1000|3drj7|可以使用冒号来定义对齐方式：|8o4na|%7C+项目+%7C+价格+%7C+数量+%7C+%7C+:--------+%7C+--------:%7C+:--:+%7C+%7C+iPhone+%7C+6000+元+%7C+5+%7C+%7C+iPad+%7C+3800+元+%7C+12+%7C+%7C+iMac+%7C+10000+元+%7C+234+%7C|a8ma8|结语|9ei7f|以上是最常见的+Markdown+的语法和格式，如果你还希望深入的学习+Markdown，可以参考这里Markdown语法，非常感谢使用**+掘金－Markdown+编辑器**,希望为您提供舒适的写作体验。|8fkep|原文请访问+https://snowdreams1006.github.io/markdown/juejin.html|cfp4e|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|0|0|0|0|0|4|C|0|4|C|0|6|C|0|6|K|0|6|K|0|6|K|0|6|K|0|4|C|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|U|C|2G|1|2N|15|1K|4|0|0|0|0|0|0|0|0|0|0|0|0|0|E|0|0|0|0|0|1F|A|1|0|6|1H|2|0^^$0|$1|$2|3|4|5|6|$7|8]]|9|$2|3|4|5|6|$7|A]]|B|$2|3|4|5|6|$7|C]]]|D|@$E|F|G|-4|2|H|I|53|J|@]|K|@]|6|$]]|$E|L|G|M|2|N|I|54|J|@]|K|@]|6|$]]|$E|O|G|P|2|Q|I|55|J|@]|K|@]|6|$]]|$E|R|G|S|2|H|I|56|J|@]|K|@]|6|$]]|$E|T|G|U|2|Q|I|57|J|@]|K|@]|6|$]]|$E|V|G|W|2|H|I|58|J|@]|K|@]|6|$]]|$E|X|G|Y|2|H|I|59|J|@]|K|@]|6|$]]|$E|Z|G|10|2|11|I|5A|J|@$12|5B|13|5C|14|15]]|K|@]|6|$]]|$E|16|G|17|2|11|I|5D|J|@$12|5E|13|5F|14|15]]|K|@]|6|$]]|$E|18|G|19|2|11|I|5G|J|@$12|5H|13|5I|14|15]]|K|@]|6|$]]|$E|1A|G|1B|2|11|I|5J|J|@$12|5K|13|5L|14|15]]|K|@]|6|$]]|$E|1C|G|1D|2|11|I|5M|J|@$12|5N|13|5O|14|15]]|K|@]|6|$]]|$E|1E|G|1F|2|11|I|5P|J|@$12|5Q|13|5R|14|15]]|K|@]|6|$]]|$E|1G|G|1H|2|11|I|5S|J|@$12|5T|13|5U|14|15]]|K|@]|6|$]]|$E|1I|G|1J|2|11|I|5V|J|@$12|5W|13|5X|14|15]]|K|@]|6|$]]|$E|1K|G|1L|2|Q|I|5Y|J|@]|K|@]|6|$]]|$E|1M|G|1N|2|1O|I|5Z|J|@]|K|@]|6|$]]|$E|1P|G|1Q|2|1R|I|60|J|@]|K|@]|6|$]]|$E|1S|G|1T|2|N|I|61|J|@]|K|@]|6|$]]|$E|1U|G|1V|2|1W|I|62|J|@]|K|@]|6|$]]|$E|1X|G|1Y|2|Q|I|63|J|@]|K|@]|6|$]]|$E|1Z|G|20|2|1O|I|64|J|@]|K|@]|6|$]]|$E|21|G|22|2|23|I|65|J|@]|K|@]|6|$]]|$E|24|G|25|2|26|I|66|J|@]|K|@]|6|$]]|$E|27|G|28|2|1O|I|67|J|@]|K|@]|6|$]]|$E|29|G|2A|2|1R|I|68|J|@]|K|@]|6|$]]|$E|2B|G|2C|2|11|I|69|J|@]|K|@]|6|$]]|$E|2D|G|2E|2|11|I|6A|J|@]|K|@]|6|$]]|$E|2F|G|2G|2|11|I|6B|J|@]|K|@]|6|$]]|$E|2H|G|2I|2|1R|I|6C|J|@]|K|@]|6|$]]|$E|2J|G|2C|2|2K|I|6D|J|@]|K|@]|6|$]]|$E|2L|G|2E|2|2K|I|6E|J|@]|K|@]|6|$]]|$E|2M|G|2G|2|2K|I|6F|J|@]|K|@]|6|$]]|$E|2N|G|2O|2|1R|I|6G|J|@]|K|@]|6|$]]|$E|2P|G|2Q|2|11|I|6H|J|@]|K|@]|6|$]]|$E|2R|G|2S|2|11|I|6I|J|@]|K|@]|6|$]]|$E|2T|G|2U|2|11|I|6J|J|@]|K|@]|6|$]]|$E|2V|G|2W|2|1O|I|6K|J|@]|K|@]|6|$]]|$E|2X|G|2Y|2|H|I|6L|J|@$12|6M|13|6N|14|15]|$12|6O|13|6P|14|15]|$12|6Q|13|6R|14|15]]|K|@$12|6S|13|6T|E|6U]]|6|$]]|$E|2Z|G|30|2|1O|I|6V|J|@]|K|@]|6|$]]|$E|31|G|32|2|1R|I|6W|J|@]|K|@]|6|$]]|$E|33|G|34|2|H|I|6X|J|@]|K|@]|6|$]]|$E|35|G|36|2|1R|I|6Y|J|@]|K|@]|6|$]]|$E|37|G|38|2|1O|I|6Z|J|@]|K|@]|6|$]]|$E|39|G|3A|2|H|I|70|J|@]|K|@]|6|$]]|$E|3B|G|3C|2|H|I|71|J|@]|K|@]|6|$]]|$E|3D|G|34|2|H|I|72|J|@]|K|@]|6|$]]|$E|3E|G|3F|2|3G|I|73|J|@]|K|@]|6|$3H|3I]]|$E|3J|G|3K|2|1O|I|74|J|@]|K|@]|6|$]]|$E|3L|G|3M|2|H|I|75|J|@$12|76|13|77|14|3N]]|K|@]|6|$]]|$E|3O|G|3P|2|3Q|I|78|J|@]|K|@]|6|$3R|@$E|3S|3T|3U]|$E|3V|3T|3U]]|3W|@$E|3X|3Y|@$E|3Z|40|$D|@$E|41|2|H|G|42|J|@]|K|@]]]|0|$]]]|$E|43|40|$D|@$E|44|2|H|G|45|J|@]|K|@]]]|0|$]]]]]|$E|46|3Y|@$E|47|40|$D|@$E|48|2|H|G|49|J|@]|K|@]]]|0|$]]]|$E|4A|40|$D|@$E|4B|2|H|G|4C|J|@]|K|@]]]|0|$]]]]]|$E|4D|3Y|@$E|4E|40|$D|@$E|4F|2|H|G|4G|J|@]|K|@]]]|0|$]]]|$E|4H|40|$D|@$E|4I|2|H|G|4J|J|@]|K|@]]]|0|$]]]]]|$E|4K|3Y|@$E|4L|40|$D|@$E|4M|2|H|G|4N|J|@]|K|@]]]|0|$]]]|$E|4O|40|$D|@$E|4P|2|H|G|4Q|J|@]|K|@]]]|0|$]]]]]]]]|$E|4R|G|4S|2|H|I|79|J|@]|K|@]|6|$]]|$E|4T|G|4U|2|H|I|7A|J|@]|K|@]|6|$]]|$E|4V|G|4W|2|1O|I|7B|J|@]|K|@]|6|$]]|$E|4X|G|4Y|2|H|I|7C|J|@]|K|@$12|7D|13|7E|E|7F]]|6|$]]|$E|4Z|G|50|2|H|I|7G|J|@]|K|@$12|7H|13|7I|E|7J]]|6|$]]|$E|51|G|52|2|H|I|7K|J|@]|K|@]|6|$]]]]","plain":"\n掘金入门指南\n用掘金－Markdown 编辑器写文章\n欢迎使用 掘金－Markdown 编辑器撰写技术文章，只专注于内容和技术，不再费心排版的问题。这是一份简要的 Markdown 引导指南，希望可以帮助您顺利的开始使用 Markdown 编辑器。\n丰富的快捷键\n本 Markdown 编辑器支持丰富的格式快捷键，可以非常便捷、轻松的使用 Markdown 语言，形成优美的排版和内容格式。\n支持的快捷键有：\n加粗： Ctrl/Cmd + B\n标题： Ctrl/Cmd + H\n插入链接： Ctrl/Cmd + K\n插入代码： Ctrl/Cmd + Shift + C\n行内代码： Ctrl/Cmd + Shift + K\n插入图片： Ctrl/Cmd + Shift + I\n无序列表： Ctrl/Cmd + Shift + L\n撤销： Ctrl/Cmd + Z\n常用语法\n标题\n 语法格式：** '#'+'空格'+'文本' **\n \n一级标题\n二级标题\n三级标题\n四级标题\n五级标题\n六级标题\n列表\n 无序列表语法格式：** '-' + '空格' ＋ '文本' **\n \n文本一\n文本二\n文本三\n 有序列表语法格式：** '数字' + '.' + '空格' + '文本' **\n \n文本一\n文本二\n文本三\n 任务列表语法格式：** '-' + '空格' + '[ ]' + '文本' **\n \n[x] 文本一\n[ ] 文本二\n[ ] 文本三\n链接和图片\n在 Markdown 中插入链接不需要其他按钮，你只需要使用［显示文本］(链接地址)这样的格式语法即可。例如： 稀土掘金 插入图片的语法与插入链接的语法很像，只是前面多了一个 !.语法如下：\\\\[图片上传失败...(image-3bb04f-1552714113658)]\n引用\n 语法：** '>'+'空格'+'文本' **\n \n例如：\n Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。\n \n代码\n如下是代码段的语法：\n<pre> ```编程语言  这是代码段 ``` </pre>\n例如：\ndef bubbleSort(alist):\n for passnum in range(len(alist)-1,0,-1):\n #print alist,passnum\n for i in range(passnum):\n if alist[i]>alist[i+1]:\n temp = alist[i]\n alist[i] = alist[i+1]\n alist[i+1] = temp\n return alist\n表格\nMarkdown　Extra　表格语法：\n  项目价格   iPhone$560 iPad$780 iMac$1000  \n可以使用冒号来定义对齐方式：\n| 项目 | 价格 | 数量 | | :-------- | --------:| :--: | | iPhone | 6000 元 | 5 | | iPad | 3800 元 | 12 | | iMac | 10000 元 | 234 |\n结语\n以上是最常见的 Markdown 的语法和格式，如果你还希望深入的学习 Markdown，可以参考这里Markdown语法，非常感谢使用** 掘金－Markdown 编辑器**,希望为您提供舒适的写作体验。\n原文请访问 https://snowdreams1006.github.io/markdown/juejin.html\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n掘金入门指南\n用掘金－Markdown 编辑器写文章\n欢迎使用 掘金－Markdown 编辑器撰写技术文章，只专注于内容和技术，不再费心排版的问题。这是一份简...","summary":"欢迎使用 掘金－Markdown 编辑器撰写技术文章，只专注于内容和技术，不再费心排版的问题。这是一份简要的 Markdown 引导指南，希望可以帮助您顺利的开...","abstract":"欢迎使用 掘金－Markdown 编辑器撰写技术文章，只专注于内容和技术，不再费心排版的问题。这是一份简要的 Markdown 引导指南，希望可以帮助您顺利的开...","description":"","picture":"","coverImageUrl":"","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/16 14:57"},"authorId":2952369,"columnId":75668,"writeTime":1554276128,"updateTime":1554276128,"viewCount":82,"likeCount":4,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10757,"tagName":"Markdown"},{"tagId":10158,"tagName":"iPhone"},{"tagId":10151,"tagName":"iOS"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2699,"type":40,"actionInfo":{"articleId":1409906,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554276116,"detail":{"id":1409906,"articleId":1409906,"title":"markdown 快速入门\n                                                                            原","content":"entityMap|0|type|HR|mutability|IMMUTABLE|data|1|2|IMAGE|imageUrl|https://ask.qcloudimg.com/http-save/yehe-2952369/hgfkufgocb.png|imageAlt|preview.png|3|LINK|MUTABLE|url|https://my.oschina.net/%25E8%25B6%2585%25E9%2593%25BE%25E6%258E%25A5url|4|https://snowdreams1006.github.io/|5|https://github.com/snowdreams1006/snowdreams1006.github.io|blocks|key|bp9f4|text|unstyled|depth|inlineStyleRanges|entityRanges|c0j6v|markdown+不止是+HTML+的简化版,更重要的是+txt+的升级版,word+的轻量版,是笔记的最佳载体.|offset|length|style|CODE|ba9ad|markdown+作为一种简单的格式标记语言,不同于+txt+的无格式,不同于+HTML+的复杂标记,也不同于+word+的鼠标调整样式.+markdown+通过简单的几个字符键入,就可以快捷的定义文档的样式.|7iaa8|掌握+markdown,你可以完全抛弃+txt+和笔记软件的编辑器,并且在大多数场景下替代掉复杂臃肿的+word.享受简洁之美、享受效率提升.|ej6hk|下面列举了+markdown+语法及对应的示例：|3v949|标题|header-two|bor1c|在标题文字前面加#,并且加上空格分割.+一个#是一级标题,两个#是两级标题,以此类推,最多支持六级标题.|8ralm|示例:|1ms9u|#+标题1\n##+标题2\n###+标题3\n####+标题4\n#####+标题5\n######+标题6|code-block|syntax|javascript|b01o2|效果:|2q9kn|标题1|header-one|a21e0|标题2|1jrov|标题3|header-three|2ajtt|标题4|header-four|ct0l9|标题5|header-five|6gl6t|标题6|header-six|23sph|列表|291ng|包括有序列表和无序列表,支持列表嵌套.|gsta|有序列表|7a7k6|有序列表就是有顺序的列表,依靠行前的数字加.标记顺序,序号和内容之间以空格分开.|et5f1|6impl|1.+有序列表1+\n2.+有序列表2+\n3.+有序列表3+|fl2ki|3vgvb|有序列表1|ordered-list-item|74jh4|有序列表2|6hvli|有序列表3|4veu8|无序列表|2krqc|无序列表就是列表不排序,支持-+*+%2B+3种前缀,可用于表示1级列表,2级列表,3级列表.|fo2lt|8fkda|-+无序列表1+\n*+无序列表2+\n%2B+无序列表3+|9madj|3gms6|无序列表1|unordered-list-item|5tlaj|无序列表2|2mk8i|无序列表3|5brbg|列表嵌套|7qvb8|上一级和下一级列表之间空两个空格即可表示列表嵌套.|9ssar|3la5p|-+无序列表1\n++*+无序列表11\n++*+无序列表12\n++*+无序列表13\n++++%2B+无序列表131\n++++%2B+无序列表132\n++++%2B+无序列表133\n-+无序列表2\n-+无序列表3+|fo2r4|8eor6|无序列表1+|4rddm|无序列表11|38npn|无序列表12|7thea|无序列表13+|svls|无序列表131|4cnvs|无序列表132|1dt1k|无序列表133|cjdnf|fa4rm|6vc3u|引用|33ssj|在引用文字前加一个>即可,支持引用嵌套.|2as38|4q01q|>+引用1\n>>+引用11+\n>>>+引用111|8sf0r|286u5|+引用1\n++引用11\n++引用111\n+\n+\n+|blockquote|2u8kd|字体|9gn8b|粗体|4m4qh|要加粗的文字左右两边分别用两个+*+号或者+_+号包围起来|1pes9|斜体|c8b4p|要倾斜的文字左右两边分别用一个+*+号或者+_+号包围起来|55daf|粗体%2B斜体|1a7rn|要加粗并倾斜的文字左右两边分别用三个+*+号或者+_+号包围起来|6mcms|删除线|2tspm|要删除的文字左右两边分别用两个+~+号包围起来|egqof|36a3t|**粗体1**++__粗体2__\n\n*斜体1*++_斜体2_\n\n***粗体%2B斜体1***++___粗体%2B斜体2___\n\n~~删除线~~|35m3n|55sfo|粗体1+粗体2|BOLD|agr47|斜体1+斜体2|ITALIC|auskc|粗体%2B斜体1+粗体%2B斜体2|7rn88|STRIKETHROUGH|48om7|分割线|3a6d4|三个或三个以上的-+*即可表示分割线|eu8kj|41sfn|---\n***|f7okk|cjnlc|----|atomic|b9s2p|5c4du|图片|7jrp3|[图片上传失败...(image-afd14f-1551791954733)]|7jm4e|其中,图片alt表示图片的解释文字,图片src是图片地址,支持本地路径和网络路径,图片title是图片的标题,可选.|43q7a|erqpf|![preview.png](images/preview.png+\"preview.png\")|c1bt2|32vdg|?|cfvet|超链接|a34lf|超链接text|7uo8m|其中,超链接text表示超链接的解释文字,超链接url支持本地路径和网络路径,超链接title是超链接的标题,可选.|ssfh|a6b0n|[https://snowdreams1006.github.io](https://snowdreams1006.github.io+\"snowdreams1006\")|4p8rt|70o4r|https://snowdreams1006.github.io|12d20|表格|en59f|第一行定义表头,单元格内定义标题;|9mf02|第二行定义样式,单元格内部至少一个-,文字默认居左对齐,单元格内部-两侧均加:表示居中,只有右侧加:表示居右对齐;|qcp8|第三行定义数据;|cbvd6|9tgd6|%7C默认居左%7C文字居中%7C文字居右%7C\n%7C-%7C:-:%7C-:%7C\n%7C居左对齐1%7C居中对齐1%7C居右对齐1%7C\n%7C居左对齐2%7C居中对齐2%7C居右对齐2%7C\n%7C居左对齐3%7C居中对齐3%7C居右对齐3%7C|3r3lu|709pj|%7C默认居左%7C文字居中%7C文字居右%7C+%7C-%7C:-:%7C-:%7C+%7C居左对齐1%7C居中对齐1%7C居右对齐1%7C+%7C居左对齐2%7C居中对齐2%7C居右对齐2%7C+%7C居左对齐3%7C居中对齐3%7C居右对齐3%7C|46ouc|代码|26mq0|单行代码|9il6v|代码两侧分别用一个反引号包围起来|avpl0|9gr8r|`code`|em6hr|ar3f3|code|boflv|多行代码|5aami|代码块首尾分别用三个反引号包围起来,且两边的反引号独占一行|fubp|4ukk4|(```)\n+++function+fun(){\n+++++echo+\"这是一句非常牛逼的代码\";\n+++}\n+++fun();\n(```)|dnq67|+注：为了防止转译,前后三个反引号处加了小括号,实际是没有的.\n+|d4oak|3smf8|function+fun(){\n++echo+\"这是一句非常牛逼的代码\";\n}\nfun();|4i7r9|注释|7129e|dn7fd|<!--注释-->+|ct5gk|djbjb|<!--注释-->+看不到***注释***就对了!|9uiqt|都学会了吗?|6h7o|那考考你,你猜当前文档是如何书写的,看看你的答案和我实际书写规则是否一致呢!|1asun|+答案请参考snowdreams1006.github.io\n+|avbcn|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|8|D|4|T|3|12|4|0|0|8|R|3|14|4|1K|4|1Y|8|0|3|8|K|3|1G|4|0|6|8|0|0|8|1|M|1|V|1|0|0|0|0|0|0|0|0|0|0|0|0|0|L|1|0|0|0|0|0|0|0|0|E|1|G|1|I|1|0|0|0|0|0|0|0|0|0|0|0|0|1|1|1|2|2|2|0|0|0|0|9|1|0|0|0|0|0|0|0|G|1|M|1|0|0|G|1|M|1|0|0|J|1|P|1|0|0|G|1|0|0|0|0|0|3|4|3|0|0|3|4|3|0|0|6|7|6|0|6|7|6|0|0|3|0|0|8|1|A|1|0|0|0|0|0|4|0|0|0|4|1|0|0|0|0|0|0|0|0|1|2|0|0|0|7|3|0|0|0|0|0|0|W|4|0|0|0|H|1|X|1|12|1|1D|1|0|0|0|0|0|0|0|0|0|0|0|0|0|4|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|6|O|5|0^^$0|$1|$2|3|4|5|6|$]]|7|$2|3|4|5|6|$]]|8|$2|9|4|5|6|$A|B|C|D]]|E|$2|F|4|G|6|$H|I]]|J|$2|F|4|G|6|$H|K]]|L|$2|F|4|G|6|$H|M]]]|N|@$O|P|Q|-4|2|R|S|7D|T|@]|U|@]|6|$]]|$O|V|Q|W|2|R|S|7E|T|@$X|7F|Y|7G|Z|10]|$X|7H|Y|7I|Z|10]|$X|7J|Y|7K|Z|10]|$X|7L|Y|7M|Z|10]]|U|@]|6|$]]|$O|11|Q|12|2|R|S|7N|T|@$X|7O|Y|7P|Z|10]|$X|7Q|Y|7R|Z|10]|$X|7S|Y|7T|Z|10]|$X|7U|Y|7V|Z|10]|$X|7W|Y|7X|Z|10]]|U|@]|6|$]]|$O|13|Q|14|2|R|S|7Y|T|@$X|7Z|Y|80|Z|10]|$X|81|Y|82|Z|10]|$X|83|Y|84|Z|10]]|U|@]|6|$]]|$O|15|Q|16|2|R|S|85|T|@$X|86|Y|87|Z|10]]|U|@]|6|$]]|$O|17|Q|18|2|19|S|88|T|@]|U|@]|6|$]]|$O|1A|Q|1B|2|R|S|89|T|@$X|8A|Y|8B|Z|10]|$X|8C|Y|8D|Z|10]|$X|8E|Y|8F|Z|10]]|U|@]|6|$]]|$O|1C|Q|1D|2|R|S|8G|T|@]|U|@]|6|$]]|$O|1E|Q|1F|2|1G|S|8H|T|@]|U|@]|6|$1H|1I]]|$O|1J|Q|1K|2|R|S|8I|T|@]|U|@]|6|$]]|$O|1L|Q|1M|2|1N|S|8J|T|@]|U|@]|6|$]]|$O|1O|Q|1P|2|19|S|8K|T|@]|U|@]|6|$]]|$O|1Q|Q|1R|2|1S|S|8L|T|@]|U|@]|6|$]]|$O|1T|Q|1U|2|1V|S|8M|T|@]|U|@]|6|$]]|$O|1W|Q|1X|2|1Y|S|8N|T|@]|U|@]|6|$]]|$O|1Z|Q|20|2|21|S|8O|T|@]|U|@]|6|$]]|$O|22|Q|23|2|19|S|8P|T|@]|U|@]|6|$]]|$O|24|Q|25|2|R|S|8Q|T|@]|U|@]|6|$]]|$O|26|Q|27|2|1S|S|8R|T|@]|U|@]|6|$]]|$O|28|Q|29|2|R|S|8S|T|@$X|8T|Y|8U|Z|10]]|U|@]|6|$]]|$O|2A|Q|1D|2|R|S|8V|T|@]|U|@]|6|$]]|$O|2B|Q|2C|2|1G|S|8W|T|@]|U|@]|6|$1H|1I]]|$O|2D|Q|1K|2|R|S|8X|T|@]|U|@]|6|$]]|$O|2E|Q|2F|2|2G|S|8Y|T|@]|U|@]|6|$]]|$O|2H|Q|2I|2|2G|S|8Z|T|@]|U|@]|6|$]]|$O|2J|Q|2K|2|2G|S|90|T|@]|U|@]|6|$]]|$O|2L|Q|2M|2|1S|S|91|T|@]|U|@]|6|$]]|$O|2N|Q|2O|2|R|S|92|T|@$X|93|Y|94|Z|10]|$X|95|Y|96|Z|10]|$X|97|Y|98|Z|10]]|U|@]|6|$]]|$O|2P|Q|1D|2|R|S|99|T|@]|U|@]|6|$]]|$O|2Q|Q|2R|2|1G|S|9A|T|@]|U|@]|6|$1H|1I]]|$O|2S|Q|1K|2|R|S|9B|T|@]|U|@]|6|$]]|$O|2T|Q|2U|2|2V|S|9C|T|@]|U|@]|6|$]]|$O|2W|Q|2X|2|2V|S|9D|T|@]|U|@]|6|$]]|$O|2Y|Q|2Z|2|2V|S|9E|T|@]|U|@]|6|$]]|$O|30|Q|31|2|1S|S|9F|T|@]|U|@]|6|$]]|$O|32|Q|33|2|R|S|9G|T|@]|U|@]|6|$]]|$O|34|Q|1D|2|R|S|9H|T|@]|U|@]|6|$]]|$O|35|Q|36|2|1G|S|9I|T|@]|U|@]|6|$1H|1I]]|$O|37|Q|1K|2|R|S|9J|T|@]|U|@]|6|$]]|$O|38|Q|39|2|2V|S|9K|T|@]|U|@]|6|$]]|$O|3A|Q|3B|2|2V|S|9L|T|@]|U|@]|6|$]]|$O|3C|Q|3D|2|2V|S|9M|T|@]|U|@]|6|$]]|$O|3E|Q|3F|2|2V|S|9N|T|@]|U|@]|6|$]]|$O|3G|Q|3H|2|2V|S|9O|T|@]|U|@]|6|$]]|$O|3I|Q|3J|2|2V|S|9P|T|@]|U|@]|6|$]]|$O|3K|Q|3L|2|2V|S|9Q|T|@]|U|@]|6|$]]|$O|3M|Q|2X|2|2V|S|9R|T|@]|U|@]|6|$]]|$O|3N|Q|2Z|2|2V|S|9S|T|@]|U|@]|6|$]]|$O|3O|Q|3P|2|19|S|9T|T|@]|U|@]|6|$]]|$O|3Q|Q|3R|2|R|S|9U|T|@$X|9V|Y|9W|Z|10]]|U|@]|6|$]]|$O|3S|Q|1D|2|R|S|9X|T|@]|U|@]|6|$]]|$O|3T|Q|3U|2|1G|S|9Y|T|@]|U|@]|6|$1H|1I]]|$O|3V|Q|1K|2|R|S|9Z|T|@]|U|@]|6|$]]|$O|3W|Q|3X|2|3Y|S|A0|T|@]|U|@]|6|$]]|$O|3Z|Q|40|2|19|S|A1|T|@]|U|@]|6|$]]|$O|41|Q|42|2|1S|S|A2|T|@]|U|@]|6|$]]|$O|43|Q|44|2|R|S|A3|T|@$X|A4|Y|A5|Z|10]|$X|A6|Y|A7|Z|10]]|U|@]|6|$]]|$O|45|Q|46|2|1S|S|A8|T|@]|U|@]|6|$]]|$O|47|Q|48|2|R|S|A9|T|@$X|AA|Y|AB|Z|10]|$X|AC|Y|AD|Z|10]]|U|@]|6|$]]|$O|49|Q|4A|2|1S|S|AE|T|@]|U|@]|6|$]]|$O|4B|Q|4C|2|R|S|AF|T|@$X|AG|Y|AH|Z|10]|$X|AI|Y|AJ|Z|10]]|U|@]|6|$]]|$O|4D|Q|4E|2|1S|S|AK|T|@]|U|@]|6|$]]|$O|4F|Q|4G|2|R|S|AL|T|@$X|AM|Y|AN|Z|10]]|U|@]|6|$]]|$O|4H|Q|1D|2|R|S|AO|T|@]|U|@]|6|$]]|$O|4I|Q|4J|2|1G|S|AP|T|@]|U|@]|6|$1H|1I]]|$O|4K|Q|1K|2|R|S|AQ|T|@]|U|@]|6|$]]|$O|4L|Q|4M|2|R|S|AR|T|@$X|AS|Y|AT|Z|4N]|$X|AU|Y|AV|Z|4N]]|U|@]|6|$]]|$O|4O|Q|4P|2|R|S|AW|T|@$X|AX|Y|AY|Z|4Q]|$X|AZ|Y|B0|Z|4Q]]|U|@]|6|$]]|$O|4R|Q|4S|2|R|S|B1|T|@$X|B2|Y|B3|Z|4N]|$X|B4|Y|B5|Z|4N]|$X|B6|Y|B7|Z|4Q]|$X|B8|Y|B9|Z|4Q]]|U|@]|6|$]]|$O|4T|Q|4E|2|R|S|BA|T|@$X|BB|Y|BC|Z|4U]]|U|@]|6|$]]|$O|4V|Q|4W|2|19|S|BD|T|@]|U|@]|6|$]]|$O|4X|Q|4Y|2|R|S|BE|T|@$X|BF|Y|BG|Z|10]|$X|BH|Y|BI|Z|10]]|U|@]|6|$]]|$O|4Z|Q|1D|2|R|S|BJ|T|@]|U|@]|6|$]]|$O|50|Q|51|2|1G|S|BK|T|@]|U|@]|6|$1H|1I]]|$O|52|Q|1K|2|R|S|BL|T|@]|U|@]|6|$]]|$O|53|Q|54|2|55|S|BM|T|@]|U|@$X|BN|Y|BO|O|BP]]|6|$]]|$O|56|Q|54|2|55|S|BQ|T|@]|U|@$X|BR|Y|BS|O|BT]]|6|$]]|$O|57|Q|58|2|19|S|BU|T|@]|U|@]|6|$]]|$O|59|Q|5A|2|R|S|BV|T|@]|U|@]|6|$]]|$O|5B|Q|5C|2|R|S|BW|T|@]|U|@]|6|$]]|$O|5D|Q|1D|2|R|S|BX|T|@]|U|@]|6|$]]|$O|5E|Q|5F|2|1G|S|BY|T|@]|U|@]|6|$1H|1I]]|$O|5G|Q|1K|2|R|S|BZ|T|@]|U|@]|6|$]]|$O|5H|Q|5I|2|55|S|C0|T|@]|U|@$X|C1|Y|C2|O|C3]]|6|$]]|$O|5J|Q|5K|2|19|S|C4|T|@]|U|@]|6|$]]|$O|5L|Q|5M|2|R|S|C5|T|@]|U|@$X|C6|Y|C7|O|C8]]|6|$]]|$O|5N|Q|5O|2|R|S|C9|T|@]|U|@]|6|$]]|$O|5P|Q|1D|2|R|S|CA|T|@]|U|@]|6|$]]|$O|5Q|Q|5R|2|1G|S|CB|T|@]|U|@]|6|$1H|1I]]|$O|5S|Q|1K|2|R|S|CC|T|@]|U|@]|6|$]]|$O|5T|Q|5U|2|R|S|CD|T|@]|U|@$X|CE|Y|CF|O|CG]]|6|$]]|$O|5V|Q|5W|2|19|S|CH|T|@]|U|@]|6|$]]|$O|5X|Q|5Y|2|2V|S|CI|T|@]|U|@]|6|$]]|$O|5Z|Q|60|2|2V|S|CJ|T|@$X|CK|Y|CL|Z|10]|$X|CM|Y|CN|Z|10]|$X|CO|Y|CP|Z|10]|$X|CQ|Y|CR|Z|10]]|U|@]|6|$]]|$O|61|Q|62|2|2V|S|CS|T|@]|U|@]|6|$]]|$O|63|Q|1D|2|R|S|CT|T|@]|U|@]|6|$]]|$O|64|Q|65|2|1G|S|CU|T|@]|U|@]|6|$1H|1I]]|$O|66|Q|1K|2|R|S|CV|T|@]|U|@]|6|$]]|$O|67|Q|68|2|R|S|CW|T|@]|U|@]|6|$]]|$O|69|Q|6A|2|19|S|CX|T|@]|U|@]|6|$]]|$O|6B|Q|6C|2|1S|S|CY|T|@]|U|@]|6|$]]|$O|6D|Q|6E|2|R|S|CZ|T|@]|U|@]|6|$]]|$O|6F|Q|1D|2|R|S|D0|T|@]|U|@]|6|$]]|$O|6G|Q|6H|2|1G|S|D1|T|@]|U|@]|6|$1H|1I]]|$O|6I|Q|1K|2|R|S|D2|T|@]|U|@]|6|$]]|$O|6J|Q|6K|2|R|S|D3|T|@$X|D4|Y|D5|Z|10]]|U|@]|6|$]]|$O|6L|Q|6M|2|1S|S|D6|T|@]|U|@]|6|$]]|$O|6N|Q|6O|2|R|S|D7|T|@]|U|@]|6|$]]|$O|6P|Q|1D|2|R|S|D8|T|@]|U|@]|6|$]]|$O|6Q|Q|6R|2|1G|S|D9|T|@]|U|@]|6|$1H|1I]]|$O|6S|Q|6T|2|3Y|S|DA|T|@]|U|@]|6|$]]|$O|6U|Q|1K|2|R|S|DB|T|@]|U|@]|6|$]]|$O|6V|Q|6W|2|1G|S|DC|T|@]|U|@]|6|$1H|1I]]|$O|6X|Q|6Y|2|19|S|DD|T|@]|U|@]|6|$]]|$O|6Z|Q|1D|2|R|S|DE|T|@]|U|@]|6|$]]|$O|70|Q|71|2|1G|S|DF|T|@]|U|@]|6|$1H|1I]]|$O|72|Q|1K|2|R|S|DG|T|@]|U|@]|6|$]]|$O|73|Q|74|2|R|S|DH|T|@]|U|@]|6|$]]|$O|75|Q|76|2|R|S|DI|T|@]|U|@]|6|$]]|$O|77|Q|78|2|R|S|DJ|T|@]|U|@]|6|$]]|$O|79|Q|7A|2|3Y|S|DK|T|@]|U|@$X|DL|Y|DM|O|DN]]|6|$]]|$O|7B|Q|7C|2|R|S|DO|T|@]|U|@]|6|$]]]]","plain":"\nmarkdown 不止是 HTML 的简化版,更重要的是 txt 的升级版,word 的轻量版,是笔记的最佳载体.\nmarkdown 作为一种简单的格式标记语言,不同于 txt 的无格式,不同于 HTML 的复杂标记,也不同于 word 的鼠标调整样式. markdown 通过简单的几个字符键入,就可以快捷的定义文档的样式.\n掌握 markdown,你可以完全抛弃 txt 和笔记软件的编辑器,并且在大多数场景下替代掉复杂臃肿的 word.享受简洁之美、享受效率提升.\n下面列举了 markdown 语法及对应的示例：\n标题\n在标题文字前面加#,并且加上空格分割. 一个#是一级标题,两个#是两级标题,以此类推,最多支持六级标题.\n示例:\n# 标题1\n## 标题2\n### 标题3\n#### 标题4\n##### 标题5\n###### 标题6\n效果:\n标题1\n标题2\n标题3\n标题4\n标题5\n标题6\n列表\n包括有序列表和无序列表,支持列表嵌套.\n有序列表\n有序列表就是有顺序的列表,依靠行前的数字加.标记顺序,序号和内容之间以空格分开.\n示例:\n1. 有序列表1 \n2. 有序列表2 \n3. 有序列表3 \n效果:\n有序列表1\n有序列表2\n有序列表3\n无序列表\n无序列表就是列表不排序,支持- * + 3种前缀,可用于表示1级列表,2级列表,3级列表.\n示例:\n- 无序列表1 \n* 无序列表2 \n+ 无序列表3 \n效果:\n无序列表1\n无序列表2\n无序列表3\n列表嵌套\n上一级和下一级列表之间空两个空格即可表示列表嵌套.\n示例:\n- 无序列表1\n  * 无序列表11\n  * 无序列表12\n  * 无序列表13\n    + 无序列表131\n    + 无序列表132\n    + 无序列表133\n- 无序列表2\n- 无序列表3 \n效果:\n无序列表1 \n无序列表11\n无序列表12\n无序列表13 \n无序列表131\n无序列表132\n无序列表133\n无序列表2\n无序列表3\n引用\n在引用文字前加一个>即可,支持引用嵌套.\n示例:\n> 引用1\n>> 引用11 \n>>> 引用111\n效果:\n 引用1\n  引用11\n  引用111\n \n \n \n字体\n粗体\n要加粗的文字左右两边分别用两个 * 号或者 _ 号包围起来\n斜体\n要倾斜的文字左右两边分别用一个 * 号或者 _ 号包围起来\n粗体+斜体\n要加粗并倾斜的文字左右两边分别用三个 * 号或者 _ 号包围起来\n删除线\n要删除的文字左右两边分别用两个 ~ 号包围起来\n示例:\n**粗体1**  __粗体2__\n\n*斜体1*  _斜体2_\n\n***粗体+斜体1***  ___粗体+斜体2___\n\n~~删除线~~\n效果:\n粗体1 粗体2\n斜体1 斜体2\n粗体+斜体1 粗体+斜体2\n删除线\n分割线\n三个或三个以上的- *即可表示分割线\n示例:\n---\n***\n效果:\n----\n----\n图片\n[图片上传失败...(image-afd14f-1551791954733)]\n其中,图片alt表示图片的解释文字,图片src是图片地址,支持本地路径和网络路径,图片title是图片的标题,可选.\n示例:\n![preview.png](images/preview.png \"preview.png\")\n效果:\n?\n超链接\n超链接text\n其中,超链接text表示超链接的解释文字,超链接url支持本地路径和网络路径,超链接title是超链接的标题,可选.\n示例:\n[https://snowdreams1006.github.io](https://snowdreams1006.github.io \"snowdreams1006\")\n效果:\nhttps://snowdreams1006.github.io\n表格\n第一行定义表头,单元格内定义标题;\n第二行定义样式,单元格内部至少一个-,文字默认居左对齐,单元格内部-两侧均加:表示居中,只有右侧加:表示居右对齐;\n第三行定义数据;\n示例:\n|默认居左|文字居中|文字居右|\n|-|:-:|-:|\n|居左对齐1|居中对齐1|居右对齐1|\n|居左对齐2|居中对齐2|居右对齐2|\n|居左对齐3|居中对齐3|居右对齐3|\n效果:\n|默认居左|文字居中|文字居右| |-|:-:|-:| |居左对齐1|居中对齐1|居右对齐1| |居左对齐2|居中对齐2|居右对齐2| |居左对齐3|居中对齐3|居右对齐3|\n代码\n单行代码\n代码两侧分别用一个反引号包围起来\n示例:\n`code`\n效果:\ncode\n多行代码\n代码块首尾分别用三个反引号包围起来,且两边的反引号独占一行\n示例:\n(```)\n   function fun(){\n     echo \"这是一句非常牛逼的代码\";\n   }\n   fun();\n(```)\n 注：为了防止转译,前后三个反引号处加了小括号,实际是没有的.\n \n效果:\nfunction fun(){\n  echo \"这是一句非常牛逼的代码\";\n}\nfun();\n注释\n示例:\n<!--注释--> \n效果:\n<!--注释--> 看不到***注释***就对了!\n都学会了吗?\n那考考你,你猜当前文档是如何书写的,看看你的答案和我实际书写规则是否一致呢!\n 答案请参考snowdreams1006.github.io\n \n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\nmarkdown 不止是 HTML 的简化版,更重要的是 txt 的升级版,word 的轻量版,是笔记的最佳载体.\nmarkdown 作为一种简单的格式标记语...","summary":"markdown 不止是 HTML 的简化版,更重要的是 txt 的升级版,word 的轻量版,是笔记的最佳载体.","abstract":"markdown 不止是 HTML 的简化版,更重要的是 txt 的升级版,word 的轻量版,是笔记的最佳载体.","description":"","picture":"https://ask.qcloudimg.com/http-save/yehe-2952369/hgfkufgocb.png","coverImageUrl":"https://ask.qcloudimg.com/http-save/yehe-2952369/hgfkufgocb.png","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/16 14:32"},"authorId":2952369,"columnId":75668,"writeTime":1554276116,"updateTime":1554276116,"viewCount":57,"likeCount":3,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10757,"tagName":"Markdown"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2698,"type":40,"actionInfo":{"articleId":1409905,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554276104,"detail":{"id":1409905,"articleId":1409905,"title":"gitbook 入门教程之环境要求\n                                                                            原","content":"entityMap|0|type|LINK|mutability|MUTABLE|data|url|https://snowdreams1006.github.io/git/base/about.html|1|https://nodejs.org/en/|2|https://legacy.gitbook.com/editor|3|IMAGE|IMMUTABLE|imageUrl|https://ask.qcloudimg.com/http-save/yehe-2952369/j32e4lfiuh.png|imageAlt|gitbook-editor-preview.png|4|blocks|key|bkqnu|text|unstyled|depth|inlineStyleRanges|entityRanges|4rr9b|gitbook+是基于+node.js+的命令行工具,首先需要安装并配置好+node.js+环境,然后才能安装gitbook+相关工具.|offset|length|style|CODE|amhco|由于安装工具全部都是国外网站,因此速度可能会很慢,也可能需要FQ,请耐心等待或者学会科学上网.|e0cge|+当然如果安装过程中遇到任何问题,也可以找我要一下安装包或者我帮你免费解决下.\n+|blockquote|412n6|环境预检查|header-two|aotfa|检查+git+环境[可选]|header-three|8ol6m|git+是免费开源的分布式版本控制系统,主要用于电子书的更新管理和团队协作,如果不需要将电子书托管到github+网站上,则可以不安装+git+.|3k6li|如果打印出+git+版本信息,则表示本机已安装+git+环境,跳过此步骤.|cs9jc|$+git+--version|code-block|syntax|javascript|9ja8u|+git+安装配置教程请参考初识+git\n+|9f4h1|检查+node.js+环境[必须]|7d0v6|node.js+是+js+在服务端运行的环境基础,从而使得+js+从浏览器端延伸到服务端领域,而+gitbook+则是运行在+node.js+基础之上的命令行工具,因此必须先安装好+node.js+开发环境.|6j4kb|如果打印出+node.js+版本信息,则表示本机已安装+node.js+环境,跳过此步骤.|1k0mo|$+node+-v|5116i|+node.js+安装配置教程请参考+https://nodejs.org/\n+|fq417|检查+gitbook+环境[必须]|ddeb0|gitbook-cli+是+gitbook+的脚手架工具,帮助我们更方便构建+gitbook+应用,当然也可以直接安装+gitbook+,只不过那样的话,略显麻烦,不推荐.|fserb|如果打印出+gitbook+和+cli+版本信息,则表示本机已安装+gitbook+环境,跳过此步骤.|15o0|$+gitbook+-V|5ih9p|否则的话,本机可能并没有安装+gitbook+环境,则需要安装+gitbook+相关工具.|635ho|因为+gitbook+是基于+node.js+环境,而安装好+node.js+后默认提供了+npm+包管理工具,而我们则是通过+npm+来安装其他工具.|ffig9|安装+gitbook-cli+工具[必须]|header-four|7vo1t|假设你已经搭建好+node.js+环境,现在我们开始安装+gitbook+相关工具了!|7hjnl|$+sudo+npm+install+-g+gitbook-cli|bo6jp|+全局安装的话,可能需要超级管理员权限,输入下相应密码即可继续安装,如无报错,则表示安装成功.\n+|da3p2|安装成功后会带有+gitbook+命令,现在再次运行下+gitbook+-V+查看版本信息.|ea5of|#+打印出+`CLI`+和+`GitBook`+版本信息即可,安装版本可能已经大于+`2.3.2`\n$+gitbook+-V\nCLI+version:+2.3.2\nGitBook+version:+3.2.3\n$+|9lifr|安装+GitBook+Editor+编辑器[可选]|d443r|gitbook+官方客户端编辑器,支持+windows,+mac+和+linux+,主要用于可视化编辑文档,组织文档结构.|5i700|下载相应平台的+GitBook+Editor,正常安装即可.|7nsqb|?|atomic|6c3b1|gitbook+的使用方法大致可以有三种,而+GitBook+Editor+编辑器只是其中一种,所以这一步是可选的.|29bi1|使用+gitbook-cli+脚手架提供的各种命令直接在命令行管理+gitbook,适合一定编程经验的软件从业人员.|unordered-list-item|2hn3k|使用+GitBook+Editor+编辑器管理+gitbook+,适合无任何编程的文学创作者.|b29a3|使用+gitbook.com+官网在线管理+gitbook+,适合不具备本地开发环境的萌新体验者.|328s9|小结|fv2dg|gitbook+基于+node.js+开发环境,因此首先要安装好+nodejs+环境,其次再使用+node.js+提供的+npm+包管理工具来安装+gitbook.|5bduh|只需运行+sudo+npm+install+-g+gitbook-cli+即可安装,接着运行+gitbook+-V+查看安装版本信息确认已经安装成功.|2c0cb|至此+gitbook+的必要开发环境已经准备妥当,接下来让我们赶紧体验一下+gitbook+的魅力吧!|c0o72|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|7|C|7|12|7|1J|7|0|0|0|0|3|3|0|0|3|1E|6|1W|3|0|6|3|O|3|0|0|1|3|E|6|0|0|3|7|0|0|7|A|2|U|2|1D|7|1R|7|2J|7|0|6|7|S|7|0|0|1|7|J|J|1|0|3|7|0|0|B|E|7|13|7|1O|7|0|6|7|G|3|Y|7|0|0|F|7|W|7|0|3|7|F|7|V|7|1A|3|1S|3|0|3|B|0|9|7|T|7|0|0|0|9|7|S|A|0|0|3|E|0|0|7|K|7|T|3|Z|5|0|8|E|2|0|0|1|3|0|0|7|N|E|0|3|B|Y|7|0|3|E|O|7|0|3|B|M|7|0|0|0|7|B|7|1D|7|1P|3|22|7|X|6|4|0|5|V|1B|A|0|3|7|12|7|0^^$0|$1|$2|3|4|5|6|$7|8]]|9|$2|3|4|5|6|$7|A]]|B|$2|3|4|5|6|$7|C]]|D|$2|E|4|F|6|$G|H|I|J]]|K|$2|3|4|5|6|$7|A]]]|L|@$M|N|O|-4|2|P|Q|3C|R|@]|S|@]|6|$]]|$M|T|O|U|2|P|Q|3D|R|@$V|3E|W|3F|X|Y]|$V|3G|W|3H|X|Y]|$V|3I|W|3J|X|Y]|$V|3K|W|3L|X|Y]]|S|@]|6|$]]|$M|Z|O|10|2|P|Q|3M|R|@]|S|@]|6|$]]|$M|11|O|12|2|13|Q|3N|R|@]|S|@]|6|$]]|$M|14|O|15|2|16|Q|3O|R|@]|S|@]|6|$]]|$M|17|O|18|2|19|Q|3P|R|@$V|3Q|W|3R|X|Y]]|S|@]|6|$]]|$M|1A|O|1B|2|P|Q|3S|R|@$V|3T|W|3U|X|Y]|$V|3V|W|3W|X|Y]|$V|3X|W|3Y|X|Y]]|S|@]|6|$]]|$M|1C|O|1D|2|P|Q|3Z|R|@$V|40|W|41|X|Y]|$V|42|W|43|X|Y]]|S|@]|6|$]]|$M|1E|O|1F|2|1G|Q|44|R|@]|S|@]|6|$1H|1I]]|$M|1J|O|1K|2|13|Q|45|R|@$V|46|W|47|X|Y]]|S|@$V|48|W|49|M|4A]]|6|$]]|$M|1L|O|1M|2|19|Q|4B|R|@$V|4C|W|4D|X|Y]]|S|@]|6|$]]|$M|1N|O|1O|2|P|Q|4E|R|@$V|4F|W|4G|X|Y]|$V|4H|W|4I|X|Y]|$V|4J|W|4K|X|Y]|$V|4L|W|4M|X|Y]|$V|4N|W|4O|X|Y]|$V|4P|W|4Q|X|Y]]|S|@]|6|$]]|$M|1P|O|1Q|2|P|Q|4R|R|@$V|4S|W|4T|X|Y]|$V|4U|W|4V|X|Y]]|S|@]|6|$]]|$M|1R|O|1S|2|1G|Q|4W|R|@]|S|@]|6|$1H|1I]]|$M|1T|O|1U|2|13|Q|4X|R|@$V|4Y|W|4Z|X|Y]]|S|@$V|50|W|51|M|52]]|6|$]]|$M|1V|O|1W|2|19|Q|53|R|@$V|54|W|55|X|Y]]|S|@]|6|$]]|$M|1X|O|1Y|2|P|Q|56|R|@$V|57|W|58|X|Y]|$V|59|W|5A|X|Y]|$V|5B|W|5C|X|Y]|$V|5D|W|5E|X|Y]]|S|@]|6|$]]|$M|1Z|O|20|2|P|Q|5F|R|@$V|5G|W|5H|X|Y]|$V|5I|W|5J|X|Y]|$V|5K|W|5L|X|Y]]|S|@]|6|$]]|$M|21|O|22|2|1G|Q|5M|R|@]|S|@]|6|$1H|1I]]|$M|23|O|24|2|P|Q|5N|R|@$V|5O|W|5P|X|Y]|$V|5Q|W|5R|X|Y]]|S|@]|6|$]]|$M|25|O|26|2|P|Q|5S|R|@$V|5T|W|5U|X|Y]|$V|5V|W|5W|X|Y]|$V|5X|W|5Y|X|Y]|$V|5Z|W|60|X|Y]|$V|61|W|62|X|Y]]|S|@]|6|$]]|$M|27|O|28|2|29|Q|63|R|@$V|64|W|65|X|Y]]|S|@]|6|$]]|$M|2A|O|2B|2|P|Q|66|R|@$V|67|W|68|X|Y]|$V|69|W|6A|X|Y]]|S|@]|6|$]]|$M|2C|O|2D|2|1G|Q|6B|R|@]|S|@]|6|$1H|1I]]|$M|2E|O|2F|2|13|Q|6C|R|@]|S|@]|6|$]]|$M|2G|O|2H|2|P|Q|6D|R|@$V|6E|W|6F|X|Y]|$V|6G|W|6H|X|Y]]|S|@]|6|$]]|$M|2I|O|2J|2|1G|Q|6I|R|@]|S|@]|6|$1H|1I]]|$M|2K|O|2L|2|29|Q|6J|R|@$V|6K|W|6L|X|Y]]|S|@]|6|$]]|$M|2M|O|2N|2|P|Q|6M|R|@$V|6N|W|6O|X|Y]|$V|6P|W|6Q|X|Y]|$V|6R|W|6S|X|Y]|$V|6T|W|6U|X|Y]]|S|@]|6|$]]|$M|2O|O|2P|2|P|Q|6V|R|@]|S|@$V|6W|W|6X|M|6Y]]|6|$]]|$M|2Q|O|2R|2|2S|Q|6Z|R|@]|S|@$V|70|W|71|M|72]]|6|$]]|$M|2T|O|2U|2|P|Q|73|R|@$V|74|W|75|X|Y]|$V|76|W|77|X|Y]]|S|@]|6|$]]|$M|2V|O|2W|2|2X|Q|78|R|@$V|79|W|7A|X|Y]|$V|7B|W|7C|X|Y]]|S|@]|6|$]]|$M|2Y|O|2Z|2|2X|Q|7D|R|@$V|7E|W|7F|X|Y]|$V|7G|W|7H|X|Y]]|S|@]|6|$]]|$M|30|O|31|2|2X|Q|7I|R|@$V|7J|W|7K|X|Y]|$V|7L|W|7M|X|Y]]|S|@]|6|$]]|$M|32|O|33|2|16|Q|7N|R|@]|S|@]|6|$]]|$M|34|O|35|2|P|Q|7O|R|@$V|7P|W|7Q|X|Y]|$V|7R|W|7S|X|Y]|$V|7T|W|7U|X|Y]|$V|7V|W|7W|X|Y]|$V|7X|W|7Y|X|Y]]|S|@$V|7Z|W|80|M|81]]|6|$]]|$M|36|O|37|2|P|Q|82|R|@$V|83|W|84|X|Y]|$V|85|W|86|X|Y]]|S|@]|6|$]]|$M|38|O|39|2|P|Q|87|R|@$V|88|W|89|X|Y]|$V|8A|W|8B|X|Y]]|S|@]|6|$]]|$M|3A|O|3B|2|P|Q|8C|R|@]|S|@]|6|$]]]]","plain":"\ngitbook 是基于 node.js 的命令行工具,首先需要安装并配置好 node.js 环境,然后才能安装gitbook 相关工具.\n由于安装工具全部都是国外网站,因此速度可能会很慢,也可能需要FQ,请耐心等待或者学会科学上网.\n 当然如果安装过程中遇到任何问题,也可以找我要一下安装包或者我帮你免费解决下.\n \n环境预检查\n检查 git 环境[可选]\ngit 是免费开源的分布式版本控制系统,主要用于电子书的更新管理和团队协作,如果不需要将电子书托管到github 网站上,则可以不安装 git .\n如果打印出 git 版本信息,则表示本机已安装 git 环境,跳过此步骤.\n$ git --version\n git 安装配置教程请参考初识 git\n \n检查 node.js 环境[必须]\nnode.js 是 js 在服务端运行的环境基础,从而使得 js 从浏览器端延伸到服务端领域,而 gitbook 则是运行在 node.js 基础之上的命令行工具,因此必须先安装好 node.js 开发环境.\n如果打印出 node.js 版本信息,则表示本机已安装 node.js 环境,跳过此步骤.\n$ node -v\n node.js 安装配置教程请参考 https://nodejs.org/\n \n检查 gitbook 环境[必须]\ngitbook-cli 是 gitbook 的脚手架工具,帮助我们更方便构建 gitbook 应用,当然也可以直接安装 gitbook ,只不过那样的话,略显麻烦,不推荐.\n如果打印出 gitbook 和 cli 版本信息,则表示本机已安装 gitbook 环境,跳过此步骤.\n$ gitbook -V\n否则的话,本机可能并没有安装 gitbook 环境,则需要安装 gitbook 相关工具.\n因为 gitbook 是基于 node.js 环境,而安装好 node.js 后默认提供了 npm 包管理工具,而我们则是通过 npm 来安装其他工具.\n安装 gitbook-cli 工具[必须]\n假设你已经搭建好 node.js 环境,现在我们开始安装 gitbook 相关工具了!\n$ sudo npm install -g gitbook-cli\n 全局安装的话,可能需要超级管理员权限,输入下相应密码即可继续安装,如无报错,则表示安装成功.\n \n安装成功后会带有 gitbook 命令,现在再次运行下 gitbook -V 查看版本信息.\n# 打印出 `CLI` 和 `GitBook` 版本信息即可,安装版本可能已经大于 `2.3.2`\n$ gitbook -V\nCLI version: 2.3.2\nGitBook version: 3.2.3\n$ \n安装 GitBook Editor 编辑器[可选]\ngitbook 官方客户端编辑器,支持 windows, mac 和 linux ,主要用于可视化编辑文档,组织文档结构.\n下载相应平台的 GitBook Editor,正常安装即可.\n?\ngitbook 的使用方法大致可以有三种,而 GitBook Editor 编辑器只是其中一种,所以这一步是可选的.\n使用 gitbook-cli 脚手架提供的各种命令直接在命令行管理 gitbook,适合一定编程经验的软件从业人员.\n使用 GitBook Editor 编辑器管理 gitbook ,适合无任何编程的文学创作者.\n使用 gitbook.com 官网在线管理 gitbook ,适合不具备本地开发环境的萌新体验者.\n小结\ngitbook 基于 node.js 开发环境,因此首先要安装好 nodejs 环境,其次再使用 node.js 提供的 npm 包管理工具来安装 gitbook.\n只需运行 sudo npm install -g gitbook-cli 即可安装,接着运行 gitbook -V 查看安装版本信息确认已经安装成功.\n至此 gitbook 的必要开发环境已经准备妥当,接下来让我们赶紧体验一下 gitbook 的魅力吧!\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\ngitbook 是基于 node.js 的命令行工具,首先需要安装并配置好 node.js 环境,然后才能安装gitbook 相关工具.\n由于安装工具全部都是...","summary":"gitbook 是基于 node.js 的命令行工具,首先需要安装并配置好 node.js 环境,然后才能安装gitbook 相关工具.","abstract":"gitbook 是基于 node.js 的命令行工具,首先需要安装并配置好 node.js 环境,然后才能安装gitbook 相关工具.","description":"","picture":"https://ask.qcloudimg.com/http-save/yehe-2952369/j32e4lfiuh.png","coverImageUrl":"https://ask.qcloudimg.com/http-save/yehe-2952369/j32e4lfiuh.png","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"13:35"},"authorId":2952369,"columnId":75668,"writeTime":1554276104,"updateTime":1554276104,"viewCount":84,"likeCount":3,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10728,"tagName":"npm"},{"tagId":10283,"tagName":"Git"},{"tagId":10200,"tagName":"Node.js"},{"tagId":10170,"tagName":"JavaScript"},{"tagId":10387,"tagName":"命令行工具"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}}]}}