{"code":0,"msg":"ok","data":{"total":65,"list":[{"id":2682,"type":40,"actionInfo":{"articleId":1409888,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554275663,"detail":{"id":1409888,"articleId":1409888,"title":"git 入门教程之分支总览\n                                                                            原\n        ","content":"entityMap|0|type|IMAGE|mutability|IMMUTABLE|data|imageUrl|https://ask.qcloudimg.com/http-save/yehe-2952369/gkp9bjex7c.gif|imageAlt|git-commit.gif|1|https://ask.qcloudimg.com/http-save/yehe-2952369/ccowfdbcpx.gif|git-branch.gif|2|https://ask.qcloudimg.com/http-save/yehe-2952369/3jl00c9q0i.png|git-on-master.png|3|https://ask.qcloudimg.com/http-save/yehe-2952369/czau7fqgo1.png|git-on-dev.png|4|https://ask.qcloudimg.com/http-save/yehe-2952369/20l8db8n8d.png|git-on-dev-commit1.png|5|https://ask.qcloudimg.com/http-save/yehe-2952369/mrfpo5ymzb.png|git-on-dev-commit2.png|6|https://ask.qcloudimg.com/http-save/yehe-2952369/8nfcr476z5.png|git-checkout-master.png|7|https://ask.qcloudimg.com/http-save/yehe-2952369/y5ms7lzz65.png|git-merge-dev.png|8|https://ask.qcloudimg.com/http-save/yehe-2952369/5e5g72vv9x.png|git-branch-d-dev.png|blocks|key|ehkoq|text|unstyled|depth|inlineStyleRanges|entityRanges|3e0kt|分支就是一条独立的时间线,既有分支,必有主干,正如一棵树谈到树枝,必有树干一样的道理.我们先前对git+的全部操作默认都是在主干上进行的,这个主干也是一种特殊的分支,名为+master+分支.|offset|length|style|CODE|9tekv|无论是穿越历史还是撤销更改,我们都或多或少接触过时间线,git+管理的版本串在一起就组成了这个时间线,其中master+分支是当前分支,HEAD+指向master+,因此HEAD+相当于指向了最新的版本.|2u2b8|?|atomic|dugve|基于分支上的操作,每一次+commit+都会提交一个新版本,并且新的+commit+指向原来的+commit,这来最新的+commit+就可以往前找,直到找到最初的commit.这就是+git+的时间线.|du6qr|当我们打算开辟新的时间线时,git+在当前+HEAD+指向的+master+分支的+commit+处新建一个+dev+分支.如果主角没有主动进入时间线的话,那么仍然处于+master+分支,进入的方法就是+HEAD指向新建的+dev+分支.|8t9fb|不考虑孙悟空的分身特效,主角不能同时处于不同的时空下,git+也是如何,HEAD+只能指向某一个+commit+,既然刚刚已经指向了+dev+分支,所以原来的+master+分支就没有+HEAD+了,因为相当于master+分支静止了.|fmiu5|当主角在+dev+分支独自闯荡干出一番事业时,决定回到故乡+master+分支,并将出门在外所学的本领带回家乡,建设美好家园.master+分支因为合并了+dev+分支,所以一下子增添了很多内容,家乡焕然一新!|dbiof|主角这次携带+dev+分支归来,HEAD+分支自然又回到了+master+分支上,年轻的心向往外面的世间,相信不久后还会有同样的故事发生...|debqa|9ov9u|下面详解分支相关命令|7liqe|创建分支|header-two|2o535|创建+dev+分支,列出分支已验证是否创建成功|cdsib|#+创建分支\n$git+branch+dev\n#+列出分支\n$+git+branch\n++dev\n*+master\n$+|code-block|syntax|javascript|8lfk2|+*+master+前面的+*+标记表明当前仍然处于+master+分支\n+|blockquote|ampeu|apm96|切换分支|3fn11|切换到新分支以便在分支上开展工作|4ebgv|#+切换分支\n$+git+checkout+dev\nSwitched+to+branch+'dev'\n#+列出分支\n$+git+branch\n*+dev\n++master\n$|24b6l|edtrc|现在,我们在+dev+分支上奋笔疾书,先后提交两个版本后完成分支开发工作:|9gns9|#+查看当前文件列表\n$+ls\nLICENSE+++++README.md+++test.txt\n#+查看目标文件内容\n$+cat+test.txt\nadd+test.txt\nsee+https://snowdreams1006.github.io/git/usage/remote-repository.html\n\n#+第一个版本:+learn+git+branch\n$+echo+\"learn+git+branch\"+>>+test.txt\n$+git+add+test.txt\n$+git+commit+-m+\"learn+git+branch\"\n[dev+9c30e50]+learn+git+branch\n+1+file+changed,+1+insertion(%2B)\n\n#+第二个版本:+see+https://snowdreams1006.github.io/git/usage/branch-overview.html\n$+echo+\"see+https://snowdreams1006.github.io/git/usage/branch-overview.html\"+>>+test.txt\n$+git+add+test.txt\nsunpodeMacBook-Pro:git-demo+sunpo$+git+status\nOn+branch+dev\nChanges+to+be+committed:\n++(use+\"git+reset+HEAD+<file>...\"+to+unstage)\n\n++++modified:+++test.txt\n\n$+git+commit+-m+\"see+https://snowdreams1006.github.io/git/usage/branch-overview.html\"\n[dev+413a4d1]+see+https://snowdreams1006.github.io/git/usage/branch-overview.html\n+1+file+changed,+1+insertion(%2B)|6mu7q|b5ooe|b010b|此时,再从+dev+分支切换回+master+分支,合并dev分支前看一下当前文件内容:|7fn7e|#+切换回+master+分支\n$+git+checkout+master\nSwitched+to+branch+'master'\nYour+branch+is+up+to+date+with+'origin/master'.\nsunpodeMacBook-Pro:git-demo+sunpo$+git+status\nOn+branch+master\nYour+branch+is+up+to+date+with+'origin/master'.\n\nnothing+to+commit,+working+tree+clean\n#+查看当前文件列表\n$+ls\nLICENSE+++++README.md+++test.txt\n#+查看文件内容:+无+dev+分支更改\n$+cat+test.txt\nadd+test.txt\nsee+https://snowdreams1006.github.io/git/usage/remote-repository.html\n$+|1ffqv|2h6as|合并分支|1mq3c|切换回+master+分支并没有我们在+dev+分支的更改,因为两条时间线是独立的,现在合并+dev+分支,再看一下当前文件内容:|durth|#+合并+dev+分支\n$+git+merge+dev\nUpdating+b3d8193..413a4d1\nFast-forward\n+test.txt+%7C+2+%2B%2B\n+1+file+changed,+2+insertions(%2B)\n#+查看文件内容:+已经存在+dev+分支的更改!\n$+cat+test.txt\nadd+test.txt\nsee+https://snowdreams1006.github.io/git/usage/remote-repository.html\nlearn+git+branch\nsee+https://snowdreams1006.github.io/git/|2sbcu|b5oeq|删除分支|3bmr6|合并分支后,dev+分支的历史使命已经完成,应该及时清空不必要分支.|bq5kc|#+删除+dev+分支\n$+git+branch+-d+dev\nDeleted+branch+dev+(was+413a4d1).\n\n#+列出当前分支:+只剩下+master+分支\n$+git+branch\n*+master\n$+|7bhb7|c1p5c|以上场景包括了分支的常用操作,创建分支(git+branch+<name>),切换分支(git+checkout+<name>),删除分支(git+branch+-d+<name>)一系列操作十分流畅,因此+git+鼓励我们大量使用分支!|7ko02|小结|dpgos|列出分支+git+branch|unordered-list-item|1f40r|创建分支+git+branch+<name>|fjc0o|切换分支+git+checkout+<name>|68t4h|创建并切换分支+git+checkout+-b+<name>|adbv8|合并指定分支到当前分支+git+merge+<name>|fqmf6|删除分支+git+branch+-d+<name>|1bceo|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|1C|3|2E|6|0|S|3|1H|6|1W|4|23|6|2D|4|0|0|1|0|0|D|6|Z|6|1C|6|1P|6|2A|6|2L|3|0|E|3|M|4|V|6|16|6|1J|3|2D|6|2V|4|35|3|0|R|3|10|4|1D|6|1V|3|28|6|2L|4|2X|6|0|5|3|U|6|1R|6|26|3|0|7|3|G|4|U|6|0|0|1|1|0|0|0|3|3|0|0|3|6|R|6|0|0|1|2|0|0|0|0|0|1|3|0|7|3|0|0|0|1|4|0|0|1|5|0|6|3|G|6|S|3|0|0|0|1|6|0|0|4|6|K|3|1B|3|0|0|0|1|7|0|0|6|3|0|0|0|1|8|0|K|H|18|J|1Y|K|2W|3|0|0|5|A|0|5|H|0|5|J|0|8|M|0|C|G|0|5|K|0^^$0|$1|$2|3|4|5|6|$7|8|9|A]]|B|$2|3|4|5|6|$7|C|9|D]]|E|$2|3|4|5|6|$7|F|9|G]]|H|$2|3|4|5|6|$7|I|9|J]]|K|$2|3|4|5|6|$7|L|9|M]]|N|$2|3|4|5|6|$7|O|9|P]]|Q|$2|3|4|5|6|$7|R|9|S]]|T|$2|3|4|5|6|$7|U|9|V]]|W|$2|3|4|5|6|$7|X|9|Y]]]|Z|@$10|11|12|-4|2|13|14|3O|15|@]|16|@]|6|$]]|$10|17|12|18|2|13|14|3P|15|@$19|3Q|1A|3R|1B|1C]|$19|3S|1A|3T|1B|1C]]|16|@]|6|$]]|$10|1D|12|1E|2|13|14|3U|15|@$19|3V|1A|3W|1B|1C]|$19|3X|1A|3Y|1B|1C]|$19|3Z|1A|40|1B|1C]|$19|41|1A|42|1B|1C]|$19|43|1A|44|1B|1C]]|16|@]|6|$]]|$10|1F|12|1G|2|1H|14|45|15|@]|16|@$19|46|1A|47|10|48]]|6|$]]|$10|1I|12|1J|2|13|14|49|15|@$19|4A|1A|4B|1B|1C]|$19|4C|1A|4D|1B|1C]|$19|4E|1A|4F|1B|1C]|$19|4G|1A|4H|1B|1C]|$19|4I|1A|4J|1B|1C]|$19|4K|1A|4L|1B|1C]]|16|@]|6|$]]|$10|1K|12|1L|2|13|14|4M|15|@$19|4N|1A|4O|1B|1C]|$19|4P|1A|4Q|1B|1C]|$19|4R|1A|4S|1B|1C]|$19|4T|1A|4U|1B|1C]|$19|4V|1A|4W|1B|1C]|$19|4X|1A|4Y|1B|1C]|$19|4Z|1A|50|1B|1C]|$19|51|1A|52|1B|1C]]|16|@]|6|$]]|$10|1M|12|1N|2|13|14|53|15|@$19|54|1A|55|1B|1C]|$19|56|1A|57|1B|1C]|$19|58|1A|59|1B|1C]|$19|5A|1A|5B|1B|1C]|$19|5C|1A|5D|1B|1C]|$19|5E|1A|5F|1B|1C]|$19|5G|1A|5H|1B|1C]]|16|@]|6|$]]|$10|1O|12|1P|2|13|14|5I|15|@$19|5J|1A|5K|1B|1C]|$19|5L|1A|5M|1B|1C]|$19|5N|1A|5O|1B|1C]|$19|5P|1A|5Q|1B|1C]]|16|@]|6|$]]|$10|1Q|12|1R|2|13|14|5R|15|@$19|5S|1A|5T|1B|1C]|$19|5U|1A|5V|1B|1C]|$19|5W|1A|5X|1B|1C]]|16|@]|6|$]]|$10|1S|12|1G|2|1H|14|5Y|15|@]|16|@$19|5Z|1A|60|10|61]]|6|$]]|$10|1T|12|1U|2|13|14|62|15|@]|16|@]|6|$]]|$10|1V|12|1W|2|1X|14|63|15|@]|16|@]|6|$]]|$10|1Y|12|1Z|2|13|14|64|15|@$19|65|1A|66|1B|1C]]|16|@]|6|$]]|$10|20|12|21|2|22|14|67|15|@]|16|@]|6|$23|24]]|$10|25|12|26|2|27|14|68|15|@$19|69|1A|6A|1B|1C]|$19|6B|1A|6C|1B|1C]]|16|@]|6|$]]|$10|28|12|1G|2|1H|14|6D|15|@]|16|@$19|6E|1A|6F|10|6G]]|6|$]]|$10|29|12|2A|2|1X|14|6H|15|@]|16|@]|6|$]]|$10|2B|12|2C|2|13|14|6I|15|@]|16|@]|6|$]]|$10|2D|12|2E|2|22|14|6J|15|@]|16|@]|6|$23|24]]|$10|2F|12|1G|2|1H|14|6K|15|@]|16|@$19|6L|1A|6M|10|6N]]|6|$]]|$10|2G|12|2H|2|13|14|6O|15|@$19|6P|1A|6Q|1B|1C]]|16|@]|6|$]]|$10|2I|12|2J|2|22|14|6R|15|@]|16|@]|6|$23|24]]|$10|2K|12|1G|2|1H|14|6S|15|@]|16|@$19|6T|1A|6U|10|6V]]|6|$]]|$10|2L|12|1G|2|1H|14|6W|15|@]|16|@$19|6X|1A|6Y|10|6Z]]|6|$]]|$10|2M|12|2N|2|13|14|70|15|@$19|71|1A|72|1B|1C]|$19|73|1A|74|1B|1C]|$19|75|1A|76|1B|1C]]|16|@]|6|$]]|$10|2O|12|2P|2|22|14|77|15|@]|16|@]|6|$23|24]]|$10|2Q|12|1G|2|1H|14|78|15|@]|16|@$19|79|1A|7A|10|7B]]|6|$]]|$10|2R|12|2S|2|1X|14|7C|15|@]|16|@]|6|$]]|$10|2T|12|2U|2|13|14|7D|15|@$19|7E|1A|7F|1B|1C]|$19|7G|1A|7H|1B|1C]|$19|7I|1A|7J|1B|1C]]|16|@]|6|$]]|$10|2V|12|2W|2|22|14|7K|15|@]|16|@]|6|$23|24]]|$10|2X|12|1G|2|1H|14|7L|15|@]|16|@$19|7M|1A|7N|10|7O]]|6|$]]|$10|2Y|12|2Z|2|1X|14|7P|15|@]|16|@]|6|$]]|$10|30|12|31|2|13|14|7Q|15|@$19|7R|1A|7S|1B|1C]]|16|@]|6|$]]|$10|32|12|33|2|22|14|7T|15|@]|16|@]|6|$23|24]]|$10|34|12|1G|2|1H|14|7U|15|@]|16|@$19|7V|1A|7W|10|7X]]|6|$]]|$10|35|12|36|2|13|14|7Y|15|@$19|7Z|1A|80|1B|1C]|$19|81|1A|82|1B|1C]|$19|83|1A|84|1B|1C]|$19|85|1A|86|1B|1C]]|16|@]|6|$]]|$10|37|12|38|2|1X|14|87|15|@]|16|@]|6|$]]|$10|39|12|3A|2|3B|14|88|15|@$19|89|1A|8A|1B|1C]]|16|@]|6|$]]|$10|3C|12|3D|2|3B|14|8B|15|@$19|8C|1A|8D|1B|1C]]|16|@]|6|$]]|$10|3E|12|3F|2|3B|14|8E|15|@$19|8F|1A|8G|1B|1C]]|16|@]|6|$]]|$10|3G|12|3H|2|3B|14|8H|15|@$19|8I|1A|8J|1B|1C]]|16|@]|6|$]]|$10|3I|12|3J|2|3B|14|8K|15|@$19|8L|1A|8M|1B|1C]]|16|@]|6|$]]|$10|3K|12|3L|2|3B|14|8N|15|@$19|8O|1A|8P|1B|1C]]|16|@]|6|$]]|$10|3M|12|3N|2|13|14|8Q|15|@]|16|@]|6|$]]]]","plain":"\n分支就是一条独立的时间线,既有分支,必有主干,正如一棵树谈到树枝,必有树干一样的道理.我们先前对git 的全部操作默认都是在主干上进行的,这个主干也是一种特殊的分支,名为 master 分支.\n无论是穿越历史还是撤销更改,我们都或多或少接触过时间线,git 管理的版本串在一起就组成了这个时间线,其中master 分支是当前分支,HEAD 指向master ,因此HEAD 相当于指向了最新的版本.\n?\n基于分支上的操作,每一次 commit 都会提交一个新版本,并且新的 commit 指向原来的 commit,这来最新的 commit 就可以往前找,直到找到最初的commit.这就是 git 的时间线.\n当我们打算开辟新的时间线时,git 在当前 HEAD 指向的 master 分支的 commit 处新建一个 dev 分支.如果主角没有主动进入时间线的话,那么仍然处于 master 分支,进入的方法就是 HEAD指向新建的 dev 分支.\n不考虑孙悟空的分身特效,主角不能同时处于不同的时空下,git 也是如何,HEAD 只能指向某一个 commit ,既然刚刚已经指向了 dev 分支,所以原来的 master 分支就没有 HEAD 了,因为相当于master 分支静止了.\n当主角在 dev 分支独自闯荡干出一番事业时,决定回到故乡 master 分支,并将出门在外所学的本领带回家乡,建设美好家园.master 分支因为合并了 dev 分支,所以一下子增添了很多内容,家乡焕然一新!\n主角这次携带 dev 分支归来,HEAD 分支自然又回到了 master 分支上,年轻的心向往外面的世间,相信不久后还会有同样的故事发生...\n?\n下面详解分支相关命令\n创建分支\n创建 dev 分支,列出分支已验证是否创建成功\n# 创建分支\n$git branch dev\n# 列出分支\n$ git branch\n  dev\n* master\n$ \n * master 前面的 * 标记表明当前仍然处于 master 分支\n \n?\n切换分支\n切换到新分支以便在分支上开展工作\n# 切换分支\n$ git checkout dev\nSwitched to branch 'dev'\n# 列出分支\n$ git branch\n* dev\n  master\n$\n?\n现在,我们在 dev 分支上奋笔疾书,先后提交两个版本后完成分支开发工作:\n# 查看当前文件列表\n$ ls\nLICENSE     README.md   test.txt\n# 查看目标文件内容\n$ cat test.txt\nadd test.txt\nsee https://snowdreams1006.github.io/git/usage/remote-repository.html\n\n# 第一个版本: learn git branch\n$ echo \"learn git branch\" >> test.txt\n$ git add test.txt\n$ git commit -m \"learn git branch\"\n[dev 9c30e50] learn git branch\n 1 file changed, 1 insertion(+)\n\n# 第二个版本: see https://snowdreams1006.github.io/git/usage/branch-overview.html\n$ echo \"see https://snowdreams1006.github.io/git/usage/branch-overview.html\" >> test.txt\n$ git add test.txt\nsunpodeMacBook-Pro:git-demo sunpo$ git status\nOn branch dev\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n    modified:   test.txt\n\n$ git commit -m \"see https://snowdreams1006.github.io/git/usage/branch-overview.html\"\n[dev 413a4d1] see https://snowdreams1006.github.io/git/usage/branch-overview.html\n 1 file changed, 1 insertion(+)\n?\n?\n此时,再从 dev 分支切换回 master 分支,合并dev分支前看一下当前文件内容:\n# 切换回 master 分支\n$ git checkout master\nSwitched to branch 'master'\nYour branch is up to date with 'origin/master'.\nsunpodeMacBook-Pro:git-demo sunpo$ git status\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nnothing to commit, working tree clean\n# 查看当前文件列表\n$ ls\nLICENSE     README.md   test.txt\n# 查看文件内容: 无 dev 分支更改\n$ cat test.txt\nadd test.txt\nsee https://snowdreams1006.github.io/git/usage/remote-repository.html\n$ \n?\n合并分支\n切换回 master 分支并没有我们在 dev 分支的更改,因为两条时间线是独立的,现在合并 dev 分支,再看一下当前文件内容:\n# 合并 dev 分支\n$ git merge dev\nUpdating b3d8193..413a4d1\nFast-forward\n test.txt | 2 ++\n 1 file changed, 2 insertions(+)\n# 查看文件内容: 已经存在 dev 分支的更改!\n$ cat test.txt\nadd test.txt\nsee https://snowdreams1006.github.io/git/usage/remote-repository.html\nlearn git branch\nsee https://snowdreams1006.github.io/git/\n?\n删除分支\n合并分支后,dev 分支的历史使命已经完成,应该及时清空不必要分支.\n# 删除 dev 分支\n$ git branch -d dev\nDeleted branch dev (was 413a4d1).\n\n# 列出当前分支: 只剩下 master 分支\n$ git branch\n* master\n$ \n?\n以上场景包括了分支的常用操作,创建分支(git branch <name>),切换分支(git checkout <name>),删除分支(git branch -d <name>)一系列操作十分流畅,因此 git 鼓励我们大量使用分支!\n小结\n列出分支 git branch\n创建分支 git branch <name>\n切换分支 git checkout <name>\n创建并切换分支 git checkout -b <name>\n合并指定分支到当前分支 git merge <name>\n删除分支 git branch -d <name>\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n分支就是一条独立的时间线,既有分支,必有主干,正如一棵树谈到树枝,必有树干一样的道理.我们先前对git 的全部操作默认都是在主干上进行的,这个主干也是一种特殊...","summary":"分支就是一条独立的时间线,既有分支,必有主干,正如一棵树谈到树枝,必有树干一样的道理.我们先前对git 的全部操作默认都是在主干上进行的,这个主干也是一种特殊的...","abstract":"分支就是一条独立的时间线,既有分支,必有主干,正如一棵树谈到树枝,必有树干一样的道理.我们先前对git 的全部操作默认都是在主干上进行的,这个主干也是一种特殊的...","description":"","picture":"https://ask.qcloudimg.com/http-save/yehe-2952369/gkp9bjex7c.gif","coverImageUrl":"https://ask.qcloudimg.com/http-save/yehe-2952369/gkp9bjex7c.gif","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/19 10:23"},"authorId":2952369,"columnId":75668,"writeTime":1554275663,"updateTime":1554275663,"viewCount":89,"likeCount":6,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2681,"type":40,"actionInfo":{"articleId":1409886,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554275489,"detail":{"id":1409886,"articleId":1409886,"title":"git 入门教程之分支管理\n                                                                            原","content":"entityMap|blocks|key|1fgn9|text|type|unstyled|depth|inlineStyleRanges|entityRanges|data|fi5pb|什么是分支?简单地说,分支就是两个相对独立的时间线,正常情况下,独立的时间线永远不会有交集,彼此不知道对方的存在,只有特定情况下,两条时间线才会相遇,因为相遇,所以相知,因为相知,所以改变!|87da2|正如分支对于科幻电影来说是一个很好的卖点,关于分支的话题完全可以开启新的题材,对于这点相信不少科幻迷都深有体会,不必赘述.|3q496|回归正题,分支对于版本控制系统又意味着什么呢?实际工作中,我们大多作为一个团队一起合作开发项目,如果是独立开发者,只有一个人的话,其实用不到分支的概念,甚至远程仓库也用不到.所以下述情况针对的都是团队开发情况.|7893r|作为团队中的一员不论是项目领导还是项目成员,都需要了解并掌握分支的一般概念和常用操作.如果你刚好是实际开发的程序猿,上级领导分派一个新功能,预期两个星期内才能完成,其他同事也是如此,每个人都有自己的任务.接收任务就要开始干活,第一天工作开了一个头,还留下一大堆的+TODO+标记,此时你照例运行+git+add+,git+commit+等命令,学会上节的git+push+origin+master+你知道了本地仓库和远程仓库的概念,你想将你的工作成果分享给其他人就要推送到远程仓库,这样其他人才能可见,等一等,别急!|offset|length|style|CODE|de5h3|首先明确的是,这个完整功能至少需要2个星期才能基本完成啊,你现在刚刚起了个头还没完成呢!你要是真的推送到远程仓库了,那其他人是不是有理由认为你这部分功能已完成?那你可能会反驳说,我可以在工作群吼一声,说这个功能还没完成,大家别着急使用哈!这样确实可以,很长一段时间内其他人必须无视你的代码,只有等你的功能基本可用时,等你再吼一声,别人才会去使用你的代码.粗略一看,好像并没有什么问题?!|blvkm|实际上这种情况是存在很大风险的,因为未完成未经过测试的代码可能会产生大量意外+bug,严重的话,甚至影响整个系统,到时候由于你的未完成代码导致别人项目都无法运行,那别人还怎么工作,这个责任是谁负责?|8nf71|所以,为了不给其他人造成麻烦,最好不要把未完成工作直接暴露到别人面前,那长时间提交又可能会造成丢失更改的风险,此时此景,平行时间线应用而生!|9i62h|从接手新功能的时间点开始,创建一条新的时间线,于是新功能的开发完全在新的时间线上进行,至于其他人是否开启新的时间线那就不是我们能控制得了,我们能做到的就是不给其他人制造麻烦,如果其他人给我们制造麻烦的话,那我们就去上级领导那告他一状,哈哈!|ej3el|等功能开发差不多时,你再想办法切换到原来的时间线上并将开发时间线的更改顺便都带过来,这样一来,别人虽然看不到你的开发时间线,但是看到了你离开的这段时间原来做了这么多的更改啊!|9dbn1|现在用git的专业术语再解释一遍上述场景:|ef7g5|接手新功能的时刻开始,创建一个开发分支(既可以是本地分支也可以是远程分支),以后新功能的开发全部在开发分支上完成,处于开发分支上你可以照常运行+git+add+,git+commit+等命令,不用担心丢失更改.等工作一段时间后,终于完成了新功能,是时候让新功能展示给其他同事了.此时再切换到原来的主干分支,在主干分支上合并开发分支,现在主干分支上已经有新功能了,这样一来,其他同事突然发现你已经偷偷地完成了新功能的开发!|4sqio|不仅+git+有分支概念,其他版本控制系统比如+svn+也有分支概念,基本概念和常用操作类似,只不过+git+更强大,创建分支,切换分支,合并分支等功能十分强大,效率太高!+(svn+创建分支,切换分支等操作简直慢到可以喝一杯茶了,分支管理都快成摆设了!)|7jff1|建议|header-two|5iv9o|开发新功能时尽量创建自己的分支,不要给其他人造成麻烦|unordered-list-item|2uiau|分配任务时要求项目成员创建各自分支,等时机成熟时再合并到主干分支|6r3vr|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|0|0|3O|4|44|7|4D|A|4X|M|0|0|0|0|0|0|3|3|0|20|7|29|A|0|3|3|O|3|1F|3|2G|3|0|0|0|0^^$0|$]|1|@$2|3|4|-4|5|6|7|1D|8|@]|9|@]|A|$]]|$2|B|4|C|5|6|7|1E|8|@]|9|@]|A|$]]|$2|D|4|E|5|6|7|1F|8|@]|9|@]|A|$]]|$2|F|4|G|5|6|7|1G|8|@]|9|@]|A|$]]|$2|H|4|I|5|6|7|1H|8|@$J|1I|K|1J|L|M]|$J|1K|K|1L|L|M]|$J|1M|K|1N|L|M]|$J|1O|K|1P|L|M]]|9|@]|A|$]]|$2|N|4|O|5|6|7|1Q|8|@]|9|@]|A|$]]|$2|P|4|Q|5|6|7|1R|8|@]|9|@]|A|$]]|$2|R|4|S|5|6|7|1S|8|@]|9|@]|A|$]]|$2|T|4|U|5|6|7|1T|8|@]|9|@]|A|$]]|$2|V|4|W|5|6|7|1U|8|@]|9|@]|A|$]]|$2|X|4|Y|5|6|7|1V|8|@$J|1W|K|1X|L|M]]|9|@]|A|$]]|$2|Z|4|10|5|6|7|1Y|8|@$J|1Z|K|20|L|M]|$J|21|K|22|L|M]]|9|@]|A|$]]|$2|11|4|12|5|6|7|23|8|@$J|24|K|25|L|M]|$J|26|K|27|L|M]|$J|28|K|29|L|M]|$J|2A|K|2B|L|M]]|9|@]|A|$]]|$2|13|4|14|5|15|7|2C|8|@]|9|@]|A|$]]|$2|16|4|17|5|18|7|2D|8|@]|9|@]|A|$]]|$2|19|4|1A|5|18|7|2E|8|@]|9|@]|A|$]]|$2|1B|4|1C|5|6|7|2F|8|@]|9|@]|A|$]]]]","plain":"\n什么是分支?简单地说,分支就是两个相对独立的时间线,正常情况下,独立的时间线永远不会有交集,彼此不知道对方的存在,只有特定情况下,两条时间线才会相遇,因为相遇,所以相知,因为相知,所以改变!\n正如分支对于科幻电影来说是一个很好的卖点,关于分支的话题完全可以开启新的题材,对于这点相信不少科幻迷都深有体会,不必赘述.\n回归正题,分支对于版本控制系统又意味着什么呢?实际工作中,我们大多作为一个团队一起合作开发项目,如果是独立开发者,只有一个人的话,其实用不到分支的概念,甚至远程仓库也用不到.所以下述情况针对的都是团队开发情况.\n作为团队中的一员不论是项目领导还是项目成员,都需要了解并掌握分支的一般概念和常用操作.如果你刚好是实际开发的程序猿,上级领导分派一个新功能,预期两个星期内才能完成,其他同事也是如此,每个人都有自己的任务.接收任务就要开始干活,第一天工作开了一个头,还留下一大堆的 TODO 标记,此时你照例运行 git add ,git commit 等命令,学会上节的git push origin master 你知道了本地仓库和远程仓库的概念,你想将你的工作成果分享给其他人就要推送到远程仓库,这样其他人才能可见,等一等,别急!\n首先明确的是,这个完整功能至少需要2个星期才能基本完成啊,你现在刚刚起了个头还没完成呢!你要是真的推送到远程仓库了,那其他人是不是有理由认为你这部分功能已完成?那你可能会反驳说,我可以在工作群吼一声,说这个功能还没完成,大家别着急使用哈!这样确实可以,很长一段时间内其他人必须无视你的代码,只有等你的功能基本可用时,等你再吼一声,别人才会去使用你的代码.粗略一看,好像并没有什么问题?!\n实际上这种情况是存在很大风险的,因为未完成未经过测试的代码可能会产生大量意外 bug,严重的话,甚至影响整个系统,到时候由于你的未完成代码导致别人项目都无法运行,那别人还怎么工作,这个责任是谁负责?\n所以,为了不给其他人造成麻烦,最好不要把未完成工作直接暴露到别人面前,那长时间提交又可能会造成丢失更改的风险,此时此景,平行时间线应用而生!\n从接手新功能的时间点开始,创建一条新的时间线,于是新功能的开发完全在新的时间线上进行,至于其他人是否开启新的时间线那就不是我们能控制得了,我们能做到的就是不给其他人制造麻烦,如果其他人给我们制造麻烦的话,那我们就去上级领导那告他一状,哈哈!\n等功能开发差不多时,你再想办法切换到原来的时间线上并将开发时间线的更改顺便都带过来,这样一来,别人虽然看不到你的开发时间线,但是看到了你离开的这段时间原来做了这么多的更改啊!\n现在用git的专业术语再解释一遍上述场景:\n接手新功能的时刻开始,创建一个开发分支(既可以是本地分支也可以是远程分支),以后新功能的开发全部在开发分支上完成,处于开发分支上你可以照常运行 git add ,git commit 等命令,不用担心丢失更改.等工作一段时间后,终于完成了新功能,是时候让新功能展示给其他同事了.此时再切换到原来的主干分支,在主干分支上合并开发分支,现在主干分支上已经有新功能了,这样一来,其他同事突然发现你已经偷偷地完成了新功能的开发!\n不仅 git 有分支概念,其他版本控制系统比如 svn 也有分支概念,基本概念和常用操作类似,只不过 git 更强大,创建分支,切换分支,合并分支等功能十分强大,效率太高! (svn 创建分支,切换分支等操作简直慢到可以喝一杯茶了,分支管理都快成摆设了!)\n建议\n开发新功能时尽量创建自己的分支,不要给其他人造成麻烦\n分配任务时要求项目成员创建各自分支,等时机成熟时再合并到主干分支\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n什么是分支?简单地说,分支就是两个相对独立的时间线,正常情况下,独立的时间线永远不会有交集,彼此不知道对方的存在,只有特定情况下,两条时间线才会相遇,因为相遇...","summary":"什么是分支?简单地说,分支就是两个相对独立的时间线,正常情况下,独立的时间线永远不会有交集,彼此不知道对方的存在,只有特定情况下,两条时间线才会相遇,因为相遇,...","abstract":"什么是分支?简单地说,分支就是两个相对独立的时间线,正常情况下,独立的时间线永远不会有交集,彼此不知道对方的存在,只有特定情况下,两条时间线才会相遇,因为相遇,...","description":"","picture":"","coverImageUrl":"","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/19 10:13"},"authorId":2952369,"columnId":75668,"writeTime":1554275489,"updateTime":1554275489,"viewCount":70,"likeCount":3,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2680,"type":40,"actionInfo":{"articleId":1409885,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554275478,"detail":{"id":1409885,"articleId":1409885,"title":"git 入门教程之远程仓库\n                                                                            原","content":"entityMap|0|type|LINK|mutability|MUTABLE|data|url|https://github.com/|1|https://my.oschina.net/..github/usage.md|2|IMAGE|IMMUTABLE|imageUrl|https://ask.qcloudimg.com/http-save/yehe-2952369/804cfo7dnt.png|imageAlt|github-updated.png|blocks|key|2vkdt|text|unstyled|depth|inlineStyleRanges|entityRanges|cbt79|如果说本地仓库已经足够个人进行版本控制了,那么远程仓库则使多人合作开发成为可能.+如果你只是打算自己使用git,你的工作内容不需要发布给其他人看,那就用不到远程仓库的概念.|offset|length|style|CODE|1s3r|git+是分布式版本控制系统,分布式意味着同一个git+仓库+可以部署在不同的机器上,正如\"鸡生蛋蛋生鸡\"问题一样,不论如何,先要有一个原始仓库,然后才能分布到其他机器上去.|BOLD|201fb|充当原始仓库的机器要有一个特点那就是24h+开机且大家都能访问到,这个概念类似于\"中央服务器\".这样一来大家都可以从\"中央服务器\"下载最新代码,克隆到本地,本地发生更改后再推送给\"中央服务器\".如此一来,大家交流方便很多,轻松实现文件内容的共享.|e8v11|这种\"中央服务器\"比较有名的是国外的网站+github,当然国内也有不少类似服务.像这种\"中央服务器\"也可以自己搭建,现阶段搭建的话简直就是\"杀鸡焉用牛刀\"!|6nqm7|背景|header-two|b7a9m|关于如何注册配置相关请参考+github+教程|5cke9|为了和上述教程保持一致,项目名git-demo,先看一下当前工作区状态:|ae14k|#+查看文件列表\n$+ls\nLICENSE+++++README.md+++test.txt\n#+查看文件内容\n$+cat+test.txt\nadd+test.txt|code-block|syntax|javascript|flfps|现在测试一下本地更改能否推送到远程仓库,先在本地文件+test.txt+随便写点东西,然后添加(git+add),提交(git+commit),最后推送到远程仓库(git+push+origin+master).|8trbt|#+写入新的内容并提交到本地仓库\n$+echo+\"see+https://snowdreams1006.github.io/git/usage/remote-repository.html\"+>>+test.txt\n$+git+add+test.txt\n$+git+commit+-m+\"see+https://snowdreams1006.github.io/git/usage/remote-repository.html\"\n[master+b3d8193]+see+https://snowdreams1006.github.io/git/usage/remote-repository.html\n+1+file+changed,+1+insertion(%2B)\n\n#+推送到远程仓库\n$+git+push+origin+master\nCounting+objects:+3,+done.\nDelta+compression+using+up+to+4+threads.\nCompressing+objects:+100%25+(3/3),+done.\nWriting+objects:+100%25+(3/3),+359+bytes+%7C+359.00+KiB/s,+done.\nTotal+3+(delta+1),+reused+0+(delta+0)\nremote:+Resolving+deltas:+100%25+(1/1),+completed+with+1+local+object.\nTo+github.com:snowdreams1006/git-demo.git\n+++8e62564..b3d8193++master+->+master\n$+|62t6o|命令行没有报错证明我们已经成功推送到+github,现在登录+github+看一下有没有刚才我们提交的新内容.|afhf9|?|atomic|c9kbb|现在本地版本库和远程版本库已经能够正常建立关联了,此刻起将不再是独自一人在战斗!|13dr8|小结|ddsm2|创建已有本地仓库和远程仓库的关联|unordered-list-item|1ckhl|#+添加远程仓库关联\ngit+remote+add+origin+git@github.com:username/repos.git\n\n#+首次推送+master+分支的全部内容\ngit+push+-u+origin+master\n\n#+后续推送+master+分支的最新更改\ngit+push+origin+master|fstnq|从已有远程仓库克隆到本地仓库|53o29|#+克隆远程仓库到本地仓库\ngit+clone+git@github.com:username/repos.git\n\n#+推送+master+分支的最新更改\ngit+push+origin+master|ducfe|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|1G|3|0|0|3|O|6|5|9|0|0|L|6|0|0|0|E|9|1|0|F|8|0|0|R|8|1C|7|1O|A|2A|M|0|0|J|6|V|6|0|0|1|2|0|0|0|0|0|0|0^^$0|$1|$2|3|4|5|6|$7|8]]|9|$2|3|4|5|6|$7|A]]|B|$2|C|4|D|6|$E|F|G|H]]]|I|@$J|K|L|-4|2|M|N|23|O|@]|P|@]|6|$]]|$J|Q|L|R|2|M|N|24|O|@$S|25|T|26|U|V]]|P|@]|6|$]]|$J|W|L|X|2|M|N|27|O|@$S|28|T|29|U|V]|$S|2A|T|2B|U|V]|$S|2C|T|2D|U|Y]]|P|@]|6|$]]|$J|Z|L|10|2|M|N|2E|O|@]|P|@]|6|$]]|$J|11|L|12|2|M|N|2F|O|@]|P|@$S|2G|T|2H|J|2I]]|6|$]]|$J|13|L|14|2|15|N|2J|O|@]|P|@]|6|$]]|$J|16|L|17|2|M|N|2K|O|@]|P|@$S|2L|T|2M|J|2N]]|6|$]]|$J|18|L|19|2|M|N|2O|O|@$S|2P|T|2Q|U|V]]|P|@]|6|$]]|$J|1A|L|1B|2|1C|N|2R|O|@]|P|@]|6|$1D|1E]]|$J|1F|L|1G|2|M|N|2S|O|@$S|2T|T|2U|U|V]|$S|2V|T|2W|U|V]|$S|2X|T|2Y|U|V]|$S|2Z|T|30|U|V]]|P|@]|6|$]]|$J|1H|L|1I|2|1C|N|31|O|@]|P|@]|6|$1D|1E]]|$J|1J|L|1K|2|M|N|32|O|@$S|33|T|34|U|V]|$S|35|T|36|U|V]]|P|@]|6|$]]|$J|1L|L|1M|2|1N|N|37|O|@]|P|@$S|38|T|39|J|3A]]|6|$]]|$J|1O|L|1P|2|M|N|3B|O|@]|P|@]|6|$]]|$J|1Q|L|1R|2|15|N|3C|O|@]|P|@]|6|$]]|$J|1S|L|1T|2|1U|N|3D|O|@]|P|@]|6|$]]|$J|1V|L|1W|2|1C|N|3E|O|@]|P|@]|6|$1D|1E]]|$J|1X|L|1Y|2|1U|N|3F|O|@]|P|@]|6|$]]|$J|1Z|L|20|2|1C|N|3G|O|@]|P|@]|6|$1D|1E]]|$J|21|L|22|2|M|N|3H|O|@]|P|@]|6|$]]]]","plain":"\n如果说本地仓库已经足够个人进行版本控制了,那么远程仓库则使多人合作开发成为可能. 如果你只是打算自己使用git,你的工作内容不需要发布给其他人看,那就用不到远程仓库的概念.\ngit 是分布式版本控制系统,分布式意味着同一个git 仓库 可以部署在不同的机器上,正如\"鸡生蛋蛋生鸡\"问题一样,不论如何,先要有一个原始仓库,然后才能分布到其他机器上去.\n充当原始仓库的机器要有一个特点那就是24h 开机且大家都能访问到,这个概念类似于\"中央服务器\".这样一来大家都可以从\"中央服务器\"下载最新代码,克隆到本地,本地发生更改后再推送给\"中央服务器\".如此一来,大家交流方便很多,轻松实现文件内容的共享.\n这种\"中央服务器\"比较有名的是国外的网站 github,当然国内也有不少类似服务.像这种\"中央服务器\"也可以自己搭建,现阶段搭建的话简直就是\"杀鸡焉用牛刀\"!\n背景\n关于如何注册配置相关请参考 github 教程\n为了和上述教程保持一致,项目名git-demo,先看一下当前工作区状态:\n# 查看文件列表\n$ ls\nLICENSE     README.md   test.txt\n# 查看文件内容\n$ cat test.txt\nadd test.txt\n现在测试一下本地更改能否推送到远程仓库,先在本地文件 test.txt 随便写点东西,然后添加(git add),提交(git commit),最后推送到远程仓库(git push origin master).\n# 写入新的内容并提交到本地仓库\n$ echo \"see https://snowdreams1006.github.io/git/usage/remote-repository.html\" >> test.txt\n$ git add test.txt\n$ git commit -m \"see https://snowdreams1006.github.io/git/usage/remote-repository.html\"\n[master b3d8193] see https://snowdreams1006.github.io/git/usage/remote-repository.html\n 1 file changed, 1 insertion(+)\n\n# 推送到远程仓库\n$ git push origin master\nCounting objects: 3, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 359 bytes | 359.00 KiB/s, done.\nTotal 3 (delta 1), reused 0 (delta 0)\nremote: Resolving deltas: 100% (1/1), completed with 1 local object.\nTo github.com:snowdreams1006/git-demo.git\n   8e62564..b3d8193  master -> master\n$ \n命令行没有报错证明我们已经成功推送到 github,现在登录 github 看一下有没有刚才我们提交的新内容.\n?\n现在本地版本库和远程版本库已经能够正常建立关联了,此刻起将不再是独自一人在战斗!\n小结\n创建已有本地仓库和远程仓库的关联\n# 添加远程仓库关联\ngit remote add origin git@github.com:username/repos.git\n\n# 首次推送 master 分支的全部内容\ngit push -u origin master\n\n# 后续推送 master 分支的最新更改\ngit push origin master\n从已有远程仓库克隆到本地仓库\n# 克隆远程仓库到本地仓库\ngit clone git@github.com:username/repos.git\n\n# 推送 master 分支的最新更改\ngit push origin master\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n如果说本地仓库已经足够个人进行版本控制了,那么远程仓库则使多人合作开发成为可能. 如果你只是打算自己使用git,你的工作内容不需要发布给其他人看,那就用不到远...","summary":"如果说本地仓库已经足够个人进行版本控制了,那么远程仓库则使多人合作开发成为可能. 如果你只是打算自己使用git,你的工作内容不需要发布给其他人看,那就用不到远程...","abstract":"如果说本地仓库已经足够个人进行版本控制了,那么远程仓库则使多人合作开发成为可能. 如果你只是打算自己使用git,你的工作内容不需要发布给其他人看,那就用不到远程...","description":"","picture":"https://ask.qcloudimg.com/http-save/yehe-2952369/804cfo7dnt.png","coverImageUrl":"https://ask.qcloudimg.com/http-save/yehe-2952369/804cfo7dnt.png","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/18 12:21"},"authorId":2952369,"columnId":75668,"writeTime":1554275478,"updateTime":1554275478,"viewCount":105,"likeCount":3,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10667,"tagName":"开源"},{"tagId":10283,"tagName":"Git"},{"tagId":10284,"tagName":"GitHub"},{"tagId":10668,"tagName":"分布式"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2679,"type":40,"actionInfo":{"articleId":1409884,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554275462,"detail":{"id":1409884,"articleId":1409884,"title":"git 入门教程之删除文件\n                                                                            原","content":"entityMap|blocks|key|euupi|text|type|unstyled|depth|inlineStyleRanges|entityRanges|data|au4hs|删除文件|header-one|bvkd2|回忆一下文件的常见操作,新增文件,修改文件,删除文件等,新增和修改文件都单独讨论过,现在我们来研究一下如何删除文件.|2dvi8|你可能会说删除文件还不简单啊,直接+rm+-rf+<file>+即可,但是这仅仅是本地文件被删除了,对于+git+来说,文件并没有被删除.|offset|length|style|CODE|9b1b2|还记得我们开篇介绍git+时就说过,一切操作皆版本+,对于新增是一个版本,修改也是一个版本,就连删除都是一个版本.|d20lu|下面让我们看一下+git+中如何删除文件吧!|6s2sa|背景|header-two|ardh0|#+查看当前文件列表\n$+ls\nfile1.txt+++file2.txt+++file3.txt+++newFile.txt+test.txt\n#+新建待删除文件\n$+touch+delete.txt\n#+再次查看当前文件列表,确保新建文件成功\n$+ls\ndelete.txt++file2.txt+++newFile.txt\nfile1.txt+++file3.txt+++test.txt\n#+查看当前文件状态:+新文件+`delete.txt`+还没被跟踪\n$+git+status\nOn+branch+master\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n++++delete.txt\n\nnothing+added+to+commit+but+untracked+files+present+(use+\"git+add\"+to+track)\n#+添加新文件+`delete.txt`\n$+git+add+delete.txt\n#+查看文件状态:+已添加到暂存区,待提交到版本库\n$+git+status\nOn+branch+master\nChanges+to+be+committed:\n++(use+\"git+reset+HEAD+<file>...\"+to+unstage)\n\n++++new+file:+++delete.txt\n\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\n#+提交新文件+`delete.txt`\n$+git+commit+-m+\"add+delete.txt\"\n[master+7df386a]+add+delete.txt\n+1+file+changed,+0+insertions(%2B),+0+deletions(-)\n+create+mode+100644+delete.txt\n#+再次查看文件状态:+已经没有新文件+`delete.txt`+的更改信息\n$+git+status\nOn+branch+master\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\nnothing+added+to+commit+but+untracked+files+present+(use+\"git+add\"+to+track)\n$+|code-block|syntax|javascript|592ih|以上操作,我们简单创建+delete.txt+文件,添加(git+add)并提交(git+commit)+该文件,完成准备工作后,开始删除文件!|eqrpm|#+删除前文件列表\n$+ls\ndelete.txt++file2.txt+++newFile.txt\nfile1.txt+++file3.txt+++test.txt\n#+删除刚刚创建的文件+`delete.txt`\n$+rm+delete.txt\n#+删除后文件列表\n$+ls\nfile1.txt+++file2.txt+++file3.txt+++newFile.txt+test.txt\n#+当前文件状态:+`delete.txt`+文件已被删除,且未添加到暂存区\n$+git+status\nOn+branch+master\nChanges+not+staged+for+commit:\n++(use+\"git+add/rm+<file>...\"+to+update+what+will+be+committed)\n++(use+\"git+checkout+--+<file>...\"+to+discard+changes+in+working+directory)\n\n++++deleted:++++delete.txt\n\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\nno+changes+added+to+commit+(use+\"git+add\"+and/or+\"git+commit+-a\")\n$+|5p34f|本地删除+delete.txt+文件后,再次查看文件状态+git+status+发现+git+给了我们两条建议,其中一条+git+checkout+--+<file>+我们很熟悉,就是丢弃工作区的更改,此时此景下如果丢弃删除操作,相当于撤销删除,难怪说删除也是一个版本呢!|8qrdu|现在我们重点来看第一条建议+git+add/rm+<file>+,rm+是+remove+单词的缩写,即删除文件.|3qnkt|#+删除文件\n$+git+rm+delete.txt\nrm+'delete.txt'\n#+查看文件状态:+`delete.txt`+文件待提交\n$+git+status\nOn+branch+master\nChanges+to+be+committed:\n++(use+\"git+reset+HEAD+<file>...\"+to+unstage)\n\n++++deleted:++++delete.txt\n\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\n#+提交文件\n$+git+commit+-m+\"remove+delete.txt\"\n[master+6298070]+remove+delete.txt\n+1+file+changed,+0+insertions(%2B),+0+deletions(-)\n+delete+mode+100644+delete.txt\n#+再次查看文件状态\n$+git+status\nOn+branch+master\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\nnothing+added+to+commit+but+untracked+files+present+(use+\"git+add\"+to+track)\n$+|8bdsu|删除文件和添加文件类似,都是一次commit+,本地文件的任何更改都要添加到暂存区,然后提交到版本库.|eiqlk|小结|buhj3|删除文件和新增文件类似逻辑,git+rm+删除文件后,依然需要+git+commit+提交版本.|3krcq|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|0|I|D|1H|3|0|9|3|I|7|0|9|3|0|0|0|C|A|T|7|15|A|0|0|5|A|T|A|17|3|1P|M|0|E|H|X|2|12|6|0|0|G|6|0|0|E|6|W|A|0^^$0|$]|1|@$2|3|4|-4|5|6|7|1G|8|@]|9|@]|A|$]]|$2|B|4|C|5|D|7|1H|8|@]|9|@]|A|$]]|$2|E|4|F|5|6|7|1I|8|@]|9|@]|A|$]]|$2|G|4|H|5|6|7|1J|8|@$I|1K|J|1L|K|L]|$I|1M|J|1N|K|L]]|9|@]|A|$]]|$2|M|4|N|5|6|7|1O|8|@$I|1P|J|1Q|K|L]|$I|1R|J|1S|K|L]]|9|@]|A|$]]|$2|O|4|P|5|6|7|1T|8|@$I|1U|J|1V|K|L]]|9|@]|A|$]]|$2|Q|4|R|5|S|7|1W|8|@]|9|@]|A|$]]|$2|T|4|U|5|V|7|1X|8|@]|9|@]|A|$W|X]]|$2|Y|4|Z|5|6|7|1Y|8|@$I|1Z|J|20|K|L]|$I|21|J|22|K|L]|$I|23|J|24|K|L]]|9|@]|A|$]]|$2|10|4|11|5|V|7|25|8|@]|9|@]|A|$W|X]]|$2|12|4|13|5|6|7|26|8|@$I|27|J|28|K|L]|$I|29|J|2A|K|L]|$I|2B|J|2C|K|L]|$I|2D|J|2E|K|L]]|9|@]|A|$]]|$2|14|4|15|5|6|7|2F|8|@$I|2G|J|2H|K|L]|$I|2I|J|2J|K|L]|$I|2K|J|2L|K|L]]|9|@]|A|$]]|$2|16|4|17|5|V|7|2M|8|@]|9|@]|A|$W|X]]|$2|18|4|19|5|6|7|2N|8|@$I|2O|J|2P|K|L]]|9|@]|A|$]]|$2|1A|4|1B|5|S|7|2Q|8|@]|9|@]|A|$]]|$2|1C|4|1D|5|6|7|2R|8|@$I|2S|J|2T|K|L]|$I|2U|J|2V|K|L]]|9|@]|A|$]]|$2|1E|4|1F|5|6|7|2W|8|@]|9|@]|A|$]]]]","plain":"\n删除文件\n回忆一下文件的常见操作,新增文件,修改文件,删除文件等,新增和修改文件都单独讨论过,现在我们来研究一下如何删除文件.\n你可能会说删除文件还不简单啊,直接 rm -rf <file> 即可,但是这仅仅是本地文件被删除了,对于 git 来说,文件并没有被删除.\n还记得我们开篇介绍git 时就说过,一切操作皆版本 ,对于新增是一个版本,修改也是一个版本,就连删除都是一个版本.\n下面让我们看一下 git 中如何删除文件吧!\n背景\n# 查看当前文件列表\n$ ls\nfile1.txt   file2.txt   file3.txt   newFile.txt test.txt\n# 新建待删除文件\n$ touch delete.txt\n# 再次查看当前文件列表,确保新建文件成功\n$ ls\ndelete.txt  file2.txt   newFile.txt\nfile1.txt   file3.txt   test.txt\n# 查看当前文件状态: 新文件 `delete.txt` 还没被跟踪\n$ git status\nOn branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n    delete.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n# 添加新文件 `delete.txt`\n$ git add delete.txt\n# 查看文件状态: 已添加到暂存区,待提交到版本库\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n    new file:   delete.txt\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\n# 提交新文件 `delete.txt`\n$ git commit -m \"add delete.txt\"\n[master 7df386a] add delete.txt\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 delete.txt\n# 再次查看文件状态: 已经没有新文件 `delete.txt` 的更改信息\n$ git status\nOn branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n$ \n以上操作,我们简单创建 delete.txt 文件,添加(git add)并提交(git commit) 该文件,完成准备工作后,开始删除文件!\n# 删除前文件列表\n$ ls\ndelete.txt  file2.txt   newFile.txt\nfile1.txt   file3.txt   test.txt\n# 删除刚刚创建的文件 `delete.txt`\n$ rm delete.txt\n# 删除后文件列表\n$ ls\nfile1.txt   file2.txt   file3.txt   newFile.txt test.txt\n# 当前文件状态: `delete.txt` 文件已被删除,且未添加到暂存区\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    deleted:    delete.txt\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ \n本地删除 delete.txt 文件后,再次查看文件状态 git status 发现 git 给了我们两条建议,其中一条 git checkout -- <file> 我们很熟悉,就是丢弃工作区的更改,此时此景下如果丢弃删除操作,相当于撤销删除,难怪说删除也是一个版本呢!\n现在我们重点来看第一条建议 git add/rm <file> ,rm 是 remove 单词的缩写,即删除文件.\n# 删除文件\n$ git rm delete.txt\nrm 'delete.txt'\n# 查看文件状态: `delete.txt` 文件待提交\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n    deleted:    delete.txt\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\n# 提交文件\n$ git commit -m \"remove delete.txt\"\n[master 6298070] remove delete.txt\n 1 file changed, 0 insertions(+), 0 deletions(-)\n delete mode 100644 delete.txt\n# 再次查看文件状态\n$ git status\nOn branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n$ \n删除文件和添加文件类似,都是一次commit ,本地文件的任何更改都要添加到暂存区,然后提交到版本库.\n小结\n删除文件和新增文件类似逻辑,git rm 删除文件后,依然需要 git commit 提交版本.\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n删除文件\n回忆一下文件的常见操作,新增文件,修改文件,删除文件等,新增和修改文件都单独讨论过,现在我们来研究一下如何删除文件.\n你可能会说删除文件还不简单啊,...","summary":"回忆一下文件的常见操作,新增文件,修改文件,删除文件等,新增和修改文件都单独讨论过,现在我们来研究一下如何删除文件.","abstract":"回忆一下文件的常见操作,新增文件,修改文件,删除文件等,新增和修改文件都单独讨论过,现在我们来研究一下如何删除文件.","description":"","picture":"","coverImageUrl":"","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/18 12:14"},"authorId":2952369,"columnId":75668,"writeTime":1554275462,"updateTime":1554275462,"viewCount":66,"likeCount":2,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2673,"type":50,"actionInfo":{"columnId":75668,"columnOwnerUid":2952369},"createTime":1553570025,"detail":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}]}}