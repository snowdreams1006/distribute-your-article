{"code":0,"msg":"ok","data":{"total":78,"list":[{"id":2680,"type":40,"actionInfo":{"articleId":1409885,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554275478,"detail":{"id":1409885,"articleId":1409885,"title":"git 入门教程之远程仓库\n                                                                            原","content":"entityMap|0|type|LINK|mutability|MUTABLE|data|url|https://github.com/|1|https://my.oschina.net/..github/usage.md|2|IMAGE|IMMUTABLE|imageUrl|https://ask.qcloudimg.com/http-save/yehe-2952369/804cfo7dnt.png|imageAlt|github-updated.png|blocks|key|2vkdt|text|unstyled|depth|inlineStyleRanges|entityRanges|cbt79|如果说本地仓库已经足够个人进行版本控制了,那么远程仓库则使多人合作开发成为可能.+如果你只是打算自己使用git,你的工作内容不需要发布给其他人看,那就用不到远程仓库的概念.|offset|length|style|CODE|1s3r|git+是分布式版本控制系统,分布式意味着同一个git+仓库+可以部署在不同的机器上,正如\"鸡生蛋蛋生鸡\"问题一样,不论如何,先要有一个原始仓库,然后才能分布到其他机器上去.|BOLD|201fb|充当原始仓库的机器要有一个特点那就是24h+开机且大家都能访问到,这个概念类似于\"中央服务器\".这样一来大家都可以从\"中央服务器\"下载最新代码,克隆到本地,本地发生更改后再推送给\"中央服务器\".如此一来,大家交流方便很多,轻松实现文件内容的共享.|e8v11|这种\"中央服务器\"比较有名的是国外的网站+github,当然国内也有不少类似服务.像这种\"中央服务器\"也可以自己搭建,现阶段搭建的话简直就是\"杀鸡焉用牛刀\"!|6nqm7|背景|header-two|b7a9m|关于如何注册配置相关请参考+github+教程|5cke9|为了和上述教程保持一致,项目名git-demo,先看一下当前工作区状态:|ae14k|#+查看文件列表\n$+ls\nLICENSE+++++README.md+++test.txt\n#+查看文件内容\n$+cat+test.txt\nadd+test.txt|code-block|syntax|javascript|flfps|现在测试一下本地更改能否推送到远程仓库,先在本地文件+test.txt+随便写点东西,然后添加(git+add),提交(git+commit),最后推送到远程仓库(git+push+origin+master).|8trbt|#+写入新的内容并提交到本地仓库\n$+echo+\"see+https://snowdreams1006.github.io/git/usage/remote-repository.html\"+>>+test.txt\n$+git+add+test.txt\n$+git+commit+-m+\"see+https://snowdreams1006.github.io/git/usage/remote-repository.html\"\n[master+b3d8193]+see+https://snowdreams1006.github.io/git/usage/remote-repository.html\n+1+file+changed,+1+insertion(%2B)\n\n#+推送到远程仓库\n$+git+push+origin+master\nCounting+objects:+3,+done.\nDelta+compression+using+up+to+4+threads.\nCompressing+objects:+100%25+(3/3),+done.\nWriting+objects:+100%25+(3/3),+359+bytes+%7C+359.00+KiB/s,+done.\nTotal+3+(delta+1),+reused+0+(delta+0)\nremote:+Resolving+deltas:+100%25+(1/1),+completed+with+1+local+object.\nTo+github.com:snowdreams1006/git-demo.git\n+++8e62564..b3d8193++master+->+master\n$+|62t6o|命令行没有报错证明我们已经成功推送到+github,现在登录+github+看一下有没有刚才我们提交的新内容.|afhf9|?|atomic|c9kbb|现在本地版本库和远程版本库已经能够正常建立关联了,此刻起将不再是独自一人在战斗!|13dr8|小结|ddsm2|创建已有本地仓库和远程仓库的关联|unordered-list-item|1ckhl|#+添加远程仓库关联\ngit+remote+add+origin+git@github.com:username/repos.git\n\n#+首次推送+master+分支的全部内容\ngit+push+-u+origin+master\n\n#+后续推送+master+分支的最新更改\ngit+push+origin+master|fstnq|从已有远程仓库克隆到本地仓库|53o29|#+克隆远程仓库到本地仓库\ngit+clone+git@github.com:username/repos.git\n\n#+推送+master+分支的最新更改\ngit+push+origin+master|ducfe|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|1G|3|0|0|3|O|6|5|9|0|0|L|6|0|0|0|E|9|1|0|F|8|0|0|R|8|1C|7|1O|A|2A|M|0|0|J|6|V|6|0|0|1|2|0|0|0|0|0|0|0^^$0|$1|$2|3|4|5|6|$7|8]]|9|$2|3|4|5|6|$7|A]]|B|$2|C|4|D|6|$E|F|G|H]]]|I|@$J|K|L|-4|2|M|N|23|O|@]|P|@]|6|$]]|$J|Q|L|R|2|M|N|24|O|@$S|25|T|26|U|V]]|P|@]|6|$]]|$J|W|L|X|2|M|N|27|O|@$S|28|T|29|U|V]|$S|2A|T|2B|U|V]|$S|2C|T|2D|U|Y]]|P|@]|6|$]]|$J|Z|L|10|2|M|N|2E|O|@]|P|@]|6|$]]|$J|11|L|12|2|M|N|2F|O|@]|P|@$S|2G|T|2H|J|2I]]|6|$]]|$J|13|L|14|2|15|N|2J|O|@]|P|@]|6|$]]|$J|16|L|17|2|M|N|2K|O|@]|P|@$S|2L|T|2M|J|2N]]|6|$]]|$J|18|L|19|2|M|N|2O|O|@$S|2P|T|2Q|U|V]]|P|@]|6|$]]|$J|1A|L|1B|2|1C|N|2R|O|@]|P|@]|6|$1D|1E]]|$J|1F|L|1G|2|M|N|2S|O|@$S|2T|T|2U|U|V]|$S|2V|T|2W|U|V]|$S|2X|T|2Y|U|V]|$S|2Z|T|30|U|V]]|P|@]|6|$]]|$J|1H|L|1I|2|1C|N|31|O|@]|P|@]|6|$1D|1E]]|$J|1J|L|1K|2|M|N|32|O|@$S|33|T|34|U|V]|$S|35|T|36|U|V]]|P|@]|6|$]]|$J|1L|L|1M|2|1N|N|37|O|@]|P|@$S|38|T|39|J|3A]]|6|$]]|$J|1O|L|1P|2|M|N|3B|O|@]|P|@]|6|$]]|$J|1Q|L|1R|2|15|N|3C|O|@]|P|@]|6|$]]|$J|1S|L|1T|2|1U|N|3D|O|@]|P|@]|6|$]]|$J|1V|L|1W|2|1C|N|3E|O|@]|P|@]|6|$1D|1E]]|$J|1X|L|1Y|2|1U|N|3F|O|@]|P|@]|6|$]]|$J|1Z|L|20|2|1C|N|3G|O|@]|P|@]|6|$1D|1E]]|$J|21|L|22|2|M|N|3H|O|@]|P|@]|6|$]]]]","plain":"\n如果说本地仓库已经足够个人进行版本控制了,那么远程仓库则使多人合作开发成为可能. 如果你只是打算自己使用git,你的工作内容不需要发布给其他人看,那就用不到远程仓库的概念.\ngit 是分布式版本控制系统,分布式意味着同一个git 仓库 可以部署在不同的机器上,正如\"鸡生蛋蛋生鸡\"问题一样,不论如何,先要有一个原始仓库,然后才能分布到其他机器上去.\n充当原始仓库的机器要有一个特点那就是24h 开机且大家都能访问到,这个概念类似于\"中央服务器\".这样一来大家都可以从\"中央服务器\"下载最新代码,克隆到本地,本地发生更改后再推送给\"中央服务器\".如此一来,大家交流方便很多,轻松实现文件内容的共享.\n这种\"中央服务器\"比较有名的是国外的网站 github,当然国内也有不少类似服务.像这种\"中央服务器\"也可以自己搭建,现阶段搭建的话简直就是\"杀鸡焉用牛刀\"!\n背景\n关于如何注册配置相关请参考 github 教程\n为了和上述教程保持一致,项目名git-demo,先看一下当前工作区状态:\n# 查看文件列表\n$ ls\nLICENSE     README.md   test.txt\n# 查看文件内容\n$ cat test.txt\nadd test.txt\n现在测试一下本地更改能否推送到远程仓库,先在本地文件 test.txt 随便写点东西,然后添加(git add),提交(git commit),最后推送到远程仓库(git push origin master).\n# 写入新的内容并提交到本地仓库\n$ echo \"see https://snowdreams1006.github.io/git/usage/remote-repository.html\" >> test.txt\n$ git add test.txt\n$ git commit -m \"see https://snowdreams1006.github.io/git/usage/remote-repository.html\"\n[master b3d8193] see https://snowdreams1006.github.io/git/usage/remote-repository.html\n 1 file changed, 1 insertion(+)\n\n# 推送到远程仓库\n$ git push origin master\nCounting objects: 3, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 359 bytes | 359.00 KiB/s, done.\nTotal 3 (delta 1), reused 0 (delta 0)\nremote: Resolving deltas: 100% (1/1), completed with 1 local object.\nTo github.com:snowdreams1006/git-demo.git\n   8e62564..b3d8193  master -> master\n$ \n命令行没有报错证明我们已经成功推送到 github,现在登录 github 看一下有没有刚才我们提交的新内容.\n?\n现在本地版本库和远程版本库已经能够正常建立关联了,此刻起将不再是独自一人在战斗!\n小结\n创建已有本地仓库和远程仓库的关联\n# 添加远程仓库关联\ngit remote add origin git@github.com:username/repos.git\n\n# 首次推送 master 分支的全部内容\ngit push -u origin master\n\n# 后续推送 master 分支的最新更改\ngit push origin master\n从已有远程仓库克隆到本地仓库\n# 克隆远程仓库到本地仓库\ngit clone git@github.com:username/repos.git\n\n# 推送 master 分支的最新更改\ngit push origin master\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n如果说本地仓库已经足够个人进行版本控制了,那么远程仓库则使多人合作开发成为可能. 如果你只是打算自己使用git,你的工作内容不需要发布给其他人看,那就用不到远...","summary":"如果说本地仓库已经足够个人进行版本控制了,那么远程仓库则使多人合作开发成为可能. 如果你只是打算自己使用git,你的工作内容不需要发布给其他人看,那就用不到远程...","abstract":"如果说本地仓库已经足够个人进行版本控制了,那么远程仓库则使多人合作开发成为可能. 如果你只是打算自己使用git,你的工作内容不需要发布给其他人看,那就用不到远程...","description":"","picture":"https://ask.qcloudimg.com/http-save/yehe-2952369/804cfo7dnt.png","coverImageUrl":"https://ask.qcloudimg.com/http-save/yehe-2952369/804cfo7dnt.png","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/18 12:21"},"authorId":2952369,"columnId":75668,"writeTime":1554275478,"updateTime":1554275478,"viewCount":110,"likeCount":3,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10667,"tagName":"开源"},{"tagId":10283,"tagName":"Git"},{"tagId":10284,"tagName":"GitHub"},{"tagId":10668,"tagName":"分布式"}],"isCommentEnable":true,"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":77,"followCount":12,"createdTime":1553570025}}},{"id":2679,"type":40,"actionInfo":{"articleId":1409884,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554275462,"detail":{"id":1409884,"articleId":1409884,"title":"git 入门教程之删除文件\n                                                                            原","content":"entityMap|blocks|key|euupi|text|type|unstyled|depth|inlineStyleRanges|entityRanges|data|au4hs|删除文件|header-one|bvkd2|回忆一下文件的常见操作,新增文件,修改文件,删除文件等,新增和修改文件都单独讨论过,现在我们来研究一下如何删除文件.|2dvi8|你可能会说删除文件还不简单啊,直接+rm+-rf+<file>+即可,但是这仅仅是本地文件被删除了,对于+git+来说,文件并没有被删除.|offset|length|style|CODE|9b1b2|还记得我们开篇介绍git+时就说过,一切操作皆版本+,对于新增是一个版本,修改也是一个版本,就连删除都是一个版本.|d20lu|下面让我们看一下+git+中如何删除文件吧!|6s2sa|背景|header-two|ardh0|#+查看当前文件列表\n$+ls\nfile1.txt+++file2.txt+++file3.txt+++newFile.txt+test.txt\n#+新建待删除文件\n$+touch+delete.txt\n#+再次查看当前文件列表,确保新建文件成功\n$+ls\ndelete.txt++file2.txt+++newFile.txt\nfile1.txt+++file3.txt+++test.txt\n#+查看当前文件状态:+新文件+`delete.txt`+还没被跟踪\n$+git+status\nOn+branch+master\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n++++delete.txt\n\nnothing+added+to+commit+but+untracked+files+present+(use+\"git+add\"+to+track)\n#+添加新文件+`delete.txt`\n$+git+add+delete.txt\n#+查看文件状态:+已添加到暂存区,待提交到版本库\n$+git+status\nOn+branch+master\nChanges+to+be+committed:\n++(use+\"git+reset+HEAD+<file>...\"+to+unstage)\n\n++++new+file:+++delete.txt\n\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\n#+提交新文件+`delete.txt`\n$+git+commit+-m+\"add+delete.txt\"\n[master+7df386a]+add+delete.txt\n+1+file+changed,+0+insertions(%2B),+0+deletions(-)\n+create+mode+100644+delete.txt\n#+再次查看文件状态:+已经没有新文件+`delete.txt`+的更改信息\n$+git+status\nOn+branch+master\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\nnothing+added+to+commit+but+untracked+files+present+(use+\"git+add\"+to+track)\n$+|code-block|syntax|javascript|592ih|以上操作,我们简单创建+delete.txt+文件,添加(git+add)并提交(git+commit)+该文件,完成准备工作后,开始删除文件!|eqrpm|#+删除前文件列表\n$+ls\ndelete.txt++file2.txt+++newFile.txt\nfile1.txt+++file3.txt+++test.txt\n#+删除刚刚创建的文件+`delete.txt`\n$+rm+delete.txt\n#+删除后文件列表\n$+ls\nfile1.txt+++file2.txt+++file3.txt+++newFile.txt+test.txt\n#+当前文件状态:+`delete.txt`+文件已被删除,且未添加到暂存区\n$+git+status\nOn+branch+master\nChanges+not+staged+for+commit:\n++(use+\"git+add/rm+<file>...\"+to+update+what+will+be+committed)\n++(use+\"git+checkout+--+<file>...\"+to+discard+changes+in+working+directory)\n\n++++deleted:++++delete.txt\n\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\nno+changes+added+to+commit+(use+\"git+add\"+and/or+\"git+commit+-a\")\n$+|5p34f|本地删除+delete.txt+文件后,再次查看文件状态+git+status+发现+git+给了我们两条建议,其中一条+git+checkout+--+<file>+我们很熟悉,就是丢弃工作区的更改,此时此景下如果丢弃删除操作,相当于撤销删除,难怪说删除也是一个版本呢!|8qrdu|现在我们重点来看第一条建议+git+add/rm+<file>+,rm+是+remove+单词的缩写,即删除文件.|3qnkt|#+删除文件\n$+git+rm+delete.txt\nrm+'delete.txt'\n#+查看文件状态:+`delete.txt`+文件待提交\n$+git+status\nOn+branch+master\nChanges+to+be+committed:\n++(use+\"git+reset+HEAD+<file>...\"+to+unstage)\n\n++++deleted:++++delete.txt\n\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\n#+提交文件\n$+git+commit+-m+\"remove+delete.txt\"\n[master+6298070]+remove+delete.txt\n+1+file+changed,+0+insertions(%2B),+0+deletions(-)\n+delete+mode+100644+delete.txt\n#+再次查看文件状态\n$+git+status\nOn+branch+master\nUntracked+files:\n++(use+\"git+add+<file>...\"+to+include+in+what+will+be+committed)\n\n++++.DS_Store\n\nnothing+added+to+commit+but+untracked+files+present+(use+\"git+add\"+to+track)\n$+|8bdsu|删除文件和添加文件类似,都是一次commit+,本地文件的任何更改都要添加到暂存区,然后提交到版本库.|eiqlk|小结|buhj3|删除文件和新增文件类似逻辑,git+rm+删除文件后,依然需要+git+commit+提交版本.|3krcq|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|0|I|D|1H|3|0|9|3|I|7|0|9|3|0|0|0|C|A|T|7|15|A|0|0|5|A|T|A|17|3|1P|M|0|E|H|X|2|12|6|0|0|G|6|0|0|E|6|W|A|0^^$0|$]|1|@$2|3|4|-4|5|6|7|1G|8|@]|9|@]|A|$]]|$2|B|4|C|5|D|7|1H|8|@]|9|@]|A|$]]|$2|E|4|F|5|6|7|1I|8|@]|9|@]|A|$]]|$2|G|4|H|5|6|7|1J|8|@$I|1K|J|1L|K|L]|$I|1M|J|1N|K|L]]|9|@]|A|$]]|$2|M|4|N|5|6|7|1O|8|@$I|1P|J|1Q|K|L]|$I|1R|J|1S|K|L]]|9|@]|A|$]]|$2|O|4|P|5|6|7|1T|8|@$I|1U|J|1V|K|L]]|9|@]|A|$]]|$2|Q|4|R|5|S|7|1W|8|@]|9|@]|A|$]]|$2|T|4|U|5|V|7|1X|8|@]|9|@]|A|$W|X]]|$2|Y|4|Z|5|6|7|1Y|8|@$I|1Z|J|20|K|L]|$I|21|J|22|K|L]|$I|23|J|24|K|L]]|9|@]|A|$]]|$2|10|4|11|5|V|7|25|8|@]|9|@]|A|$W|X]]|$2|12|4|13|5|6|7|26|8|@$I|27|J|28|K|L]|$I|29|J|2A|K|L]|$I|2B|J|2C|K|L]|$I|2D|J|2E|K|L]]|9|@]|A|$]]|$2|14|4|15|5|6|7|2F|8|@$I|2G|J|2H|K|L]|$I|2I|J|2J|K|L]|$I|2K|J|2L|K|L]]|9|@]|A|$]]|$2|16|4|17|5|V|7|2M|8|@]|9|@]|A|$W|X]]|$2|18|4|19|5|6|7|2N|8|@$I|2O|J|2P|K|L]]|9|@]|A|$]]|$2|1A|4|1B|5|S|7|2Q|8|@]|9|@]|A|$]]|$2|1C|4|1D|5|6|7|2R|8|@$I|2S|J|2T|K|L]|$I|2U|J|2V|K|L]]|9|@]|A|$]]|$2|1E|4|1F|5|6|7|2W|8|@]|9|@]|A|$]]]]","plain":"\n删除文件\n回忆一下文件的常见操作,新增文件,修改文件,删除文件等,新增和修改文件都单独讨论过,现在我们来研究一下如何删除文件.\n你可能会说删除文件还不简单啊,直接 rm -rf <file> 即可,但是这仅仅是本地文件被删除了,对于 git 来说,文件并没有被删除.\n还记得我们开篇介绍git 时就说过,一切操作皆版本 ,对于新增是一个版本,修改也是一个版本,就连删除都是一个版本.\n下面让我们看一下 git 中如何删除文件吧!\n背景\n# 查看当前文件列表\n$ ls\nfile1.txt   file2.txt   file3.txt   newFile.txt test.txt\n# 新建待删除文件\n$ touch delete.txt\n# 再次查看当前文件列表,确保新建文件成功\n$ ls\ndelete.txt  file2.txt   newFile.txt\nfile1.txt   file3.txt   test.txt\n# 查看当前文件状态: 新文件 `delete.txt` 还没被跟踪\n$ git status\nOn branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n    delete.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n# 添加新文件 `delete.txt`\n$ git add delete.txt\n# 查看文件状态: 已添加到暂存区,待提交到版本库\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n    new file:   delete.txt\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\n# 提交新文件 `delete.txt`\n$ git commit -m \"add delete.txt\"\n[master 7df386a] add delete.txt\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 delete.txt\n# 再次查看文件状态: 已经没有新文件 `delete.txt` 的更改信息\n$ git status\nOn branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n$ \n以上操作,我们简单创建 delete.txt 文件,添加(git add)并提交(git commit) 该文件,完成准备工作后,开始删除文件!\n# 删除前文件列表\n$ ls\ndelete.txt  file2.txt   newFile.txt\nfile1.txt   file3.txt   test.txt\n# 删除刚刚创建的文件 `delete.txt`\n$ rm delete.txt\n# 删除后文件列表\n$ ls\nfile1.txt   file2.txt   file3.txt   newFile.txt test.txt\n# 当前文件状态: `delete.txt` 文件已被删除,且未添加到暂存区\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    deleted:    delete.txt\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ \n本地删除 delete.txt 文件后,再次查看文件状态 git status 发现 git 给了我们两条建议,其中一条 git checkout -- <file> 我们很熟悉,就是丢弃工作区的更改,此时此景下如果丢弃删除操作,相当于撤销删除,难怪说删除也是一个版本呢!\n现在我们重点来看第一条建议 git add/rm <file> ,rm 是 remove 单词的缩写,即删除文件.\n# 删除文件\n$ git rm delete.txt\nrm 'delete.txt'\n# 查看文件状态: `delete.txt` 文件待提交\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n    deleted:    delete.txt\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\n# 提交文件\n$ git commit -m \"remove delete.txt\"\n[master 6298070] remove delete.txt\n 1 file changed, 0 insertions(+), 0 deletions(-)\n delete mode 100644 delete.txt\n# 再次查看文件状态\n$ git status\nOn branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    .DS_Store\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n$ \n删除文件和添加文件类似,都是一次commit ,本地文件的任何更改都要添加到暂存区,然后提交到版本库.\n小结\n删除文件和新增文件类似逻辑,git rm 删除文件后,依然需要 git commit 提交版本.\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n删除文件\n回忆一下文件的常见操作,新增文件,修改文件,删除文件等,新增和修改文件都单独讨论过,现在我们来研究一下如何删除文件.\n你可能会说删除文件还不简单啊,...","summary":"回忆一下文件的常见操作,新增文件,修改文件,删除文件等,新增和修改文件都单独讨论过,现在我们来研究一下如何删除文件.","abstract":"回忆一下文件的常见操作,新增文件,修改文件,删除文件等,新增和修改文件都单独讨论过,现在我们来研究一下如何删除文件.","description":"","picture":"","coverImageUrl":"","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/18 12:14"},"authorId":2952369,"columnId":75668,"writeTime":1554275462,"updateTime":1554275462,"viewCount":69,"likeCount":2,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"}],"isCommentEnable":true,"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":77,"followCount":12,"createdTime":1553570025}}},{"id":2673,"type":50,"actionInfo":{"columnId":75668,"columnOwnerUid":2952369},"createTime":1553570025,"detail":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":77,"followCount":12,"createdTime":1553570025}}]}}