{"code":0,"msg":"ok","data":{"total":65,"list":[{"id":2697,"type":40,"actionInfo":{"articleId":1409904,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554276088,"detail":{"id":1409904,"articleId":1409904,"title":"gitbook 入门教程之前置知识\n                                                                            原","content":"entityMap|0|type|LINK|mutability|MUTABLE|data|url|https://snowdreams1006.github.io/%2522|1|IMAGE|IMMUTABLE|imageUrl|https://ask.qcloudimg.com/http-save/yehe-2952369/jvkkc3szen.png|imageAlt|雪之梦技术驿站的头像|2|https://snowdreams1006.github.io/markdown/|3|https://snowdreams1006.github.io/git/|blocks|key|bog15|text|unstyled|depth|inlineStyleRanges|entityRanges|btc5i|markdown+是一种简化的+html+语法,相比于+txt+无格式文本更强大.|offset|length|style|CODE|b3sd|你可以用专门的软件去编辑+markdown+文件,就像需要使用软件编辑+txt+文件一样,当然也可以什么软件也不用,甚至直接在记事本或命令行书写,只不过这样的缺点就是无法实时预览输出效果,安全依赖个人经验和想象力了.|a45oa|+markdown+文件后缀名是.md,安装了相应插件的浏览器或专门软件能够看到输出效果.\n+|blockquote|2h5q5|标题|header-three|bs7g2|+语法格式:+#+%2B+空格+%2B+文本\n+|d4bqi|大多数markdown编辑器支持+h1~h6+级标题,而富文本编辑器一般仅支持到二级标题.|BOLD|ed779|示例:|73p2i|#+标题1\n##+标题2|code-block|syntax|javascript|9c6ek|效果:|a2gmo|标题1|header-one|bm84f|标题2|header-two|3vbb8|列表|dhl14|列表包括有序列表,无序列表和任务列表,并支持列表嵌套.|9c96m|大多数+markdown+编辑器和富文本编辑器均支持有序列表和无序列表,而任务列表和列表嵌套支持度就不是很好,存在平台兼容性问题.|45bf6|有序列表|header-four|61h6n|+语法格式：数字+%2B+.+%2B+空格+%2B+文本\n+|8cikj|d58ia|1.+有序列表1+\n2.+有序列表2+\n3.+有序列表3+|4de5c|4mqcf|有序列表1|ordered-list-item|15e9g|有序列表2|2suso|有序列表3|eiihl|无序列表|7ijnp|+语法格式：'-+或+*+或+%2B'+%2B+空格+%2B+文本\n+|5hjat|daunv|-+无序列表1+\n*+无序列表2+\n%2B+无序列表3+|aaucc|ebvjt|无序列表1|unordered-list-item|34qs0|无序列表2|7pds3|无序列表3|161v0|链接和图片|co7ll|markdown+编辑器和富文本编辑器均支持链接和图片,值得注意的是有些平台限制或禁止外链.|46p6p|链接|bsv66|+语法格式：[显示文本]+%2B+(链接地址)\n+|2im29|866as|[https://snowdreams1006.github.io](https://snowdreams1006.github.io/)|2tapr|7tmg9|https://snowdreams1006.github.io|6fadq|图片|7h7ia|+语法格式：!+%2B+[图片标题]+%2B+(图片地址)\n+|be1h9|casju|![雪之梦技术驿站的头像](https://avatars0.githubusercontent.com/u/23238267?s=400&u=c60a9628495b4bfb4c6ee1a7bba8e3a8d265ca96&v=4)|61p2u|9pa6f|?|atomic|bq4kg|代码|4uv8r|代码分为单行代码和多行代码,其中多行代码也叫做代码块.|637ll|大多数+markdown+编辑器均支持代码,富文本编辑器支持度不一样,有的支持单行代码有的支持代码块.|7jgpm|单行代码|fh9of|+语法格式：反引号+%2B+单行代码+%2B++反引号\n+|65jdf|b3jc4|`code`|arn42|8i8uj|code|29a60|多行代码|844ps|+语法格式：连续三个反引号+%2B+多行代码+%2B+连续三个反引号\n+|b4jvq|7aq6g|function+fun(){\n+echo+\"这是一句非常牛逼的代码\";\n}\nfun();|oi03|5ueq8|function+fun(){\n++echo+\"这是一句非常牛逼的代码\";\n}\nfun();|c67pr|+这里的富文本支持语法指的是+markdown+渲染后的内容能否正常显示,并不是指+markdown语法本身能够正常渲染,更多详情请参考+markdown+快速入门\n+|8d9n|git+基本知识|7mo3r|git+是全世界最先进的分布式版本控制系统,帮助项目更好地进行管理,支持版本历史管理和多人写作管理等功能.|ITALIC|eqr0t|简单地说,可以理解为一种优雅的文档备份方式,支持云端备份,多人协作等特点.|d73ic|初始化项目|4ok9i|+语法格式:+git+init\n+|df51e|适合从零开始的本地项目,初始化后的项目才是能够被+git+管理的项目.|75pqv|eraj0|git+init|bt486|克隆项目|77na2|+语法格式:+git+clone\n+|d4g2k|适合已有远程项目需要下载到本地,作用是将远程项目克隆到本地,和+git+init+实现类似的功能.|bikpd|ec1ld|git+clone+git@github.com:username/username.github.io.git|1ij2e|添加文件|b0s0o|+语法格式:+git+add\n+|bq0uc|将文件添加到暂存区,支持多次添加文件,相当于写入缓存区.|dkob9|4u8oe|git+add+.|bdd1s|提交文件|c9e7s|+语法格式:+git+commit\n+|apca7|将暂存区内容提交到版本库,完成一次历史版本.|e07gh|4c4f2|git+commit+-m+\"写入提交备注,简短说明下提交意图和目标\"|fjbak|推送文件|2glhn|+语法格式:+git+push\n+|98ktu|将本地版本库推送到远程版本库,相当于本地文件备份到云端服务器.|3t8vb|ebvua|git+push+origin+master|8ada0|拉取文件|egrcd|+语法格式:+git+pull\n+|bqhdv|将远程版本库拉取到本地版本库,相当于云端服务器文件恢复到本地.|1i9ou|2o2gh|git+pull|410jm|查看状态|dbu9l|+语法格式:+git+status\n+|f74bc|查看当前文件状态,包括文件被新增,被修改,被删除,未提交等等.|cul8b|b5ejf|git+status+|arnm5|比较差异|96lrt|+语法格式:+git+diff\n+|ceh7p|查看两个文件之间的具体差异|dd7g3|7tma|git+diff+|esgqa|历史日志|8me32|+语法格式:+git+log\n+|19c52|查看版本库的提交历史日志|ecg8c|5eskp|git+log|ai9iu|+上述仅介绍了+git+的简单命令,实际使用情况远不止这些,更多详情请参考+git+入门教程\n+|4o7bi|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|8|G|4|S|3|0|D|8|10|3|0|1|8|G|3|0|0|7|1|B|2|G|2|0|3|8|H|5|S|6|0|0|0|0|0|0|0|0|4|8|H|6|0|0|6|2|B|1|F|2|K|2|0|0|0|0|0|0|0|0|7|9|K|2|P|2|0|0|0|0|0|0|0|0|0|8|D|6|0|0|6|6|F|6|0|0|0|0|0|W|0|0|0|6|1|A|6|J|6|0|0|0|0|0|1|1|0|0|N|3|0|4|8|M|6|0|0|6|3|C|4|K|3|0|0|0|0|0|4|0|0|6|7|G|4|N|7|0|0|0|0|0|F|8|16|8|1X|D|2|0|0|3|0|0|3|8|3|C|9|0|O|4|T|4|0|0|7|8|0|P|3|0|0|0|0|7|9|0|W|8|0|0|0|0|7|7|0|0|0|0|0|7|A|0|0|0|0|0|7|8|0|0|0|0|0|7|8|0|0|0|0|0|7|A|0|0|0|0|0|7|8|0|0|0|0|0|7|7|0|0|0|0|8|3|12|8|3|0^^$0|$1|$2|3|4|5|6|$7|8]]|9|$2|A|4|B|6|$C|D|E|F]]|G|$2|3|4|5|6|$7|H]]|I|$2|3|4|5|6|$7|J]]]|K|@$L|M|N|-4|2|O|P|6S|Q|@]|R|@]|6|$]]|$L|S|N|T|2|O|P|6T|Q|@$U|6U|V|6V|W|X]|$U|6W|V|6X|W|X]|$U|6Y|V|6Z|W|X]]|R|@]|6|$]]|$L|Y|N|Z|2|O|P|70|Q|@$U|71|V|72|W|X]|$U|73|V|74|W|X]]|R|@]|6|$]]|$L|10|N|11|2|12|P|75|Q|@$U|76|V|77|W|X]|$U|78|V|79|W|X]]|R|@]|6|$]]|$L|13|N|14|2|15|P|7A|Q|@]|R|@]|6|$]]|$L|16|N|17|2|12|P|7B|Q|@$U|7C|V|7D|W|X]|$U|7E|V|7F|W|X]|$U|7G|V|7H|W|X]]|R|@]|6|$]]|$L|18|N|19|2|O|P|7I|Q|@$U|7J|V|7K|W|X]|$U|7L|V|7M|W|X]|$U|7N|V|7O|W|1A]]|R|@]|6|$]]|$L|1B|N|1C|2|O|P|7P|Q|@]|R|@]|6|$]]|$L|1D|N|1E|2|1F|P|7Q|Q|@]|R|@]|6|$1G|1H]]|$L|1I|N|1J|2|O|P|7R|Q|@]|R|@]|6|$]]|$L|1K|N|1L|2|1M|P|7S|Q|@]|R|@]|6|$]]|$L|1N|N|1O|2|1P|P|7T|Q|@]|R|@]|6|$]]|$L|1Q|N|1R|2|15|P|7U|Q|@]|R|@]|6|$]]|$L|1S|N|1T|2|O|P|7V|Q|@]|R|@]|6|$]]|$L|1U|N|1V|2|O|P|7W|Q|@$U|7X|V|7Y|W|X]|$U|7Z|V|80|W|1A]]|R|@]|6|$]]|$L|1W|N|1X|2|1Y|P|81|Q|@]|R|@]|6|$]]|$L|1Z|N|20|2|12|P|82|Q|@$U|83|V|84|W|X]|$U|85|V|86|W|X]|$U|87|V|88|W|X]|$U|89|V|8A|W|X]]|R|@]|6|$]]|$L|21|N|1C|2|O|P|8B|Q|@]|R|@]|6|$]]|$L|22|N|23|2|1F|P|8C|Q|@]|R|@]|6|$1G|1H]]|$L|24|N|1J|2|O|P|8D|Q|@]|R|@]|6|$]]|$L|25|N|26|2|27|P|8E|Q|@]|R|@]|6|$]]|$L|28|N|29|2|27|P|8F|Q|@]|R|@]|6|$]]|$L|2A|N|2B|2|27|P|8G|Q|@]|R|@]|6|$]]|$L|2C|N|2D|2|1Y|P|8H|Q|@]|R|@]|6|$]]|$L|2E|N|2F|2|12|P|8I|Q|@$U|8J|V|8K|W|X]|$U|8L|V|8M|W|X]|$U|8N|V|8O|W|X]]|R|@]|6|$]]|$L|2G|N|1C|2|O|P|8P|Q|@]|R|@]|6|$]]|$L|2H|N|2I|2|1F|P|8Q|Q|@]|R|@]|6|$1G|1H]]|$L|2J|N|1J|2|O|P|8R|Q|@]|R|@]|6|$]]|$L|2K|N|2L|2|2M|P|8S|Q|@]|R|@]|6|$]]|$L|2N|N|2O|2|2M|P|8T|Q|@]|R|@]|6|$]]|$L|2P|N|2Q|2|2M|P|8U|Q|@]|R|@]|6|$]]|$L|2R|N|2S|2|15|P|8V|Q|@]|R|@]|6|$]]|$L|2T|N|2U|2|O|P|8W|Q|@$U|8X|V|8Y|W|X]|$U|8Z|V|90|W|1A]]|R|@]|6|$]]|$L|2V|N|2W|2|1Y|P|91|Q|@]|R|@]|6|$]]|$L|2X|N|2Y|2|12|P|92|Q|@$U|93|V|94|W|X]|$U|95|V|96|W|X]]|R|@]|6|$]]|$L|2Z|N|1C|2|O|P|97|Q|@]|R|@]|6|$]]|$L|30|N|31|2|1F|P|98|Q|@]|R|@]|6|$1G|1H]]|$L|32|N|1J|2|O|P|99|Q|@]|R|@]|6|$]]|$L|33|N|34|2|O|P|9A|Q|@]|R|@$U|9B|V|9C|L|9D]]|6|$]]|$L|35|N|36|2|1Y|P|9E|Q|@]|R|@]|6|$]]|$L|37|N|38|2|12|P|9F|Q|@$U|9G|V|9H|W|X]|$U|9I|V|9J|W|X]|$U|9K|V|9L|W|X]]|R|@]|6|$]]|$L|39|N|1C|2|O|P|9M|Q|@]|R|@]|6|$]]|$L|3A|N|3B|2|1F|P|9N|Q|@]|R|@]|6|$1G|1H]]|$L|3C|N|1J|2|O|P|9O|Q|@]|R|@]|6|$]]|$L|3D|N|3E|2|3F|P|9P|Q|@]|R|@$U|9Q|V|9R|L|9S]]|6|$]]|$L|3G|N|3H|2|15|P|9T|Q|@]|R|@]|6|$]]|$L|3I|N|3J|2|O|P|9U|Q|@$U|9V|V|9W|W|1A]]|R|@]|6|$]]|$L|3K|N|3L|2|O|P|9X|Q|@$U|9Y|V|9Z|W|X]|$U|A0|V|A1|W|1A]]|R|@]|6|$]]|$L|3M|N|3N|2|1Y|P|A2|Q|@]|R|@]|6|$]]|$L|3O|N|3P|2|12|P|A3|Q|@$U|A4|V|A5|W|X]|$U|A6|V|A7|W|X]|$U|A8|V|A9|W|X]]|R|@]|6|$]]|$L|3Q|N|1C|2|O|P|AA|Q|@]|R|@]|6|$]]|$L|3R|N|3S|2|1F|P|AB|Q|@]|R|@]|6|$1G|1H]]|$L|3T|N|1J|2|O|P|AC|Q|@]|R|@]|6|$]]|$L|3U|N|3V|2|O|P|AD|Q|@$U|AE|V|AF|W|X]]|R|@]|6|$]]|$L|3W|N|3X|2|1Y|P|AG|Q|@]|R|@]|6|$]]|$L|3Y|N|3Z|2|12|P|AH|Q|@$U|AI|V|AJ|W|X]|$U|AK|V|AL|W|X]|$U|AM|V|AN|W|X]]|R|@]|6|$]]|$L|40|N|1C|2|O|P|AO|Q|@]|R|@]|6|$]]|$L|41|N|42|2|1F|P|AP|Q|@]|R|@]|6|$1G|1H]]|$L|43|N|1J|2|O|P|AQ|Q|@]|R|@]|6|$]]|$L|44|N|45|2|1F|P|AR|Q|@]|R|@]|6|$1G|1H]]|$L|46|N|47|2|12|P|AS|Q|@$U|AT|V|AU|W|X]|$U|AV|V|AW|W|X]]|R|@$U|AX|V|AY|L|AZ]]|6|$]]|$L|48|N|49|2|1P|P|B0|Q|@$U|B1|V|B2|W|X]]|R|@]|6|$]]|$L|4A|N|4B|2|O|P|B3|Q|@$U|B4|V|B5|W|X]|$U|B6|V|B7|W|4C]|$U|B8|V|B9|W|1A]]|R|@]|6|$]]|$L|4D|N|4E|2|O|P|BA|Q|@$U|BB|V|BC|W|1A]|$U|BD|V|BE|W|1A]]|R|@]|6|$]]|$L|4F|N|4G|2|15|P|BF|Q|@]|R|@]|6|$]]|$L|4H|N|4I|2|12|P|BG|Q|@$U|BH|V|BI|W|X]]|R|@]|6|$]]|$L|4J|N|4K|2|O|P|BJ|Q|@$U|BK|V|BL|W|X]]|R|@]|6|$]]|$L|4L|N|1C|2|O|P|BM|Q|@]|R|@]|6|$]]|$L|4M|N|4N|2|1F|P|BN|Q|@]|R|@]|6|$1G|1H]]|$L|4O|N|4P|2|15|P|BO|Q|@]|R|@]|6|$]]|$L|4Q|N|4R|2|12|P|BP|Q|@$U|BQ|V|BR|W|X]]|R|@]|6|$]]|$L|4S|N|4T|2|O|P|BS|Q|@$U|BT|V|BU|W|X]]|R|@]|6|$]]|$L|4U|N|1C|2|O|P|BV|Q|@]|R|@]|6|$]]|$L|4V|N|4W|2|1F|P|BW|Q|@]|R|@]|6|$1G|1H]]|$L|4X|N|4Y|2|15|P|BX|Q|@]|R|@]|6|$]]|$L|4Z|N|50|2|12|P|BY|Q|@$U|BZ|V|C0|W|X]]|R|@]|6|$]]|$L|51|N|52|2|O|P|C1|Q|@]|R|@]|6|$]]|$L|53|N|1C|2|O|P|C2|Q|@]|R|@]|6|$]]|$L|54|N|55|2|1F|P|C3|Q|@]|R|@]|6|$1G|1H]]|$L|56|N|57|2|15|P|C4|Q|@]|R|@]|6|$]]|$L|58|N|59|2|12|P|C5|Q|@$U|C6|V|C7|W|X]]|R|@]|6|$]]|$L|5A|N|5B|2|O|P|C8|Q|@]|R|@]|6|$]]|$L|5C|N|1C|2|O|P|C9|Q|@]|R|@]|6|$]]|$L|5D|N|5E|2|1F|P|CA|Q|@]|R|@]|6|$1G|1H]]|$L|5F|N|5G|2|15|P|CB|Q|@]|R|@]|6|$]]|$L|5H|N|5I|2|12|P|CC|Q|@$U|CD|V|CE|W|X]]|R|@]|6|$]]|$L|5J|N|5K|2|O|P|CF|Q|@]|R|@]|6|$]]|$L|5L|N|1C|2|O|P|CG|Q|@]|R|@]|6|$]]|$L|5M|N|5N|2|1F|P|CH|Q|@]|R|@]|6|$1G|1H]]|$L|5O|N|5P|2|15|P|CI|Q|@]|R|@]|6|$]]|$L|5Q|N|5R|2|12|P|CJ|Q|@$U|CK|V|CL|W|X]]|R|@]|6|$]]|$L|5S|N|5T|2|O|P|CM|Q|@]|R|@]|6|$]]|$L|5U|N|1C|2|O|P|CN|Q|@]|R|@]|6|$]]|$L|5V|N|5W|2|1F|P|CO|Q|@]|R|@]|6|$1G|1H]]|$L|5X|N|5Y|2|15|P|CP|Q|@]|R|@]|6|$]]|$L|5Z|N|60|2|12|P|CQ|Q|@$U|CR|V|CS|W|X]]|R|@]|6|$]]|$L|61|N|62|2|O|P|CT|Q|@]|R|@]|6|$]]|$L|63|N|1C|2|O|P|CU|Q|@]|R|@]|6|$]]|$L|64|N|65|2|1F|P|CV|Q|@]|R|@]|6|$1G|1H]]|$L|66|N|67|2|15|P|CW|Q|@]|R|@]|6|$]]|$L|68|N|69|2|12|P|CX|Q|@$U|CY|V|CZ|W|X]]|R|@]|6|$]]|$L|6A|N|6B|2|O|P|D0|Q|@]|R|@]|6|$]]|$L|6C|N|1C|2|O|P|D1|Q|@]|R|@]|6|$]]|$L|6D|N|6E|2|1F|P|D2|Q|@]|R|@]|6|$1G|1H]]|$L|6F|N|6G|2|15|P|D3|Q|@]|R|@]|6|$]]|$L|6H|N|6I|2|12|P|D4|Q|@$U|D5|V|D6|W|X]]|R|@]|6|$]]|$L|6J|N|6K|2|O|P|D7|Q|@]|R|@]|6|$]]|$L|6L|N|1C|2|O|P|D8|Q|@]|R|@]|6|$]]|$L|6M|N|6N|2|1F|P|D9|Q|@]|R|@]|6|$1G|1H]]|$L|6O|N|6P|2|12|P|DA|Q|@$U|DB|V|DC|W|X]]|R|@$U|DD|V|DE|L|DF]]|6|$]]|$L|6Q|N|6R|2|O|P|DG|Q|@]|R|@]|6|$]]]]","plain":"\nmarkdown 是一种简化的 html 语法,相比于 txt 无格式文本更强大.\n你可以用专门的软件去编辑 markdown 文件,就像需要使用软件编辑 txt 文件一样,当然也可以什么软件也不用,甚至直接在记事本或命令行书写,只不过这样的缺点就是无法实时预览输出效果,安全依赖个人经验和想象力了.\n markdown 文件后缀名是.md,安装了相应插件的浏览器或专门软件能够看到输出效果.\n \n标题\n 语法格式: # + 空格 + 文本\n \n大多数markdown编辑器支持 h1~h6 级标题,而富文本编辑器一般仅支持到二级标题.\n示例:\n# 标题1\n## 标题2\n效果:\n标题1\n标题2\n列表\n列表包括有序列表,无序列表和任务列表,并支持列表嵌套.\n大多数 markdown 编辑器和富文本编辑器均支持有序列表和无序列表,而任务列表和列表嵌套支持度就不是很好,存在平台兼容性问题.\n有序列表\n 语法格式：数字 + . + 空格 + 文本\n \n示例:\n1. 有序列表1 \n2. 有序列表2 \n3. 有序列表3 \n效果:\n有序列表1\n有序列表2\n有序列表3\n无序列表\n 语法格式：'- 或 * 或 +' + 空格 + 文本\n \n示例:\n- 无序列表1 \n* 无序列表2 \n+ 无序列表3 \n效果:\n无序列表1\n无序列表2\n无序列表3\n链接和图片\nmarkdown 编辑器和富文本编辑器均支持链接和图片,值得注意的是有些平台限制或禁止外链.\n链接\n 语法格式：[显示文本] + (链接地址)\n \n示例:\n[https://snowdreams1006.github.io](https://snowdreams1006.github.io/)\n效果:\nhttps://snowdreams1006.github.io\n图片\n 语法格式：! + [图片标题] + (图片地址)\n \n示例:\n![雪之梦技术驿站的头像](https://avatars0.githubusercontent.com/u/23238267?s=400&u=c60a9628495b4bfb4c6ee1a7bba8e3a8d265ca96&v=4)\n效果:\n?\n代码\n代码分为单行代码和多行代码,其中多行代码也叫做代码块.\n大多数 markdown 编辑器均支持代码,富文本编辑器支持度不一样,有的支持单行代码有的支持代码块.\n单行代码\n 语法格式：反引号 + 单行代码 +  反引号\n \n示例:\n`code`\n效果:\ncode\n多行代码\n 语法格式：连续三个反引号 + 多行代码 + 连续三个反引号\n \n示例:\nfunction fun(){\n echo \"这是一句非常牛逼的代码\";\n}\nfun();\n效果:\nfunction fun(){\n  echo \"这是一句非常牛逼的代码\";\n}\nfun();\n 这里的富文本支持语法指的是 markdown 渲染后的内容能否正常显示,并不是指 markdown语法本身能够正常渲染,更多详情请参考 markdown 快速入门\n \ngit 基本知识\ngit 是全世界最先进的分布式版本控制系统,帮助项目更好地进行管理,支持版本历史管理和多人写作管理等功能.\n简单地说,可以理解为一种优雅的文档备份方式,支持云端备份,多人协作等特点.\n初始化项目\n 语法格式: git init\n \n适合从零开始的本地项目,初始化后的项目才是能够被 git 管理的项目.\n示例:\ngit init\n克隆项目\n 语法格式: git clone\n \n适合已有远程项目需要下载到本地,作用是将远程项目克隆到本地,和 git init 实现类似的功能.\n示例:\ngit clone git@github.com:username/username.github.io.git\n添加文件\n 语法格式: git add\n \n将文件添加到暂存区,支持多次添加文件,相当于写入缓存区.\n示例:\ngit add .\n提交文件\n 语法格式: git commit\n \n将暂存区内容提交到版本库,完成一次历史版本.\n示例:\ngit commit -m \"写入提交备注,简短说明下提交意图和目标\"\n推送文件\n 语法格式: git push\n \n将本地版本库推送到远程版本库,相当于本地文件备份到云端服务器.\n示例:\ngit push origin master\n拉取文件\n 语法格式: git pull\n \n将远程版本库拉取到本地版本库,相当于云端服务器文件恢复到本地.\n示例:\ngit pull\n查看状态\n 语法格式: git status\n \n查看当前文件状态,包括文件被新增,被修改,被删除,未提交等等.\n示例:\ngit status \n比较差异\n 语法格式: git diff\n \n查看两个文件之间的具体差异\n示例:\ngit diff \n历史日志\n 语法格式: git log\n \n查看版本库的提交历史日志\n示例:\ngit log\n 上述仅介绍了 git 的简单命令,实际使用情况远不止这些,更多详情请参考 git 入门教程\n \n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\nmarkdown 是一种简化的 html 语法,相比于 txt 无格式文本更强大.\n你可以用专门的软件去编辑 markdown 文件,就像需要使用软件编辑 t...","summary":"markdown 是一种简化的 html 语法,相比于 txt 无格式文本更强大.","abstract":"markdown 是一种简化的 html 语法,相比于 txt 无格式文本更强大.","description":"","picture":"https://ask.qcloudimg.com/http-save/yehe-2952369/jvkkc3szen.png","coverImageUrl":"https://ask.qcloudimg.com/http-save/yehe-2952369/jvkkc3szen.png","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"14:27"},"authorId":2952369,"columnId":75668,"writeTime":1554276088,"updateTime":1554276088,"viewCount":59,"likeCount":3,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"},{"tagId":10757,"tagName":"Markdown"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2696,"type":40,"actionInfo":{"articleId":1409903,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554276072,"detail":{"id":1409903,"articleId":1409903,"title":"gitbook 入门教程之 gitbook 简介\n                                                                           ","content":"entityMap|0|type|LINK|mutability|MUTABLE|data|url|https://docs.gitbook.com/|1|https://toolchain.gitbook.com/|2|https://snowdreams1006.github.io/markdown/|3|https://snowdreams1006.github.io/git/|4|IMAGE|IMMUTABLE|imageUrl|https://ask.qcloudimg.com/http-save/yehe-2952369/l454p5t5t9.png|imageAlt|gitbook-preview.png|5|https://ask.qcloudimg.com/http-save/yehe-2952369/vwy9qxeery.png|gitbook-www.png|6|https://ask.qcloudimg.com/http-save/yehe-2952369/kqn5lsd3vp.png|gitbook-doc.png|7|https://www.gitbook.com/|8|https://legacy.gitbook.com/|9|10|11|https://git-scm.com/|12|https://github.com/|blocks|key|2quon|text|unstyled|depth|inlineStyleRanges|entityRanges|9iikt|gitBook+是一个基于node.js的命令行工具,使用+github/git+和+markdown/asciiDoc+构建精美的电子书.|offset|length|style|CODE|8b918|gitbook+支持输出静态网页和电子书等多种格式,其中默认输出静态网页格式.|d5bmf|gitbook+不仅支持本地构建电子书,而且可以托管在+gitbook+官网上,并享受在线发布和托管图书的便利,完整的文档请参考+gitbook+新版文档(需FQ)或+gitbook+旧版文档(不需FQ)|c8l7v|适用场景|header-two|4k30u|不仅适用于软件说明文档的发布更新,同样适用于文本文档的连载更新.|BOLD|3i1er|既适合具有一定编程经验的软件开发从业者,也适用于不满足传统书写方式的文学创作者.|1cmm8|简而言之,gitbook+可以条理清晰地整理出零碎知识,打造专属你自己的电子书,漂亮的主题,丰富的插件让你的知识变得从此与众不同!|cjjon|git+%2B+markdown+=+gitbook,其中+git+可以管理书籍内容的变更,并将其托管到云端实现团队协作,而+markdown+简洁的语法特点,使得我们不必关心布局排版问题,专注创作,重拾写作乐趣!|96n0a|+如果你还不了解+git+和+markdown+相关知识,赶紧去学习+markdown+快速入门+和+git+入门教程+吧!\n+|blockquote|5dmm|先睹为快|696b5|gitbook+教程|header-three|441be|?|atomic|258l6|gitbook+官网|6i8fd|7fu9e|gitbook+文档|423js|532kb|参考文档|8g0lc|gitbook+官网(新)|unordered-list-item|2kc2r|gitbook+官网(旧)|d16dk|gitbook+文档(新)|a9g7u|gitbook+文档(旧)|6tls6|git+官网|1ekh|github+官网|d367d|+gitbook+新版需要FQ,旧版不需要FQ\n+|c7nju|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|7|D|7|U|A|17|H|0|0|7|0|0|7|S|7|1T|H|0|2C|I|1|0|0|5|6|M|4|0|C|7|O|7|0|5|7|F|4|10|3|0|0|O|S|3|1P|8|0|9|3|F|8|Z|D|2|1F|8|3|0|0|0|0|1|4|0|0|0|1|5|0|0|0|1|6|0|0|0|D|7|0|0|D|8|0|0|D|9|0|0|D|A|0|0|6|B|0|0|9|C|0|1|7|0^^$0|$1|$2|3|4|5|6|$7|8]]|9|$2|3|4|5|6|$7|A]]|B|$2|3|4|5|6|$7|C]]|D|$2|3|4|5|6|$7|E]]|F|$2|G|4|H|6|$I|J|K|L]]|M|$2|G|4|H|6|$I|N|K|O]]|P|$2|G|4|H|6|$I|Q|K|R]]|S|$2|3|4|5|6|$7|T]]|U|$2|3|4|5|6|$7|V]]|W|$2|3|4|5|6|$7|8]]|X|$2|3|4|5|6|$7|A]]|Y|$2|3|4|5|6|$7|Z]]|10|$2|3|4|5|6|$7|11]]]|12|@$13|14|15|-4|2|16|17|2W|18|@]|19|@]|6|$]]|$13|1A|15|1B|2|16|17|2X|18|@$1C|2Y|1D|2Z|1E|1F]|$1C|30|1D|31|1E|1F]|$1C|32|1D|33|1E|1F]|$1C|34|1D|35|1E|1F]]|19|@]|6|$]]|$13|1G|15|1H|2|16|17|36|18|@$1C|37|1D|38|1E|1F]]|19|@]|6|$]]|$13|1I|15|1J|2|16|17|39|18|@$1C|3A|1D|3B|1E|1F]|$1C|3C|1D|3D|1E|1F]]|19|@$1C|3E|1D|3F|13|3G]|$1C|3H|1D|3I|13|3J]]|6|$]]|$13|1K|15|1L|2|1M|17|3K|18|@]|19|@]|6|$]]|$13|1N|15|1O|2|16|17|3L|18|@$1C|3M|1D|3N|1E|1P]|$1C|3O|1D|3P|1E|1P]]|19|@]|6|$]]|$13|1Q|15|1R|2|16|17|3Q|18|@$1C|3R|1D|3S|1E|1P]|$1C|3T|1D|3U|1E|1P]]|19|@]|6|$]]|$13|1S|15|1T|2|16|17|3V|18|@$1C|3W|1D|3X|1E|1F]|$1C|3Y|1D|3Z|1E|1P]|$1C|40|1D|41|1E|1P]]|19|@]|6|$]]|$13|1U|15|1V|2|16|17|42|18|@$1C|43|1D|44|1E|1F]|$1C|45|1D|46|1E|1F]|$1C|47|1D|48|1E|1F]]|19|@]|6|$]]|$13|1W|15|1X|2|1Y|17|49|18|@$1C|4A|1D|4B|1E|1F]|$1C|4C|1D|4D|1E|1F]]|19|@$1C|4E|1D|4F|13|4G]|$1C|4H|1D|4I|13|4J]]|6|$]]|$13|1Z|15|20|2|1M|17|4K|18|@]|19|@]|6|$]]|$13|21|15|22|2|23|17|4L|18|@]|19|@]|6|$]]|$13|24|15|25|2|26|17|4M|18|@]|19|@$1C|4N|1D|4O|13|4P]]|6|$]]|$13|27|15|28|2|23|17|4Q|18|@]|19|@]|6|$]]|$13|29|15|25|2|26|17|4R|18|@]|19|@$1C|4S|1D|4T|13|4U]]|6|$]]|$13|2A|15|2B|2|23|17|4V|18|@]|19|@]|6|$]]|$13|2C|15|25|2|26|17|4W|18|@]|19|@$1C|4X|1D|4Y|13|4Z]]|6|$]]|$13|2D|15|2E|2|1M|17|50|18|@]|19|@]|6|$]]|$13|2F|15|2G|2|2H|17|51|18|@]|19|@$1C|52|1D|53|13|54]]|6|$]]|$13|2I|15|2J|2|2H|17|55|18|@]|19|@$1C|56|1D|57|13|58]]|6|$]]|$13|2K|15|2L|2|2H|17|59|18|@]|19|@$1C|5A|1D|5B|13|5C]]|6|$]]|$13|2M|15|2N|2|2H|17|5D|18|@]|19|@$1C|5E|1D|5F|13|5G]]|6|$]]|$13|2O|15|2P|2|2H|17|5H|18|@]|19|@$1C|5I|1D|5J|13|5K]]|6|$]]|$13|2Q|15|2R|2|2H|17|5L|18|@]|19|@$1C|5M|1D|5N|13|5O]]|6|$]]|$13|2S|15|2T|2|1Y|17|5P|18|@$1C|5Q|1D|5R|1E|1F]]|19|@]|6|$]]|$13|2U|15|2V|2|16|17|5S|18|@]|19|@]|6|$]]]]","plain":"\ngitBook 是一个基于node.js的命令行工具,使用 github/git 和 markdown/asciiDoc 构建精美的电子书.\ngitbook 支持输出静态网页和电子书等多种格式,其中默认输出静态网页格式.\ngitbook 不仅支持本地构建电子书,而且可以托管在 gitbook 官网上,并享受在线发布和托管图书的便利,完整的文档请参考 gitbook 新版文档(需FQ)或 gitbook 旧版文档(不需FQ)\n适用场景\n不仅适用于软件说明文档的发布更新,同样适用于文本文档的连载更新.\n既适合具有一定编程经验的软件开发从业者,也适用于不满足传统书写方式的文学创作者.\n简而言之,gitbook 可以条理清晰地整理出零碎知识,打造专属你自己的电子书,漂亮的主题,丰富的插件让你的知识变得从此与众不同!\ngit + markdown = gitbook,其中 git 可以管理书籍内容的变更,并将其托管到云端实现团队协作,而 markdown 简洁的语法特点,使得我们不必关心布局排版问题,专注创作,重拾写作乐趣!\n 如果你还不了解 git 和 markdown 相关知识,赶紧去学习 markdown 快速入门 和 git 入门教程 吧!\n \n先睹为快\ngitbook 教程\n?\ngitbook 官网\n?\ngitbook 文档\n?\n参考文档\ngitbook 官网(新)\ngitbook 官网(旧)\ngitbook 文档(新)\ngitbook 文档(旧)\ngit 官网\ngithub 官网\n gitbook 新版需要FQ,旧版不需要FQ\n \n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\ngitBook 是一个基于node.js的命令行工具,使用 github/git 和 markdown/asciiDoc 构建精美的电子书.\ngitbook ...","summary":"gitBook 是一个基于node.js的命令行工具,使用 github/git 和 markdown/asciiDoc 构建精美的电子书.","abstract":"gitBook 是一个基于node.js的命令行工具,使用 github/git 和 markdown/asciiDoc 构建精美的电子书.","description":"","picture":"https://ask.qcloudimg.com/http-save/yehe-2952369/l454p5t5t9.png","coverImageUrl":"https://ask.qcloudimg.com/http-save/yehe-2952369/l454p5t5t9.png","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"14:47"},"authorId":2952369,"columnId":75668,"writeTime":1554276072,"updateTime":1554276072,"viewCount":98,"likeCount":3,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10757,"tagName":"Markdown"},{"tagId":10283,"tagName":"Git"},{"tagId":10284,"tagName":"GitHub"},{"tagId":10667,"tagName":"开源"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2695,"type":40,"actionInfo":{"articleId":1409902,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554276057,"detail":{"id":1409902,"articleId":1409902,"title":"git 入门教程之备忘录[译]\n                                                                            转","content":"entityMap|0|type|LINK|mutability|MUTABLE|data|url|http://www.git-tower.com/learn|1|http://rogerdudler.github.io/git-guide/|2|http://www.git-scm.org/|3|https://www.git-tower.com/learn/cheat-sheets/git|blocks|key|23suo|text|unstyled|depth|inlineStyleRanges|entityRanges|1e3rj|备忘录[译]|header-one|ci587|创建+%7C+Create|header-two|bk957|克隆一个已存在的仓库+%7C+Clone+an+existing+repository|header-three|cl9l1|git+clone+git@github.com:snowdreams1006/snowdreams1006.github.io.git|code-block|syntax|javascript|d7hpn|创建一个新的本地仓库+%7C+Create+a+new+local+repository|abr11|git+init+|c5rir|本地更改+%7C+Local+Changes|f3v77|工作目录中已更改文件+%7C+Changed+files+in+your+working+directory|e2b4t|git+status|f9q01|已追踪文件的更改+%7C+Changes+to+tracked+files|9q5jh|git+diff+|1fhgu|添加当前全部更改到下次提交版本+%7C+Add+all+current+changes+to+next+commit|8pdbk|git+add+.+|1dfan|添加文件中某些更改到下次提交版本+%7C+Add+some+changes+in+<file>+to+next+commit|4f9rf|git+add+-p+<file>|dtnk3|提交已追踪文件的全部本地更改+%7C+Commit+all+local+changes+in+tracked+files|slh9|git+commit+-a|ao3g0|提交上一次暂存区更改+%7C+Commit+previously+staged+changes|ucc7|git+commit+|b91gk|更改上次提交+%7C+Change+the+last+commit|1ifih|+没有更改已发布的提交+%7C+Don't+amend+publishd+commits!\n+|blockquote|8smp8|git+commit+--amend|3ipun|提交历史+%7C+Commit+history|e41l2|显示全部提交,以最新的开头+%7C+Show+all+commits,starting+with+newest|fcgvg|git+log|8a3tj|显示某个文件一段时间内的更改+%7C+Show+changes+over+time+for+a+specific+file|3vc3g|git+log+-p+<file>|7ld8b|某文件是谁在什么时候更改了什么内容+%7C+Who+changed+what+and+when+in+<file>|9oo6|git+blame+<file>|m8oi|分支和标签+%7C+Branches+&+Tags|7lutc|列出全部已存在的分支+%7C+List+all+existing+branches|5m6qg|git+branch+-av|c69hp|切换到+HEAD+分支+%7C+Switch+HEAD+branch|8psme|git+checkout+<branch>|15d3u|基于当前+HEAD+创建新分支+%7C+Create+a+new+branch+based+on+your+curent+HEAD|bk0co|git+branch+<new-branch>|1o8j9|基于远程分支创建新的正在追踪分支+%7C+Create+a+new+tracking+branch+based+on+a+remote+branch|cr3uu|git+checkout+--track+<remote/branch>|6jiul|删除一个本地分支+%7C+Delete+a+local+branch|a0v5i|git+branch+-d+<branch>|9d0mm|为当前提交打上标签+%7C+Make+the+current+commit+with+a+tag|6l130|git+tag+<tag-name>|27q29|更新和发布+%7C+Update+&+Publish|4tfhk|列出当前全部已配置的远程仓库+%7C+List+all+currently+configured+remotes|bpgdn|git+remote+-v|d0rv6|显示远程仓库信息+%7C+Show+information+about+a+remote|6fneq|git+remote+show+<remote>|2lsap|添加<remote>的远程仓库+%7C+Add+new+remote+repository+named+<remote>|8k451|git+remote+add+<shortname>+<url>|5bbfv|下载来自<remote>远程仓库的所有更改但是不合并到+HEAD+%7C+Download+all+changes+from+<remote>+but+don't+integrate+into+HEAD|8r73m|git+fetch+<remote>|a54b6|下载来自<remote>远程仓库指定分支的所有更改并且自动合并到+HEAD+%7C+Download+changes+and+directly+merge/integrate+into+HEAD|1toag|git+pull+<remote>+<branch>|c42ps|在<remote>远程仓库上发布本地更改+%7C+Publish+local+changes+on+a+remote|cui6g|git+push+<remote>+<branch>|4qut4|在<remote>远程仓库上删除分支+%7C+Delete+a+branch+on+the+branch|bhqhm|git+branch+-dr+<remote/branch>|7gcn3|发布你的标签+%7C+Publish+your+tags|co6ot|git+push+--tags|ddjv|合并和变基+%7C+MERGE+&+REBASE|8th30|合并指定分支到你的+HEAD+%7C+Merge+<branch>+into+your+current+HEAD|dn94m|git+merge+<branch>|6fm0e|变基到当前HEAD+%7C+Rebase+your+current+HEAD+onto+<branch>|4v331|+不要变基已发布的提交+%7C+Don't+rebase+published+commits!\n+|iu69|git+rebase+<branch>|7hmua|取消变基+%7C+Abort+a+rebase|30ofa|git+rebase+--abort|8tofh|使用已配置的冲突工具去解决冲突+%7C+Use+your+configured+merge+tool+to+solve+conflicts|2e8ei|git+mergetool|fohlv|使用编辑器手工解决冲突然后(解决之后)标记文件已解决冲突+%7C+Use+your+editor+to+manually+solve+conflicts+and+(after+resolving)+mark+file+as+resolved|62lb3|git+add+<resolved-file>\ngit+rm+<resolved-file>|ci7mi|撤销+%7C+UNDO|a0gpe|丢弃工作区全部更改+%7C+Discard+all+local+changes+in+your+working+directory|8i619|git+reset+--hard+HEAD|e541b|丢弃指定文件的本地更改+%7C+Discard+local+changes+in+a+specific+file|egdg1|git+checkout+HEAD+<file>|ekaov|抵消一个提交(通过产生一个新的相反的提交)+%7C+Revert+a+commit+(by+producing+a+new+commit+with+contrary+changes)|2ga6|git+revert+<file>|hv3h|重置当前+HEAD+指针到上一个提交...然后丢弃自那以后的全部更改+%7C+Reset+your+HEAD+pointer+to+a+previous+commit+...+and+discard+all+changes+since+then|1r31u|git+reset+--hard+<commit>|1sna6|...然后作为未缓存更改保存全部更改+%7C+...+and+preserve+all+changes+as+unstaged+change|93irb|git+reset+<commit>|2vij1|...然后保存未提交的本地更改+%7C+...+and+preserve+all+changes+as+unstaged+change|56e2r|git+reset+--keep+<commit>|cs09n|建议+%7C+SUGGESTION|6089t|提交相关更改+%7C+COMMIT+RELATED+CHANGES|7gihj|提交应该是相关更改的包装,例如,修复两个不同的+bug+应该产生两个单独的提交.+小的提交让其他开发者更容易理解此次更改,并且万一出错方便回滚.+在暂存区这类工具以及暂存部分文件的能力下,git+很容易创建细粒度的提交.|5kfra|A+commit+should+be+a+wrapper+for+related+changes,+For+example,fixing+two+different+bugs+should+produce+two+separete+commits.+Small+commits+make+it+easier+for+other+developers+to+understand+the+changes+and+roll+them+back+if+something+went+wrong.+With+tools+like+the+staging+area+and+the+ability+to+stage+only+parts+of+a+file.+Git+makes+it+easy+to+create+very+granular+commits.|674r2|经常提交+%7C+COMMIT+OFTEN|7mc68|经常提交使得你的提交很小并且有助于仅提交相关更改.+此外,这样允许你更频繁地和其他人分享你的代码,对于每个人来说更容器定期合并更改,避免了遭遇合并冲突.+,很少的大提交,很少分享它们.相反很难解决冲突.|epjgr|Commiting+often+keeps+your+commits+small+and+again+helps+you+commit+only+related+changes.+Moreover,it+allows+you+to+share+your+code+more+frequently+with+others.+That+way+it's+easier+for+everyone+to+integrate+changes+regularly+and+avoid+having+merge+conflicts.Having+few+large+commits+and+sharing+them+rarely.in+contrast,makes+it+hard+to+solve+conflicts.|bhnkg|不要提交未完成工作+%7C+DON'T+COMMIT+HALF-DONE+WORK|2qv12|你应该仅提交已完成代码,这并不意外着提交前你不得不完成一个完整的,很大的功能分支.恰恰相反,将功能分支划分成很多逻辑块并且记得早一点,频繁些提交.+如果仅仅是为了下班前仓库该有点什么就不要提交,如果你尝试提交仅仅是因为你需要一个干净的工作副本(检出分支,拉取更改),考虑使用+git+的+stash+特性.|offset|length|style|CODE|9oqna|You+should+only+commit+code+when+it's+completed.+This+doesn't+mean+you+have+to+complete+a+whole+,large+feature+before+commiting.+Quite+the+contrary:split+the+feature's+implementatiion+into+logical+chunks+and+remember+to+commit+early+and+often.+But+don't+commit+just+to+have+something+in+the+repository+before+leaving+the+ofice+at+the+end+of+the+day.+If+you're+tempted+to+commit+just+because+you+need+a+clean+working+copy+(to+check+out+a+branch,pull+in+changes+,etc.)+consider+using+Git's+<Stash>+feature+instead.|1ckgf|提交前测试代码+%7C+TEST+CODE+BEFORE+YOU+COMMIT|78lft|抵制自以为已完成的提交.+直接测试来确保它真的已完成并且没有副作用(显而易见的).+当提交半成品到本地仓库时要求你不得不自我谅解,让你的代码进过测试对发布或者分享你的代码也很重要.|a5dkl|Resist+the+temptation+to+commit+something+that+you+think+is+completed.+Test+it+thoroughly+to+make+sure+it+really+is+completed+and+has+no+side+effect+(as+far+as+one+can+tell).+While+committing+half-baked+thing+in+your+local+repository+only+requires+you+to+forgive+yourself,having+your+code+tested+is+even+more+important+when+it+comes+to+publishing/sharing+your+code+with+others.|ITALIC|49mij|编写代码提交信息+%7C+WRITE+CODE+COMMIT+MESSAGE|4o3op|对你的更改以简短总结进行描述(达到50字符作为准则).+以包括空白行作为分割下述内容.+提交信息体应该提供下述问题的详细答案:|d060j|此次更改的动机是什么?|unordered-list-item|24mo1|和上一个实现有什么不同?|9pjra|使用必要的现在时语态(更改,不是已更改,或者变更)和使用形如+git+merge+命令生成的信息保持一致.|av6te|Begin+your+message+with+short+summary+of+your+changes(up+to+50+characters+as+a+guideline).+Separate+it+from+the+following+body+by+including+a+blank+line.+The+body+of+your+message+should+provide+detailed+answers+to+the+following+questions:|586bc|What+was+the+motivation+for+the+change?|1vpnn|How+does+it+differ+from+the+previous+implementation?|2drp6|Use+the+imperative+,present+tense(change,not+changed+or+changes)+to+be+consistent+with+generated+messages+from+commands+like+git+merge.|fheu|版本控制不是一个备份系统+%7C+VERSION+CONTROL+IS+NOT+A+BACKUP+SYSTEM|5nngk|在远程服务器存有文件的备份是版本控制系统的一个很好副作用.但是你不应该将VCS+视为一个备份系统.+当做版本控制时,你应该注意语义化提交,而不是死记硬背文件.|ac0dd|Having+your+files+backed+up+on+a+remote+server+is+a+nice+side+effect+of+having+a+version+control+system.+But+you+should+not+use+your+VCS+like+it+was+a+backup+system.+When+doing+version+control,you+should+pay+attention+to+committing+semantically(see+related+changes)+-+you+shouldn't+just+cram+in+files.|ecl9m|利用分支+%7C+USE+BRANCHES|9r7ih|分支是+git+最强大的特性之一,这不是偶然.+从第一天开始快速而简单的分支就是一个核心需求.+分支是帮助你避免弄混不同开发线的完美工具.+在你的开发流程中应该广泛使用分支,像新功能,修复+bug,新想法...|47r2o|Branching+is+one+of+Git's+most+powerful+features-and+this+is+not+by+accident:quick+and+easy+branching+was+a+central+requirement+from+day+one.+Branches+are+the+perfect+tool+to+help+you+avoid+mixing+up+different+lines+of+development.+You+should+use+branches+extensively+in+your+development+workflows:for+new+features,bug+fixes,ideas...|41dft|认同工作流+%7C+AGREE+ON+A+WORKFLOW|7u57u|Git+允许你从大量不同的工作流中选择一个:长期运行的分支,主题分支,合并或变,基工作流...+具体选择哪一个取决于一系列因素:你的项目,你的总体开发和部署工作流和(可能是最重要的)你和你的团队的个人偏好.+不论你选择哪一个去工作,你需要确保准守一个大家都认同的工作流.|7bj60|Git+lets+you+pick+from+a+lot+of+different+workflows:long-running+branches,topic+branches,merge+or+rebase,git-flow...+Which+one+you+choose+depends+on+a+couple+of+factors:your+project,your+overall+development+and+deployment+workflows+and+(maybe+most+importantly+)+on+your+and+your+teammate's+personal+preferences.+However+you+choose+to+work,just+make+sure+to+agree+on+a+common+workflow+that+everyone+follows.|66p72|帮助和文档+%7C+HELP+&+DOCUMENTATION|7ndpi|命令行下获取+git+帮助|cqnp7|git+help+<command>|1v5g7|Git+help+on+the+command+line|6dikt|git+help+<command>|823mb|免费在线资源+%7C+FREE+ONELINE+RESOURCES|6ot0j|5a3t7|78fkg|d540v|+本文版权归原作者所有，翻译仅用于学习。\n+|7iqiv|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|3U|3|40|5|0|0|0|0|1F|5|0|0|0|0|0|V|9|0|0|0|0|Y|6|19|7|1K|7|0|0|10|3|0|3P|3|6X|F|0|0|4|3|0|0|0|0|3|0|0|0|7|3|0|0|0|0|0|0|U|0|0|0|13|1|0|0|N|2|0|6|3|3|0^^$0|$1|$2|3|4|5|6|$7|8]]|9|$2|3|4|5|6|$7|A]]|B|$2|3|4|5|6|$7|C]]|D|$2|3|4|5|6|$7|E]]]|F|@$G|H|I|-4|2|J|K|7X|L|@]|M|@]|6|$]]|$G|N|I|O|2|P|K|7Y|L|@]|M|@]|6|$]]|$G|Q|I|R|2|S|K|7Z|L|@]|M|@]|6|$]]|$G|T|I|U|2|V|K|80|L|@]|M|@]|6|$]]|$G|W|I|X|2|Y|K|81|L|@]|M|@]|6|$Z|10]]|$G|11|I|12|2|V|K|82|L|@]|M|@]|6|$]]|$G|13|I|14|2|Y|K|83|L|@]|M|@]|6|$Z|10]]|$G|15|I|16|2|S|K|84|L|@]|M|@]|6|$]]|$G|17|I|18|2|V|K|85|L|@]|M|@]|6|$]]|$G|19|I|1A|2|Y|K|86|L|@]|M|@]|6|$Z|10]]|$G|1B|I|1C|2|V|K|87|L|@]|M|@]|6|$]]|$G|1D|I|1E|2|Y|K|88|L|@]|M|@]|6|$Z|10]]|$G|1F|I|1G|2|V|K|89|L|@]|M|@]|6|$]]|$G|1H|I|1I|2|Y|K|8A|L|@]|M|@]|6|$Z|10]]|$G|1J|I|1K|2|V|K|8B|L|@]|M|@]|6|$]]|$G|1L|I|1M|2|Y|K|8C|L|@]|M|@]|6|$Z|10]]|$G|1N|I|1O|2|V|K|8D|L|@]|M|@]|6|$]]|$G|1P|I|1Q|2|Y|K|8E|L|@]|M|@]|6|$Z|10]]|$G|1R|I|1S|2|V|K|8F|L|@]|M|@]|6|$]]|$G|1T|I|1U|2|Y|K|8G|L|@]|M|@]|6|$Z|10]]|$G|1V|I|1W|2|V|K|8H|L|@]|M|@]|6|$]]|$G|1X|I|1Y|2|1Z|K|8I|L|@]|M|@]|6|$]]|$G|20|I|21|2|Y|K|8J|L|@]|M|@]|6|$Z|10]]|$G|22|I|23|2|S|K|8K|L|@]|M|@]|6|$]]|$G|24|I|25|2|V|K|8L|L|@]|M|@]|6|$]]|$G|26|I|27|2|Y|K|8M|L|@]|M|@]|6|$Z|10]]|$G|28|I|29|2|V|K|8N|L|@]|M|@]|6|$]]|$G|2A|I|2B|2|Y|K|8O|L|@]|M|@]|6|$Z|10]]|$G|2C|I|2D|2|V|K|8P|L|@]|M|@]|6|$]]|$G|2E|I|2F|2|Y|K|8Q|L|@]|M|@]|6|$Z|10]]|$G|2G|I|2H|2|S|K|8R|L|@]|M|@]|6|$]]|$G|2I|I|2J|2|V|K|8S|L|@]|M|@]|6|$]]|$G|2K|I|2L|2|Y|K|8T|L|@]|M|@]|6|$Z|10]]|$G|2M|I|2N|2|V|K|8U|L|@]|M|@]|6|$]]|$G|2O|I|2P|2|Y|K|8V|L|@]|M|@]|6|$Z|10]]|$G|2Q|I|2R|2|V|K|8W|L|@]|M|@]|6|$]]|$G|2S|I|2T|2|Y|K|8X|L|@]|M|@]|6|$Z|10]]|$G|2U|I|2V|2|V|K|8Y|L|@]|M|@]|6|$]]|$G|2W|I|2X|2|Y|K|8Z|L|@]|M|@]|6|$Z|10]]|$G|2Y|I|2Z|2|V|K|90|L|@]|M|@]|6|$]]|$G|30|I|31|2|Y|K|91|L|@]|M|@]|6|$Z|10]]|$G|32|I|33|2|V|K|92|L|@]|M|@]|6|$]]|$G|34|I|35|2|Y|K|93|L|@]|M|@]|6|$Z|10]]|$G|36|I|37|2|S|K|94|L|@]|M|@]|6|$]]|$G|38|I|39|2|V|K|95|L|@]|M|@]|6|$]]|$G|3A|I|3B|2|Y|K|96|L|@]|M|@]|6|$Z|10]]|$G|3C|I|3D|2|V|K|97|L|@]|M|@]|6|$]]|$G|3E|I|3F|2|Y|K|98|L|@]|M|@]|6|$Z|10]]|$G|3G|I|3H|2|V|K|99|L|@]|M|@]|6|$]]|$G|3I|I|3J|2|Y|K|9A|L|@]|M|@]|6|$Z|10]]|$G|3K|I|3L|2|V|K|9B|L|@]|M|@]|6|$]]|$G|3M|I|3N|2|Y|K|9C|L|@]|M|@]|6|$Z|10]]|$G|3O|I|3P|2|V|K|9D|L|@]|M|@]|6|$]]|$G|3Q|I|3R|2|Y|K|9E|L|@]|M|@]|6|$Z|10]]|$G|3S|I|3T|2|V|K|9F|L|@]|M|@]|6|$]]|$G|3U|I|3V|2|Y|K|9G|L|@]|M|@]|6|$Z|10]]|$G|3W|I|3X|2|V|K|9H|L|@]|M|@]|6|$]]|$G|3Y|I|3Z|2|Y|K|9I|L|@]|M|@]|6|$Z|10]]|$G|40|I|41|2|V|K|9J|L|@]|M|@]|6|$]]|$G|42|I|43|2|Y|K|9K|L|@]|M|@]|6|$Z|10]]|$G|44|I|45|2|S|K|9L|L|@]|M|@]|6|$]]|$G|46|I|47|2|V|K|9M|L|@]|M|@]|6|$]]|$G|48|I|49|2|Y|K|9N|L|@]|M|@]|6|$Z|10]]|$G|4A|I|4B|2|V|K|9O|L|@]|M|@]|6|$]]|$G|4C|I|4D|2|1Z|K|9P|L|@]|M|@]|6|$]]|$G|4E|I|4F|2|Y|K|9Q|L|@]|M|@]|6|$Z|10]]|$G|4G|I|4H|2|V|K|9R|L|@]|M|@]|6|$]]|$G|4I|I|4J|2|Y|K|9S|L|@]|M|@]|6|$Z|10]]|$G|4K|I|4L|2|V|K|9T|L|@]|M|@]|6|$]]|$G|4M|I|4N|2|Y|K|9U|L|@]|M|@]|6|$Z|10]]|$G|4O|I|4P|2|V|K|9V|L|@]|M|@]|6|$]]|$G|4Q|I|4R|2|Y|K|9W|L|@]|M|@]|6|$Z|10]]|$G|4S|I|4T|2|S|K|9X|L|@]|M|@]|6|$]]|$G|4U|I|4V|2|V|K|9Y|L|@]|M|@]|6|$]]|$G|4W|I|4X|2|Y|K|9Z|L|@]|M|@]|6|$Z|10]]|$G|4Y|I|4Z|2|V|K|A0|L|@]|M|@]|6|$]]|$G|50|I|51|2|Y|K|A1|L|@]|M|@]|6|$Z|10]]|$G|52|I|53|2|V|K|A2|L|@]|M|@]|6|$]]|$G|54|I|55|2|Y|K|A3|L|@]|M|@]|6|$Z|10]]|$G|56|I|57|2|V|K|A4|L|@]|M|@]|6|$]]|$G|58|I|59|2|Y|K|A5|L|@]|M|@]|6|$Z|10]]|$G|5A|I|5B|2|V|K|A6|L|@]|M|@]|6|$]]|$G|5C|I|5D|2|Y|K|A7|L|@]|M|@]|6|$Z|10]]|$G|5E|I|5F|2|V|K|A8|L|@]|M|@]|6|$]]|$G|5G|I|5H|2|Y|K|A9|L|@]|M|@]|6|$Z|10]]|$G|5I|I|5J|2|S|K|AA|L|@]|M|@]|6|$]]|$G|5K|I|5L|2|V|K|AB|L|@]|M|@]|6|$]]|$G|5M|I|5N|2|J|K|AC|L|@]|M|@]|6|$]]|$G|5O|I|5P|2|J|K|AD|L|@]|M|@]|6|$]]|$G|5Q|I|5R|2|V|K|AE|L|@]|M|@]|6|$]]|$G|5S|I|5T|2|J|K|AF|L|@]|M|@]|6|$]]|$G|5U|I|5V|2|J|K|AG|L|@]|M|@]|6|$]]|$G|5W|I|5X|2|V|K|AH|L|@]|M|@]|6|$]]|$G|5Y|I|5Z|2|J|K|AI|L|@$60|AJ|61|AK|62|63]|$60|AL|61|AM|62|63]]|M|@]|6|$]]|$G|64|I|65|2|J|K|AN|L|@]|M|@]|6|$]]|$G|66|I|67|2|V|K|AO|L|@]|M|@]|6|$]]|$G|68|I|69|2|J|K|AP|L|@]|M|@]|6|$]]|$G|6A|I|6B|2|J|K|AQ|L|@$60|AR|61|AS|62|6C]]|M|@]|6|$]]|$G|6D|I|6E|2|V|K|AT|L|@]|M|@]|6|$]]|$G|6F|I|6G|2|J|K|AU|L|@]|M|@]|6|$]]|$G|6H|I|6I|2|6J|K|AV|L|@]|M|@]|6|$]]|$G|6K|I|6L|2|6J|K|AW|L|@]|M|@]|6|$]]|$G|6M|I|6N|2|J|K|AX|L|@$60|AY|61|AZ|62|63]]|M|@]|6|$]]|$G|6O|I|6P|2|J|K|B0|L|@]|M|@]|6|$]]|$G|6Q|I|6R|2|6J|K|B1|L|@]|M|@]|6|$]]|$G|6S|I|6T|2|6J|K|B2|L|@]|M|@]|6|$]]|$G|6U|I|6V|2|J|K|B3|L|@$60|B4|61|B5|62|63]|$60|B6|61|B7|62|63]|$60|B8|61|B9|62|63]]|M|@]|6|$]]|$G|6W|I|6X|2|V|K|BA|L|@]|M|@]|6|$]]|$G|6Y|I|6Z|2|J|K|BB|L|@$60|BC|61|BD|62|63]]|M|@]|6|$]]|$G|70|I|71|2|J|K|BE|L|@$60|BF|61|BG|62|63]|$60|BH|61|BI|62|63]]|M|@]|6|$]]|$G|72|I|73|2|V|K|BJ|L|@]|M|@]|6|$]]|$G|74|I|75|2|J|K|BK|L|@$60|BL|61|BM|62|63]]|M|@]|6|$]]|$G|76|I|77|2|J|K|BN|L|@]|M|@]|6|$]]|$G|78|I|79|2|V|K|BO|L|@]|M|@]|6|$]]|$G|7A|I|7B|2|J|K|BP|L|@$60|BQ|61|BR|62|63]]|M|@]|6|$]]|$G|7C|I|7D|2|J|K|BS|L|@]|M|@]|6|$]]|$G|7E|I|7F|2|V|K|BT|L|@]|M|@]|6|$]]|$G|7G|I|7H|2|J|K|BU|L|@$60|BV|61|BW|62|63]]|M|@]|6|$]]|$G|7I|I|7J|2|Y|K|BX|L|@]|M|@]|6|$Z|10]]|$G|7K|I|7L|2|J|K|BY|L|@]|M|@]|6|$]]|$G|7M|I|7N|2|Y|K|BZ|L|@]|M|@]|6|$Z|10]]|$G|7O|I|7P|2|V|K|C0|L|@]|M|@]|6|$]]|$G|7Q|I|8|2|6J|K|C1|L|@]|M|@$60|C2|61|C3|G|C4]]|6|$]]|$G|7R|I|A|2|6J|K|C5|L|@]|M|@$60|C6|61|C7|G|C8]]|6|$]]|$G|7S|I|C|2|6J|K|C9|L|@]|M|@$60|CA|61|CB|G|CC]]|6|$]]|$G|7T|I|7U|2|1Z|K|CD|L|@]|M|@$60|CE|61|CF|G|CG]]|6|$]]|$G|7V|I|7W|2|J|K|CH|L|@]|M|@]|6|$]]]]","plain":"\n备忘录[译]\n创建 | Create\n克隆一个已存在的仓库 | Clone an existing repository\ngit clone git@github.com:snowdreams1006/snowdreams1006.github.io.git\n创建一个新的本地仓库 | Create a new local repository\ngit init \n本地更改 | Local Changes\n工作目录中已更改文件 | Changed files in your working directory\ngit status\n已追踪文件的更改 | Changes to tracked files\ngit diff \n添加当前全部更改到下次提交版本 | Add all current changes to next commit\ngit add . \n添加文件中某些更改到下次提交版本 | Add some changes in <file> to next commit\ngit add -p <file>\n提交已追踪文件的全部本地更改 | Commit all local changes in tracked files\ngit commit -a\n提交上一次暂存区更改 | Commit previously staged changes\ngit commit \n更改上次提交 | Change the last commit\n 没有更改已发布的提交 | Don't amend publishd commits!\n \ngit commit --amend\n提交历史 | Commit history\n显示全部提交,以最新的开头 | Show all commits,starting with newest\ngit log\n显示某个文件一段时间内的更改 | Show changes over time for a specific file\ngit log -p <file>\n某文件是谁在什么时候更改了什么内容 | Who changed what and when in <file>\ngit blame <file>\n分支和标签 | Branches & Tags\n列出全部已存在的分支 | List all existing branches\ngit branch -av\n切换到 HEAD 分支 | Switch HEAD branch\ngit checkout <branch>\n基于当前 HEAD 创建新分支 | Create a new branch based on your curent HEAD\ngit branch <new-branch>\n基于远程分支创建新的正在追踪分支 | Create a new tracking branch based on a remote branch\ngit checkout --track <remote/branch>\n删除一个本地分支 | Delete a local branch\ngit branch -d <branch>\n为当前提交打上标签 | Make the current commit with a tag\ngit tag <tag-name>\n更新和发布 | Update & Publish\n列出当前全部已配置的远程仓库 | List all currently configured remotes\ngit remote -v\n显示远程仓库信息 | Show information about a remote\ngit remote show <remote>\n添加<remote>的远程仓库 | Add new remote repository named <remote>\ngit remote add <shortname> <url>\n下载来自<remote>远程仓库的所有更改但是不合并到 HEAD | Download all changes from <remote> but don't integrate into HEAD\ngit fetch <remote>\n下载来自<remote>远程仓库指定分支的所有更改并且自动合并到 HEAD | Download changes and directly merge/integrate into HEAD\ngit pull <remote> <branch>\n在<remote>远程仓库上发布本地更改 | Publish local changes on a remote\ngit push <remote> <branch>\n在<remote>远程仓库上删除分支 | Delete a branch on the branch\ngit branch -dr <remote/branch>\n发布你的标签 | Publish your tags\ngit push --tags\n合并和变基 | MERGE & REBASE\n合并指定分支到你的 HEAD | Merge <branch> into your current HEAD\ngit merge <branch>\n变基到当前HEAD | Rebase your current HEAD onto <branch>\n 不要变基已发布的提交 | Don't rebase published commits!\n \ngit rebase <branch>\n取消变基 | Abort a rebase\ngit rebase --abort\n使用已配置的冲突工具去解决冲突 | Use your configured merge tool to solve conflicts\ngit mergetool\n使用编辑器手工解决冲突然后(解决之后)标记文件已解决冲突 | Use your editor to manually solve conflicts and (after resolving) mark file as resolved\ngit add <resolved-file>\ngit rm <resolved-file>\n撤销 | UNDO\n丢弃工作区全部更改 | Discard all local changes in your working directory\ngit reset --hard HEAD\n丢弃指定文件的本地更改 | Discard local changes in a specific file\ngit checkout HEAD <file>\n抵消一个提交(通过产生一个新的相反的提交) | Revert a commit (by producing a new commit with contrary changes)\ngit revert <file>\n重置当前 HEAD 指针到上一个提交...然后丢弃自那以后的全部更改 | Reset your HEAD pointer to a previous commit ... and discard all changes since then\ngit reset --hard <commit>\n...然后作为未缓存更改保存全部更改 | ... and preserve all changes as unstaged change\ngit reset <commit>\n...然后保存未提交的本地更改 | ... and preserve all changes as unstaged change\ngit reset --keep <commit>\n建议 | SUGGESTION\n提交相关更改 | COMMIT RELATED CHANGES\n提交应该是相关更改的包装,例如,修复两个不同的 bug 应该产生两个单独的提交. 小的提交让其他开发者更容易理解此次更改,并且万一出错方便回滚. 在暂存区这类工具以及暂存部分文件的能力下,git 很容易创建细粒度的提交.\nA commit should be a wrapper for related changes, For example,fixing two different bugs should produce two separete commits. Small commits make it easier for other developers to understand the changes and roll them back if something went wrong. With tools like the staging area and the ability to stage only parts of a file. Git makes it easy to create very granular commits.\n经常提交 | COMMIT OFTEN\n经常提交使得你的提交很小并且有助于仅提交相关更改. 此外,这样允许你更频繁地和其他人分享你的代码,对于每个人来说更容器定期合并更改,避免了遭遇合并冲突. ,很少的大提交,很少分享它们.相反很难解决冲突.\nCommiting often keeps your commits small and again helps you commit only related changes. Moreover,it allows you to share your code more frequently with others. That way it's easier for everyone to integrate changes regularly and avoid having merge conflicts.Having few large commits and sharing them rarely.in contrast,makes it hard to solve conflicts.\n不要提交未完成工作 | DON'T COMMIT HALF-DONE WORK\n你应该仅提交已完成代码,这并不意外着提交前你不得不完成一个完整的,很大的功能分支.恰恰相反,将功能分支划分成很多逻辑块并且记得早一点,频繁些提交. 如果仅仅是为了下班前仓库该有点什么就不要提交,如果你尝试提交仅仅是因为你需要一个干净的工作副本(检出分支,拉取更改),考虑使用 git 的 stash 特性.\nYou should only commit code when it's completed. This doesn't mean you have to complete a whole ,large feature before commiting. Quite the contrary:split the feature's implementatiion into logical chunks and remember to commit early and often. But don't commit just to have something in the repository before leaving the ofice at the end of the day. If you're tempted to commit just because you need a clean working copy (to check out a branch,pull in changes ,etc.) consider using Git's <Stash> feature instead.\n提交前测试代码 | TEST CODE BEFORE YOU COMMIT\n抵制自以为已完成的提交. 直接测试来确保它真的已完成并且没有副作用(显而易见的). 当提交半成品到本地仓库时要求你不得不自我谅解,让你的代码进过测试对发布或者分享你的代码也很重要.\nResist the temptation to commit something that you think is completed. Test it thoroughly to make sure it really is completed and has no side effect (as far as one can tell). While committing half-baked thing in your local repository only requires you to forgive yourself,having your code tested is even more important when it comes to publishing/sharing your code with others.\n编写代码提交信息 | WRITE CODE COMMIT MESSAGE\n对你的更改以简短总结进行描述(达到50字符作为准则). 以包括空白行作为分割下述内容. 提交信息体应该提供下述问题的详细答案:\n此次更改的动机是什么?\n和上一个实现有什么不同?\n使用必要的现在时语态(更改,不是已更改,或者变更)和使用形如 git merge 命令生成的信息保持一致.\nBegin your message with short summary of your changes(up to 50 characters as a guideline). Separate it from the following body by including a blank line. The body of your message should provide detailed answers to the following questions:\nWhat was the motivation for the change?\nHow does it differ from the previous implementation?\nUse the imperative ,present tense(change,not changed or changes) to be consistent with generated messages from commands like git merge.\n版本控制不是一个备份系统 | VERSION CONTROL IS NOT A BACKUP SYSTEM\n在远程服务器存有文件的备份是版本控制系统的一个很好副作用.但是你不应该将VCS 视为一个备份系统. 当做版本控制时,你应该注意语义化提交,而不是死记硬背文件.\nHaving your files backed up on a remote server is a nice side effect of having a version control system. But you should not use your VCS like it was a backup system. When doing version control,you should pay attention to committing semantically(see related changes) - you shouldn't just cram in files.\n利用分支 | USE BRANCHES\n分支是 git 最强大的特性之一,这不是偶然. 从第一天开始快速而简单的分支就是一个核心需求. 分支是帮助你避免弄混不同开发线的完美工具. 在你的开发流程中应该广泛使用分支,像新功能,修复 bug,新想法...\nBranching is one of Git's most powerful features-and this is not by accident:quick and easy branching was a central requirement from day one. Branches are the perfect tool to help you avoid mixing up different lines of development. You should use branches extensively in your development workflows:for new features,bug fixes,ideas...\n认同工作流 | AGREE ON A WORKFLOW\nGit 允许你从大量不同的工作流中选择一个:长期运行的分支,主题分支,合并或变,基工作流... 具体选择哪一个取决于一系列因素:你的项目,你的总体开发和部署工作流和(可能是最重要的)你和你的团队的个人偏好. 不论你选择哪一个去工作,你需要确保准守一个大家都认同的工作流.\nGit lets you pick from a lot of different workflows:long-running branches,topic branches,merge or rebase,git-flow... Which one you choose depends on a couple of factors:your project,your overall development and deployment workflows and (maybe most importantly ) on your and your teammate's personal preferences. However you choose to work,just make sure to agree on a common workflow that everyone follows.\n帮助和文档 | HELP & DOCUMENTATION\n命令行下获取 git 帮助\ngit help <command>\nGit help on the command line\ngit help <command>\n免费在线资源 | FREE ONELINE RESOURCES\nhttp://www.git-tower.com/learn\nhttp://rogerdudler.github.io/git-guide/\nhttp://www.git-scm.org/\n 本文版权归原作者所有，翻译仅用于学习。\n \n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n备忘录[译]\n创建 | Create\n克隆一个已存在的仓库 | Clone an existing repository\ngit clone git@gith...","summary":"提交应该是相关更改的包装,例如,修复两个不同的 bug 应该产生两个单独的提交. 小的提交让其他开发者更容易理解此次更改,并且万一出错方便回滚. 在暂存区这类工...","abstract":"提交应该是相关更改的包装,例如,修复两个不同的 bug 应该产生两个单独的提交. 小的提交让其他开发者更容易理解此次更改,并且万一出错方便回滚. 在暂存区这类工...","description":"","picture":"","coverImageUrl":"","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"11:07"},"authorId":2952369,"columnId":75668,"writeTime":1554276057,"updateTime":1554276057,"viewCount":65,"likeCount":3,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10284,"tagName":"GitHub"},{"tagId":10283,"tagName":"Git"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2694,"type":40,"actionInfo":{"articleId":1409901,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554276029,"detail":{"id":1409901,"articleId":1409901,"title":"git 入门教程之知识速查\n                                                                            原","content":"entityMap|blocks|key|f0got|text|type|unstyled|depth|inlineStyleRanges|entityRanges|data|2hq2g|知识速查|header-one|etsg4|创建版本库|header-two|3gm8v|初始化项目+git+init|header-three|7ccmp|从零开始创建项目|5c0uu|示例|offset|length|style|BOLD|ahd75|git+init+|code-block|syntax|javascript|6ioc1|克隆项目+git+clone|f54dg|将已有项目拷贝到本地|8e64o|efadv|git+clone+git@github.com:snowdreams1006/snowdreams1006.github.io.git|2fe9m|添加文件+git+add|34fv9|将新文件或已修改文件添加到缓存区|35gd0|14obu|git+add+README.md|3u0tc|查看状态+git+status|dj02d|查看当前文件是否和上次提交内容是否有修改|emkoo|3lui4|git+status+README.md|cenua|比较差异+git+diff|c90i8|查看当前文件和上次提交内容的具体差异|69kfc|尚未缓存的修改:+git+diff|unordered-list-item|CODE|4h3nt|查看已缓存修改:+git+diff+--cached|2j9fm|查看已缓存与未缓存的所有修改:+git+diff+HEAD|2shjc|显示摘要而非整个差异:+git+diff+--stat|etc39|f93cc|git+diff+README.md|4osj6|提交文件+git+commit|3m1tn|将缓存区内容添加到版本库|2tuok|5ucb4|git+commit+-m+\"remark\"|660r2|取消已缓存内容+git+reset+HEAD|ep43v|7boe5|f6r2a|git+reset+HEAD+|8j0bg|删除文件+git+rm+<file>|5obue|从暂存区中移除且不保留在工作目录:+git+rm+<file>|cpv9s|强制从暂存区中移除且不保留在工作目录:+git+rm+-f+<file>|50l3l|从暂存区中移除但保留工作目录:+git+rm+--cached+<file>|dgeai|5jgih|git+rm+README.md|ac1iu|移动文件+git+mv+<file_old>+<file_new>|7jgmt|移动或重命名文件,目录,软连接|forr8|6s5cr|git+mv+README.md+README_NEW.md|eqeec|commit+push+pull+fetch+merge+的区别与含义:|8c94k|git+commit+:+将本地修改过的文件提交到本地仓库中|902et|git+push+:+将本地仓库的最新版本推送到远程库中|6pvbo|git+pull+:+从远程库获取最新版本到本地,并自动merge|d5ob6|git+fetch+:+从远程库获取最新版本到本地,不会自动merge|f5g8e|git+merge+:+将指定版本合并到当前分支|898sh|替换本地改动|4ucc0|丢弃当前文件修改内容,已添加到暂存区以及新文件都不会受到影响|1vnrh|3c2ts|git+checkout+--+<file>|69mne|丢弃本地所有改动|do23t|2qe47|git+reset+--hard+|1hv5l|分支管理|6am3c|创建分支+git+branch+<name>|23d56|创建本地分支,但不自动切换新分支|9gul9|efan2|git+branch+dev|f8ntd|切换分支+git+checkout+<name>|70q40|切换到指定分支|2d1ol|e9iqv|git+checkout+dev|ev0mk|创建并切换分支+git+checkout+-b+<name>|7s3b2|创建本地分支并自动切换到新分支|32rmr|9l7e9|git+checkout+-b+feature|4cl61|合并分支+git+merge+<name>|dhbhe|将指定分支合并到当前分支|5plod|eakmc|git+merge+dev|2al9b|删除分支+git+branch+-d+<name>|5f185|删除指定分支|d2vep|f4nd0|git+branch+-d+dev|8gd3d|列出分支+git+branch|8fq7d|列出本地全部分支|30leq|clp02|git+branch|6jbd|提交日志+git+log|7fnn|查看纳入版本库的提交日志|85k3n|apcsu|git+log|evgdf|标签管理|1ne1s|创建标签+git+tag+-a+<name>|39dsh|创建标签并提交备注|82hi|ekflf|git+tag+-a+v1.0.0|65fuj|追加标签+git+tag+-a+<name>+<commit>|b9b4i|追加标签并更新备注|cchtq|bepur|git+tag+-a+v0.9.0+6ad8956bc09a6a62c731711eabe796690aa6471c|f6njt|删除标签+git+tag+-d+<name>|7uaae|删除指定标签|70kr7|b37gh|git+tag+-d+v1.0.0|e46ra|查看标签+git+show+<name>|3734c|查看指定标签|2lvtd|b3pch|git+show+v1.0.0|98ocq|列出标签+git+tag|6bnpm|列出本地全部标签|6tok9|9ssmn|git+tag|cno9t|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|0|0|0|0|2|0|0|0|0|0|2|0|0|0|0|0|2|0|0|0|0|0|2|0|0|0|0|9|8|0|9|H|0|G|D|0|C|F|0|0|2|0|0|0|0|0|2|0|0|0|0|0|2|0|0|0|I|D|0|K|G|0|G|M|0|0|2|0|0|0|0|0|2|0|0|0|S|0|0|A|0|0|8|0|0|8|S|5|0|0|9|U|5|0|0|9|0|0|0|0|2|0|0|0|0|2|0|0|0|0|0|0|2|0|0|0|0|0|2|0|0|0|0|0|2|0|0|0|0|0|2|0|0|0|0|0|2|0|0|0|0|0|2|0|0|0|0|0|2|0|0|0|0|0|0|2|0|0|0|0|0|2|0|0|0|0|0|2|0|0|0|0|0|2|0|0|0|0|0|2|0|0^^$0|$]|1|@$2|3|4|-4|5|6|7|60|8|@]|9|@]|A|$]]|$2|B|4|C|5|D|7|61|8|@]|9|@]|A|$]]|$2|E|4|F|5|G|7|62|8|@]|9|@]|A|$]]|$2|H|4|I|5|J|7|63|8|@]|9|@]|A|$]]|$2|K|4|L|5|6|7|64|8|@]|9|@]|A|$]]|$2|M|4|N|5|6|7|65|8|@$O|66|P|67|Q|R]]|9|@]|A|$]]|$2|S|4|T|5|U|7|68|8|@]|9|@]|A|$V|W]]|$2|X|4|Y|5|J|7|69|8|@]|9|@]|A|$]]|$2|Z|4|10|5|6|7|6A|8|@]|9|@]|A|$]]|$2|11|4|N|5|6|7|6B|8|@$O|6C|P|6D|Q|R]]|9|@]|A|$]]|$2|12|4|13|5|U|7|6E|8|@]|9|@]|A|$V|W]]|$2|14|4|15|5|G|7|6F|8|@]|9|@]|A|$]]|$2|16|4|17|5|6|7|6G|8|@]|9|@]|A|$]]|$2|18|4|N|5|6|7|6H|8|@$O|6I|P|6J|Q|R]]|9|@]|A|$]]|$2|19|4|1A|5|U|7|6K|8|@]|9|@]|A|$V|W]]|$2|1B|4|1C|5|G|7|6L|8|@]|9|@]|A|$]]|$2|1D|4|1E|5|6|7|6M|8|@]|9|@]|A|$]]|$2|1F|4|N|5|6|7|6N|8|@$O|6O|P|6P|Q|R]]|9|@]|A|$]]|$2|1G|4|1H|5|U|7|6Q|8|@]|9|@]|A|$V|W]]|$2|1I|4|1J|5|G|7|6R|8|@]|9|@]|A|$]]|$2|1K|4|1L|5|6|7|6S|8|@]|9|@]|A|$]]|$2|1M|4|1N|5|1O|7|6T|8|@$O|6U|P|6V|Q|1P]]|9|@]|A|$]]|$2|1Q|4|1R|5|1O|7|6W|8|@$O|6X|P|6Y|Q|1P]]|9|@]|A|$]]|$2|1S|4|1T|5|1O|7|6Z|8|@$O|70|P|71|Q|1P]]|9|@]|A|$]]|$2|1U|4|1V|5|1O|7|72|8|@$O|73|P|74|Q|1P]]|9|@]|A|$]]|$2|1W|4|N|5|6|7|75|8|@$O|76|P|77|Q|R]]|9|@]|A|$]]|$2|1X|4|1Y|5|U|7|78|8|@]|9|@]|A|$V|W]]|$2|1Z|4|20|5|G|7|79|8|@]|9|@]|A|$]]|$2|21|4|22|5|6|7|7A|8|@]|9|@]|A|$]]|$2|23|4|N|5|6|7|7B|8|@$O|7C|P|7D|Q|R]]|9|@]|A|$]]|$2|24|4|25|5|U|7|7E|8|@]|9|@]|A|$V|W]]|$2|26|4|27|5|G|7|7F|8|@]|9|@]|A|$]]|$2|28|4|22|5|6|7|7G|8|@]|9|@]|A|$]]|$2|29|4|N|5|6|7|7H|8|@$O|7I|P|7J|Q|R]]|9|@]|A|$]]|$2|2A|4|2B|5|U|7|7K|8|@]|9|@]|A|$V|W]]|$2|2C|4|2D|5|G|7|7L|8|@]|9|@]|A|$]]|$2|2E|4|2F|5|1O|7|7M|8|@$O|7N|P|7O|Q|1P]]|9|@]|A|$]]|$2|2G|4|2H|5|1O|7|7P|8|@$O|7Q|P|7R|Q|1P]]|9|@]|A|$]]|$2|2I|4|2J|5|1O|7|7S|8|@$O|7T|P|7U|Q|1P]]|9|@]|A|$]]|$2|2K|4|N|5|6|7|7V|8|@$O|7W|P|7X|Q|R]]|9|@]|A|$]]|$2|2L|4|2M|5|U|7|7Y|8|@]|9|@]|A|$V|W]]|$2|2N|4|2O|5|G|7|7Z|8|@]|9|@]|A|$]]|$2|2P|4|2Q|5|6|7|80|8|@]|9|@]|A|$]]|$2|2R|4|N|5|6|7|81|8|@$O|82|P|83|Q|R]]|9|@]|A|$]]|$2|2S|4|2T|5|U|7|84|8|@]|9|@]|A|$V|W]]|$2|2U|4|2V|5|6|7|85|8|@$O|86|P|87|Q|1P]]|9|@]|A|$]]|$2|2W|4|2X|5|1O|7|88|8|@$O|89|P|8A|Q|1P]]|9|@]|A|$]]|$2|2Y|4|2Z|5|1O|7|8B|8|@$O|8C|P|8D|Q|1P]]|9|@]|A|$]]|$2|30|4|31|5|1O|7|8E|8|@$O|8F|P|8G|Q|1P]|$O|8H|P|8I|Q|1P]]|9|@]|A|$]]|$2|32|4|33|5|1O|7|8J|8|@$O|8K|P|8L|Q|1P]|$O|8M|P|8N|Q|1P]]|9|@]|A|$]]|$2|34|4|35|5|1O|7|8O|8|@$O|8P|P|8Q|Q|1P]]|9|@]|A|$]]|$2|36|4|37|5|G|7|8R|8|@]|9|@]|A|$]]|$2|38|4|39|5|6|7|8S|8|@]|9|@]|A|$]]|$2|3A|4|N|5|6|7|8T|8|@$O|8U|P|8V|Q|R]]|9|@]|A|$]]|$2|3B|4|3C|5|U|7|8W|8|@]|9|@]|A|$V|W]]|$2|3D|4|3E|5|6|7|8X|8|@]|9|@]|A|$]]|$2|3F|4|N|5|6|7|8Y|8|@$O|8Z|P|90|Q|R]]|9|@]|A|$]]|$2|3G|4|3H|5|U|7|91|8|@]|9|@]|A|$V|W]]|$2|3I|4|3J|5|G|7|92|8|@]|9|@]|A|$]]|$2|3K|4|3L|5|J|7|93|8|@]|9|@]|A|$]]|$2|3M|4|3N|5|6|7|94|8|@]|9|@]|A|$]]|$2|3O|4|N|5|6|7|95|8|@$O|96|P|97|Q|R]]|9|@]|A|$]]|$2|3P|4|3Q|5|U|7|98|8|@]|9|@]|A|$V|W]]|$2|3R|4|3S|5|J|7|99|8|@]|9|@]|A|$]]|$2|3T|4|3U|5|6|7|9A|8|@]|9|@]|A|$]]|$2|3V|4|N|5|6|7|9B|8|@$O|9C|P|9D|Q|R]]|9|@]|A|$]]|$2|3W|4|3X|5|U|7|9E|8|@]|9|@]|A|$V|W]]|$2|3Y|4|3Z|5|J|7|9F|8|@]|9|@]|A|$]]|$2|40|4|41|5|6|7|9G|8|@]|9|@]|A|$]]|$2|42|4|N|5|6|7|9H|8|@$O|9I|P|9J|Q|R]]|9|@]|A|$]]|$2|43|4|44|5|U|7|9K|8|@]|9|@]|A|$V|W]]|$2|45|4|46|5|J|7|9L|8|@]|9|@]|A|$]]|$2|47|4|48|5|6|7|9M|8|@]|9|@]|A|$]]|$2|49|4|N|5|6|7|9N|8|@$O|9O|P|9P|Q|R]]|9|@]|A|$]]|$2|4A|4|4B|5|U|7|9Q|8|@]|9|@]|A|$V|W]]|$2|4C|4|4D|5|J|7|9R|8|@]|9|@]|A|$]]|$2|4E|4|4F|5|6|7|9S|8|@]|9|@]|A|$]]|$2|4G|4|N|5|6|7|9T|8|@$O|9U|P|9V|Q|R]]|9|@]|A|$]]|$2|4H|4|4I|5|U|7|9W|8|@]|9|@]|A|$V|W]]|$2|4J|4|4K|5|J|7|9X|8|@]|9|@]|A|$]]|$2|4L|4|4M|5|6|7|9Y|8|@]|9|@]|A|$]]|$2|4N|4|N|5|6|7|9Z|8|@$O|A0|P|A1|Q|R]]|9|@]|A|$]]|$2|4O|4|4P|5|U|7|A2|8|@]|9|@]|A|$V|W]]|$2|4Q|4|4R|5|G|7|A3|8|@]|9|@]|A|$]]|$2|4S|4|4T|5|6|7|A4|8|@]|9|@]|A|$]]|$2|4U|4|N|5|6|7|A5|8|@$O|A6|P|A7|Q|R]]|9|@]|A|$]]|$2|4V|4|4W|5|U|7|A8|8|@]|9|@]|A|$V|W]]|$2|4X|4|4Y|5|G|7|A9|8|@]|9|@]|A|$]]|$2|4Z|4|50|5|J|7|AA|8|@]|9|@]|A|$]]|$2|51|4|52|5|6|7|AB|8|@]|9|@]|A|$]]|$2|53|4|N|5|6|7|AC|8|@$O|AD|P|AE|Q|R]]|9|@]|A|$]]|$2|54|4|55|5|U|7|AF|8|@]|9|@]|A|$V|W]]|$2|56|4|57|5|J|7|AG|8|@]|9|@]|A|$]]|$2|58|4|59|5|6|7|AH|8|@]|9|@]|A|$]]|$2|5A|4|N|5|6|7|AI|8|@$O|AJ|P|AK|Q|R]]|9|@]|A|$]]|$2|5B|4|5C|5|U|7|AL|8|@]|9|@]|A|$V|W]]|$2|5D|4|5E|5|J|7|AM|8|@]|9|@]|A|$]]|$2|5F|4|5G|5|6|7|AN|8|@]|9|@]|A|$]]|$2|5H|4|N|5|6|7|AO|8|@$O|AP|P|AQ|Q|R]]|9|@]|A|$]]|$2|5I|4|5J|5|U|7|AR|8|@]|9|@]|A|$V|W]]|$2|5K|4|5L|5|J|7|AS|8|@]|9|@]|A|$]]|$2|5M|4|5N|5|6|7|AT|8|@]|9|@]|A|$]]|$2|5O|4|N|5|6|7|AU|8|@$O|AV|P|AW|Q|R]]|9|@]|A|$]]|$2|5P|4|5Q|5|U|7|AX|8|@]|9|@]|A|$V|W]]|$2|5R|4|5S|5|J|7|AY|8|@]|9|@]|A|$]]|$2|5T|4|5U|5|6|7|AZ|8|@]|9|@]|A|$]]|$2|5V|4|N|5|6|7|B0|8|@$O|B1|P|B2|Q|R]]|9|@]|A|$]]|$2|5W|4|5X|5|U|7|B3|8|@]|9|@]|A|$V|W]]|$2|5Y|4|5Z|5|6|7|B4|8|@]|9|@]|A|$]]]]","plain":"\n知识速查\n创建版本库\n初始化项目 git init\n从零开始创建项目\n示例\ngit init \n克隆项目 git clone\n将已有项目拷贝到本地\n示例\ngit clone git@github.com:snowdreams1006/snowdreams1006.github.io.git\n添加文件 git add\n将新文件或已修改文件添加到缓存区\n示例\ngit add README.md\n查看状态 git status\n查看当前文件是否和上次提交内容是否有修改\n示例\ngit status README.md\n比较差异 git diff\n查看当前文件和上次提交内容的具体差异\n尚未缓存的修改: git diff\n查看已缓存修改: git diff --cached\n查看已缓存与未缓存的所有修改: git diff HEAD\n显示摘要而非整个差异: git diff --stat\n示例\ngit diff README.md\n提交文件 git commit\n将缓存区内容添加到版本库\n示例\ngit commit -m \"remark\"\n取消已缓存内容 git reset HEAD\n将缓存区内容添加到版本库\n示例\ngit reset HEAD \n删除文件 git rm <file>\n从暂存区中移除且不保留在工作目录: git rm <file>\n强制从暂存区中移除且不保留在工作目录: git rm -f <file>\n从暂存区中移除但保留工作目录: git rm --cached <file>\n示例\ngit rm README.md\n移动文件 git mv <file_old> <file_new>\n移动或重命名文件,目录,软连接\n示例\ngit mv README.md README_NEW.md\ncommit push pull fetch merge 的区别与含义:\ngit commit : 将本地修改过的文件提交到本地仓库中\ngit push : 将本地仓库的最新版本推送到远程库中\ngit pull : 从远程库获取最新版本到本地,并自动merge\ngit fetch : 从远程库获取最新版本到本地,不会自动merge\ngit merge : 将指定版本合并到当前分支\n替换本地改动\n丢弃当前文件修改内容,已添加到暂存区以及新文件都不会受到影响\n示例\ngit checkout -- <file>\n丢弃本地所有改动\n示例\ngit reset --hard \n分支管理\n创建分支 git branch <name>\n创建本地分支,但不自动切换新分支\n示例\ngit branch dev\n切换分支 git checkout <name>\n切换到指定分支\n示例\ngit checkout dev\n创建并切换分支 git checkout -b <name>\n创建本地分支并自动切换到新分支\n示例\ngit checkout -b feature\n合并分支 git merge <name>\n将指定分支合并到当前分支\n示例\ngit merge dev\n删除分支 git branch -d <name>\n删除指定分支\n示例\ngit branch -d dev\n列出分支 git branch\n列出本地全部分支\n示例\ngit branch\n提交日志 git log\n查看纳入版本库的提交日志\n示例\ngit log\n标签管理\n创建标签 git tag -a <name>\n创建标签并提交备注\n示例\ngit tag -a v1.0.0\n追加标签 git tag -a <name> <commit>\n追加标签并更新备注\n示例\ngit tag -a v0.9.0 6ad8956bc09a6a62c731711eabe796690aa6471c\n删除标签 git tag -d <name>\n删除指定标签\n示例\ngit tag -d v1.0.0\n查看标签 git show <name>\n查看指定标签\n示例\ngit show v1.0.0\n列出标签 git tag\n列出本地全部标签\n示例\ngit tag\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n知识速查\n创建版本库\n初始化项目 git init\n从零开始创建项目\n示例\ngit init \n克隆项目 git clone\n将已有项目拷贝到本地\n示例\ngi...","summary":"     (adsbygoogle = window.adsbygoogle || []).push({});  ","abstract":"     (adsbygoogle = window.adsbygoogle || []).push({});  ","description":"","picture":"","coverImageUrl":"","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/29 15:49"},"authorId":2952369,"columnId":75668,"writeTime":1554276029,"updateTime":1554276029,"viewCount":85,"likeCount":3,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"},{"tagId":10670,"tagName":"缓存"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2693,"type":40,"actionInfo":{"articleId":1409900,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554275891,"detail":{"id":1409900,"articleId":1409900,"title":"git 入门教程之 git 私服搭建教程\n                                                                            原\n ","content":"entityMap|0|type|LINK|mutability|MUTABLE|data|url|https://my.oschina.net/..base/install.md|blocks|key|ea5qe|text|unstyled|depth|inlineStyleRanges|entityRanges|bpa43|git+私服搭建教程|header-one|be2le|前几节我们的远程仓库使用的是+github+网站,托管项目大多是公开的,如果不想让任何人都能看到就需要收费,而且+github+网站毕竟在国外,访问速度太慢,基于上述两点原因,我们有必要搭建自己的+git+服务器.|offset|length|style|CODE|9brq7|虽然我们能搭建基本的+git+服务器,但是想要做到+github+网站那种规模还不是目前能够探讨的,本节的主要目标是使用我们私有服务器对我提供类似于github的远程仓库托管服务,以下示例以centos+服务器为例说明:|3knds|安装+git+服务|header-two|8naa6|运行以下命令安装+git+服务|abmqc|#+安装+git+相关依赖\nyum+install+curl-devel+expat-devel+gettext-devel+openssl-devel+zlib-devel+perl-devel\n\n#+安装+git\nyum+install+git\n\n#+查看+git+版本\ngit+--version|code-block|syntax|javascript|5mb1c|+详情请参考安装+git\n+|blockquote|9lp7e|配置+git+用户|2r707|创建+git+用户组和+git+用户,以便对外提供+git+服务|4160f|#+新增+git+用户组\ngroupadd+git\n\n#+新增+git+用户并归属于+git+用户组\nuseradd+git+-g+git|56a8e|收集+git+公钥|ej3dj|回忆一下,在我们使用+github+网站时,我们是不是曾经将本地电脑生成的公钥~/.ssh/id_rsa.pub+复制到+Account+->+Settings+->+SSH+and+GPG+keys+->+New+SSH+key,而我们现在搭建的git+服务还是简单,但是这步骤必不可少,因此只能手动收集素有需要访问我们服务器的公钥文件.|BOLD|4lad5|我们知道需要登录我们服务器的用户公钥一般是存放在~/.ssh/id_rsa.pub+,那当前服务器作为远程服务器将这些公钥存放到哪里呢?还记得上一步我们创建了+git+用户吗?|fvm38|因为+linux+系统支持多用户操作,而+git+用户就用于专门运行+git+服务,负责所有和+git+有关的事宜.因此,导入公钥文件的目录就是/home/git/.ssh/authorized_keys文件.一个用户公钥占用一行,几个用户就有几行.|1pue7|#+切换到+git+用户主目录\ncd+/home/git/\n\n#+创建.ssh+目录\nmkdir+.ssh\n\n#+赋予标准目录权限\nchmod+755+.ssh\n\n#+创建authorized_keys文件\ntouch+.ssh/authorized_keys\n\n#+赋予标签文件权限\nchmod+744+.ssh/authorized_keys|d47ki|初始化+git+仓库|7g7m8|同样我们和github+网站类比,在+github+创建仓库时都会在当前账号下创建项目,完整的访问路径大概是这样的:+git@github.com:snowdreams1006/git-demo.git,从中我们可以看出项目仓库都有一个前缀即命名空间,这和上一步操作是不是很类似,上一步收集+git+公钥时我们也有统一的目录,这次也不例外.|559eb|假设+git+仓库存放目录在+/home/git/repos/,同样的先创建该目录并赋予响应权限.|efl55|#+切换到+git+用户主目录\ncd+/home/git/\n\n#+创建+repos+目录\nmkdir+repos\n\n#+更改+repos+目录属主\nchown+git:git+repos/\n\n#+切换到+repos+目录\ncd+repos\n\n#+初始化+git+仓库\ngit+init+--bare+git-demo.git\n\n#+更改+git-demo.git+仓库属主\nchown+-R+git:git+git-demo.git|326hd|经过上述操作,我们成功在远程服务器部署了+git+服务,并且创建了+git-demo+测试项目,实际访问路径大概是这样的+git@snowdreams1006.cn:/home/git/repos/git-demo.git|ch0fi|本地克隆远程仓库|5mub7|身份回到本地电脑,假设本地已搭建好+git+环境,并且生成的ssh+公钥上传到远程服务器,那么我们接下来就可以和之前远程服务器是+github+网站那样的方式开发我们的项目了,唯一不同的是,接下来我们推送的远程服务器均是我们刚搭建好的主机.|7di01|需要做好心里准备,我们搭建的服务器还很简单,没有+github+网站那样可以直观操作远程仓库,但是这并不影响我们的+pull+push+merge+等操作哟!|akudr|git+clone+git@snowdreams1006.cn:/home/git/repos/git-demo.git|cikoo|+git-指的是+git+用户,snowdreams1006.cn-指的是远程主机域名或ip,/home/git/repos-指的是+git+仓库的目录,git-demo.git-指的是项目名称\n+|2bf0m|现在我们已经成功搭建好自己的+git私服了,是不是很简单呢?有没有对+git+和+github+进一步理解?欢迎大家一起探讨!|2jr91|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|F|6|1L|6|2R|3|0|B|3|Q|6|22|6|2N|6|0|0|9|3|0|0|6|6|0|0|0|3|3|C|3|Q|3|0|0|0|B|6|13|H|1P|1I|3G|3|45|4|0|O|H|28|3|0|3|5|L|3|Z|3|1C|3|20|U|0|0|0|5|6|J|6|1N|16|42|3|0|3|3|F|G|0|0|L|3|Y|8|1P|1E|0|0|I|3|U|3|1T|6|0|P|6|1M|F|0|0|0|F|3|Z|3|15|6|0^^$0|$1|$2|3|4|5|6|$7|8]]]|9|@$A|B|C|-4|2|D|E|2A|F|@]|G|@]|6|$]]|$A|H|C|I|2|J|E|2B|F|@]|G|@]|6|$]]|$A|K|C|L|2|D|E|2C|F|@$M|2D|N|2E|O|P]|$M|2F|N|2G|O|P]|$M|2H|N|2I|O|P]]|G|@]|6|$]]|$A|Q|C|R|2|D|E|2J|F|@$M|2K|N|2L|O|P]|$M|2M|N|2N|O|P]|$M|2O|N|2P|O|P]|$M|2Q|N|2R|O|P]]|G|@]|6|$]]|$A|S|C|T|2|U|E|2S|F|@]|G|@]|6|$]]|$A|V|C|W|2|D|E|2T|F|@$M|2U|N|2V|O|P]]|G|@]|6|$]]|$A|X|C|Y|2|Z|E|2W|F|@]|G|@]|6|$10|11]]|$A|12|C|13|2|14|E|2X|F|@]|G|@$M|2Y|N|2Z|A|30]]|6|$]]|$A|15|C|16|2|U|E|31|F|@]|G|@]|6|$]]|$A|17|C|18|2|D|E|32|F|@$M|33|N|34|O|P]|$M|35|N|36|O|P]|$M|37|N|38|O|P]]|G|@]|6|$]]|$A|19|C|1A|2|Z|E|39|F|@]|G|@]|6|$10|11]]|$A|1B|C|1C|2|U|E|3A|F|@]|G|@]|6|$]]|$A|1D|C|1E|2|D|E|3B|F|@$M|3C|N|3D|O|P]|$M|3E|N|3F|O|P]|$M|3G|N|3H|O|P]|$M|3I|N|3J|O|P]|$M|3K|N|3L|O|1F]]|G|@]|6|$]]|$A|1G|C|1H|2|D|E|3M|F|@$M|3N|N|3O|O|P]|$M|3P|N|3Q|O|P]]|G|@]|6|$]]|$A|1I|C|1J|2|D|E|3R|F|@$M|3S|N|3T|O|P]|$M|3U|N|3V|O|P]|$M|3W|N|3X|O|P]|$M|3Y|N|3Z|O|P]|$M|40|N|41|O|P]]|G|@]|6|$]]|$A|1K|C|1L|2|Z|E|42|F|@]|G|@]|6|$10|11]]|$A|1M|C|1N|2|U|E|43|F|@]|G|@]|6|$]]|$A|1O|C|1P|2|D|E|44|F|@$M|45|N|46|O|P]|$M|47|N|48|O|P]|$M|49|N|4A|O|P]|$M|4B|N|4C|O|P]]|G|@]|6|$]]|$A|1Q|C|1R|2|D|E|4D|F|@$M|4E|N|4F|O|P]|$M|4G|N|4H|O|P]]|G|@]|6|$]]|$A|1S|C|1T|2|Z|E|4I|F|@]|G|@]|6|$10|11]]|$A|1U|C|1V|2|D|E|4J|F|@$M|4K|N|4L|O|P]|$M|4M|N|4N|O|P]|$M|4O|N|4P|O|P]]|G|@]|6|$]]|$A|1W|C|1X|2|U|E|4Q|F|@]|G|@]|6|$]]|$A|1Y|C|1Z|2|D|E|4R|F|@$M|4S|N|4T|O|P]|$M|4U|N|4V|O|P]|$M|4W|N|4X|O|P]]|G|@]|6|$]]|$A|20|C|21|2|D|E|4Y|F|@$M|4Z|N|50|O|P]|$M|51|N|52|O|P]]|G|@]|6|$]]|$A|22|C|23|2|Z|E|53|F|@]|G|@]|6|$10|11]]|$A|24|C|25|2|14|E|54|F|@]|G|@]|6|$]]|$A|26|C|27|2|D|E|55|F|@$M|56|N|57|O|P]|$M|58|N|59|O|P]|$M|5A|N|5B|O|P]]|G|@]|6|$]]|$A|28|C|29|2|D|E|5C|F|@]|G|@]|6|$]]]]","plain":"\ngit 私服搭建教程\n前几节我们的远程仓库使用的是 github 网站,托管项目大多是公开的,如果不想让任何人都能看到就需要收费,而且 github 网站毕竟在国外,访问速度太慢,基于上述两点原因,我们有必要搭建自己的 git 服务器.\n虽然我们能搭建基本的 git 服务器,但是想要做到 github 网站那种规模还不是目前能够探讨的,本节的主要目标是使用我们私有服务器对我提供类似于github的远程仓库托管服务,以下示例以centos 服务器为例说明:\n安装 git 服务\n运行以下命令安装 git 服务\n# 安装 git 相关依赖\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel\n\n# 安装 git\nyum install git\n\n# 查看 git 版本\ngit --version\n 详情请参考安装 git\n \n配置 git 用户\n创建 git 用户组和 git 用户,以便对外提供 git 服务\n# 新增 git 用户组\ngroupadd git\n\n# 新增 git 用户并归属于 git 用户组\nuseradd git -g git\n收集 git 公钥\n回忆一下,在我们使用 github 网站时,我们是不是曾经将本地电脑生成的公钥~/.ssh/id_rsa.pub 复制到 Account -> Settings -> SSH and GPG keys -> New SSH key,而我们现在搭建的git 服务还是简单,但是这步骤必不可少,因此只能手动收集素有需要访问我们服务器的公钥文件.\n我们知道需要登录我们服务器的用户公钥一般是存放在~/.ssh/id_rsa.pub ,那当前服务器作为远程服务器将这些公钥存放到哪里呢?还记得上一步我们创建了 git 用户吗?\n因为 linux 系统支持多用户操作,而 git 用户就用于专门运行 git 服务,负责所有和 git 有关的事宜.因此,导入公钥文件的目录就是/home/git/.ssh/authorized_keys文件.一个用户公钥占用一行,几个用户就有几行.\n# 切换到 git 用户主目录\ncd /home/git/\n\n# 创建.ssh 目录\nmkdir .ssh\n\n# 赋予标准目录权限\nchmod 755 .ssh\n\n# 创建authorized_keys文件\ntouch .ssh/authorized_keys\n\n# 赋予标签文件权限\nchmod 744 .ssh/authorized_keys\n初始化 git 仓库\n同样我们和github 网站类比,在 github 创建仓库时都会在当前账号下创建项目,完整的访问路径大概是这样的: git@github.com:snowdreams1006/git-demo.git,从中我们可以看出项目仓库都有一个前缀即命名空间,这和上一步操作是不是很类似,上一步收集 git 公钥时我们也有统一的目录,这次也不例外.\n假设 git 仓库存放目录在 /home/git/repos/,同样的先创建该目录并赋予响应权限.\n# 切换到 git 用户主目录\ncd /home/git/\n\n# 创建 repos 目录\nmkdir repos\n\n# 更改 repos 目录属主\nchown git:git repos/\n\n# 切换到 repos 目录\ncd repos\n\n# 初始化 git 仓库\ngit init --bare git-demo.git\n\n# 更改 git-demo.git 仓库属主\nchown -R git:git git-demo.git\n经过上述操作,我们成功在远程服务器部署了 git 服务,并且创建了 git-demo 测试项目,实际访问路径大概是这样的 git@snowdreams1006.cn:/home/git/repos/git-demo.git\n本地克隆远程仓库\n身份回到本地电脑,假设本地已搭建好 git 环境,并且生成的ssh 公钥上传到远程服务器,那么我们接下来就可以和之前远程服务器是 github 网站那样的方式开发我们的项目了,唯一不同的是,接下来我们推送的远程服务器均是我们刚搭建好的主机.\n需要做好心里准备,我们搭建的服务器还很简单,没有 github 网站那样可以直观操作远程仓库,但是这并不影响我们的 pull push merge 等操作哟!\ngit clone git@snowdreams1006.cn:/home/git/repos/git-demo.git\n git-指的是 git 用户,snowdreams1006.cn-指的是远程主机域名或ip,/home/git/repos-指的是 git 仓库的目录,git-demo.git-指的是项目名称\n \n现在我们已经成功搭建好自己的 git私服了,是不是很简单呢?有没有对 git 和 github 进一步理解?欢迎大家一起探讨!\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\ngit 私服搭建教程\n前几节我们的远程仓库使用的是 github 网站,托管项目大多是公开的,如果不想让任何人都能看到就需要收费,而且 github 网站毕竟...","summary":"前几节我们的远程仓库使用的是 github 网站,托管项目大多是公开的,如果不想让任何人都能看到就需要收费,而且 github 网站毕竟在国外,访问速度太慢,基...","abstract":"前几节我们的远程仓库使用的是 github 网站,托管项目大多是公开的,如果不想让任何人都能看到就需要收费,而且 github 网站毕竟在国外,访问速度太慢,基...","description":"","picture":"","coverImageUrl":"","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/29 12:09"},"authorId":2952369,"columnId":75668,"writeTime":1554275891,"updateTime":1554275891,"viewCount":90,"likeCount":4,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10667,"tagName":"开源"},{"tagId":10283,"tagName":"Git"},{"tagId":10284,"tagName":"GitHub"},{"tagId":10689,"tagName":"ssh"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2692,"type":40,"actionInfo":{"articleId":1409899,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554275871,"detail":{"id":1409899,"articleId":1409899,"title":"git 入门教程之github 教程\n                                                                            原","content":"entityMap|0|type|IMAGE|mutability|IMMUTABLE|data|imageUrl|https://ask.qcloudimg.com/http-save/yehe-2952369/aznwylgeyg.png|imageAlt|github.png|1|LINK|MUTABLE|url|https://github.com/|2|https://github.com/snowdreams1006|3|https://github.com/security-plus|4|https://snowdreams1006.github.io/|5|https://ask.qcloudimg.com/http-save/yehe-2952369/ortgczhva1.png|snowdreams1006.github.io.png|6|https://ask.qcloudimg.com/http-save/yehe-2952369/kibtariea8.png|github-setting.png|7|https://ask.qcloudimg.com/http-save/yehe-2952369/5ubavp3oyr.png|github-ssh.png|8|https://ask.qcloudimg.com/http-save/yehe-2952369/qtauc1ddym.png|github-new-repository.png|9|https://ask.qcloudimg.com/http-save/yehe-2952369/xb6ivesw9p.png|github-repository-created.png|10|https://ask.qcloudimg.com/http-save/yehe-2952369/pk0tvf4j1w.png|github-repository-updated.png|blocks|key|75li7|text|unstyled|depth|inlineStyleRanges|entityRanges|fis3j|github+教程|header-one|851li|github+是一个基于+git+的代码托管平台,是平时工作学习的好帮手,学会如何用好+github+网站能够帮助我们更好分享代码或者与其他开发人员合作.|offset|length|style|CODE|7pr7u|?|atomic|e21vf|注册+github+账号|header-two|d4mrm|首先准备好邮箱和密码,然后在+github+官网注册新账号,和大多数网站类似的注册流程,唯一注意的是你要想好注册类型,针对个人用户来说,一般无外乎个人账号和项目账号两种,比如+snowdreams1006+就认为是个人账号,而这种+security-plus+认为是项目账号.|9546p|其实这两种账号对于+github+来说是一样的,不像是个人账号同企业账号的差异那么大,那为什么称个人账号和项目账号呢?+是因为,大多数个人开发者名下会有多款开源作品,这些作品既可以全部挂载在某一个开发者账号下面,也可以单独挂载某一个开发者账号下面,如果此时的账号名恰好是项目名岂不是清晰多了?|6cchq|因为个人刚开始可能并没多大名气,如果一个产品直接挂载在个人名下,那么这个产品很大程度上就依赖于个人名气了,所以不妨反过来,用产品说话,事实胜于雄辩,这种做法也是一种常用的宣传手段,很多个人开源产品正是这么做的!|4qd53|除此之外项目账号还有一个好处,利用+github+的静态网站托管服务可以免费快速搭建项目官网,只要创建一个snowdreams1006.github.io+的项目,那么这个项目就可以作为静态网站的源码项目了,访问+https://snowdreams1006.github.io+就能看到项目官网了!|24ops|+注意:+snowdreams1006仅仅是笔者用户名,实际需要替换成读者的用户名\n+|blockquote|pabb|f0k88|配置+github|8epb5|既然项目已经托管到+github+网站,那本地如何访问到远程仓库呢?常用的方式有两种,一种是+https+方式,每次都需要输入密码,另外一种是+ssh+方式,只需要一次配置ssh+密钥对.|9b771|这里我们重点介绍最常用也是最方便的第二种+ssh+方式访问+github+,大致思路是本地生成密钥对,然后将公钥上传给+github+表明身份,之后本地再次推送给远程仓库时,github+自然就能识别到我们身份了.|87iaj|第一步:+生成密钥对|BOLD|br4u1|默认情况下,会在当前用户目录下生成一对密钥对.|4ok6e|ssh-keygen+-t+rsa+-C+\"youremail@example.com\"|code-block|syntax|javascript|qge5|这里的邮箱+youremail@example.com+需要填写自己的+github+邮箱,之后会提示输入路径和密码,一路回车采用默认值即可,运行结束后会在当前用户目录下+生成一对密钥对,包括公钥和私钥.其中公钥可以发送给任何人,而私钥千万不可泄露.|9l567|第二步:+复制公钥|21fbf|在当前用户根目录下打开+.ssh+目录,其中包括两个文件,一个是公钥+id_rsa.pub+,另一个是私钥+id_rsa,用记事本或者其他方式打开公钥文件,复制其中内容,准备粘贴到github+相关设置项.|6i1h3|#+查看当前用户下的+ssh+目录\nls+~/.ssh\n\n#+查看生成的公钥内容\ncat+~/.ssh/id_rsa.pub|dpq8v|第三步:+设置+github|4ovvn|回到+github,点击头像(Acount),选择设置(Settings),再选择左侧的+SSH+and+GPG+keys,点击右侧的NEW+SSH+Key,然后填写标题(Title),最好是有意义的名称,比如youremail@example.com+for+github,密钥(Key)填写上一边生成的公钥,一般是以ssh-rsa+开头的一大串字符,最后保存(Add+SSH+Key).|8j78k|7ual6|2fh3k|第四步:+验证+ssh|6pg9k|利用+ssh+协议测试一下是否能够正常访问+github+网站,如果出现成功提示,那就证明我们的配置没问题.|8eadh|ssh+-T+git@github.com|6k9iv|创建远程仓库|6v0t9|登录+github+网站新建远程仓库(New+Repository),例如git-demo,默认权限是公开的(public),也可以选择私有的(private),初始化+README.md+文件和+.gitignore+文件以及选择开源协议这些都是可选的,视具体情况而定.|2gmlo|v62s|刷新当前页面,应该能到看到已创建好的git-demo+项目,接下来准备将其克隆到本地电脑.|47sao|3gqfr|克隆到本地仓库|8qhnu|将远程项目克隆到本地工作空间,和之前本地仓库的开发流程一样,例如add+commit+status+等等,唯一不同的是,多了一步+push+命令,即本地仓库的最新版本需要推送给远程仓库中,只有这样其他小伙伴才能从远程仓库拉取最新版本,进而才能看到你的代码,因而打破各自为政局面,实现团队协同开发.|1hm4h|#+克隆到本地仓库\ngit+clone+git@github.com:snowdreams1006/git-demo.git\n\n#+切换到当前项目\ncd+git-demo\n\n#+创建新文件\ntouch+test.txt\necho+\"add+test.txt\"+>+test.txt\n\n#+添加文件到暂存区\ngit+add+test.txt\n\n#+提交文件到本地仓库\ngit+commit+-m+\"add+test.txt\"\n\n#+推送到远程仓库\ngit+push+origin+master|5dkjb|提交完成后,登录+github+网站,刷新当前项目+git-demo+,应该能看到我们刚刚提交的新文件test.txt.|8o6gq|7fm07|添加仓库关联|daman|添加本地仓库和远程仓库之间关联,默认本地仓库分支名和远程仓库分支名相同|b1m9a|git+remote+add+origin2+git@github.com:snowdreams1006/git-demo.git|btgmf|查看远程仓库|2ggk6|查看当前配置有哪些远程仓库|9e0md|git+remote|4sojp|+执行时加上-v+参数能够查看别名关联的具体地址,即+git+remote+-v\n+|6j60v|下载远程仓库|c1j65|从远程仓库下载最新分支数据|b107c|git+fetch|e6jn3|+注意:+该命令并不会自动合并当前分支,如需要合并,需手动执行git+merge+命令\n+|25sqo|拉取远程仓库|fvejo|从远程仓库拉取最新分支数据,自动尝试合并到当前分支,如有冲突,需先解决冲突再合并到当前分支.|5p22t|git+pull|qblj|+git+pull+相当于+git+fetch+%2B+git+merge\n+|88jf7|推送远程分支|6k00j|将本地最新版本推送到远程仓库|14jvn|git+push+origin+master|3lgam|以上命令将本地+master+分支推送到+origin+远程仓库的+master+分支|5oep8|删除远程仓库|44hq|git+remote+rm+origin|e5h98|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|0|6|D|3|18|6|0|0|1|0|0|0|F|9|1|2G|E|2|38|D|3|0|A|6|0|0|I|6|1H|O|2Z|W|4|0|0|0|1|5|0|0|A|6|1B|5|20|3|2E|3|0|L|3|U|6|1O|6|2F|6|0|0|A|0|0|0|6|L|10|6|0|0|9|0|C|4|Z|A|1I|6|2I|6|0|0|0|E|0|3|6|2X|W|4G|7|0|0|1|6|0|0|1|7|0|0|B|0|3|3|M|6|0|0|0|3|6|11|8|2D|9|2R|A|0|0|1|8|0|I|8|0|0|1|9|0|0|W|H|1T|4|0|0|9|6|Q|8|1F|8|0|0|1|A|0|0|0|0|0|0|0|6|2|R|D|0|0|0|0|V|9|0|0|0|0|0|0|0|0|8|6|L|6|Y|6|0|0|0^^$0|$1|$2|3|4|5|6|$7|8|9|A]]|B|$2|C|4|D|6|$E|F]]|G|$2|C|4|D|6|$E|H]]|I|$2|C|4|D|6|$E|J]]|K|$2|C|4|D|6|$E|L]]|M|$2|3|4|5|6|$7|N|9|O]]|P|$2|3|4|5|6|$7|Q|9|R]]|S|$2|3|4|5|6|$7|T|9|U]]|V|$2|3|4|5|6|$7|W|9|X]]|Y|$2|3|4|5|6|$7|Z|9|10]]|11|$2|3|4|5|6|$7|12|9|13]]]|14|@$15|16|17|-4|2|18|19|4S|1A|@]|1B|@]|6|$]]|$15|1C|17|1D|2|1E|19|4T|1A|@]|1B|@]|6|$]]|$15|1F|17|1G|2|18|19|4U|1A|@$1H|4V|1I|4W|1J|1K]|$1H|4X|1I|4Y|1J|1K]|$1H|4Z|1I|50|1J|1K]]|1B|@]|6|$]]|$15|1L|17|1M|2|1N|19|51|1A|@]|1B|@$1H|52|1I|53|15|54]]|6|$]]|$15|1O|17|1P|2|1Q|19|55|1A|@]|1B|@]|6|$]]|$15|1R|17|1S|2|18|19|56|1A|@]|1B|@$1H|57|1I|58|15|59]|$1H|5A|1I|5B|15|5C]|$1H|5D|1I|5E|15|5F]]|6|$]]|$15|1T|17|1U|2|18|19|5G|1A|@$1H|5H|1I|5I|1J|1K]]|1B|@]|6|$]]|$15|1V|17|1W|2|18|19|5J|1A|@]|1B|@]|6|$]]|$15|1X|17|1Y|2|18|19|5K|1A|@$1H|5L|1I|5M|1J|1K]|$1H|5N|1I|5O|1J|1K]]|1B|@$1H|5P|1I|5Q|15|5R]]|6|$]]|$15|1Z|17|20|2|21|19|5S|1A|@]|1B|@]|6|$]]|$15|22|17|1M|2|1N|19|5T|1A|@]|1B|@$1H|5U|1I|5V|15|5W]]|6|$]]|$15|23|17|24|2|1Q|19|5X|1A|@]|1B|@]|6|$]]|$15|25|17|26|2|18|19|5Y|1A|@$1H|5Z|1I|60|1J|1K]|$1H|61|1I|62|1J|1K]|$1H|63|1I|64|1J|1K]|$1H|65|1I|66|1J|1K]]|1B|@]|6|$]]|$15|27|17|28|2|18|19|67|1A|@$1H|68|1I|69|1J|1K]|$1H|6A|1I|6B|1J|1K]|$1H|6C|1I|6D|1J|1K]|$1H|6E|1I|6F|1J|1K]]|1B|@]|6|$]]|$15|29|17|2A|2|18|19|6G|1A|@$1H|6H|1I|6I|1J|2B]]|1B|@]|6|$]]|$15|2C|17|2D|2|18|19|6J|1A|@]|1B|@]|6|$]]|$15|2E|17|2F|2|2G|19|6K|1A|@]|1B|@]|6|$2H|2I]]|$15|2J|17|2K|2|18|19|6L|1A|@$1H|6M|1I|6N|1J|1K]|$1H|6O|1I|6P|1J|1K]]|1B|@]|6|$]]|$15|2L|17|2M|2|18|19|6Q|1A|@$1H|6R|1I|6S|1J|2B]]|1B|@]|6|$]]|$15|2N|17|2O|2|18|19|6T|1A|@$1H|6U|1I|6V|1J|1K]|$1H|6W|1I|6X|1J|1K]|$1H|6Y|1I|6Z|1J|1K]|$1H|70|1I|71|1J|1K]]|1B|@]|6|$]]|$15|2P|17|2Q|2|2G|19|72|1A|@]|1B|@]|6|$2H|2I]]|$15|2R|17|2S|2|18|19|73|1A|@$1H|74|1I|75|1J|2B]]|1B|@]|6|$]]|$15|2T|17|2U|2|18|19|76|1A|@$1H|77|1I|78|1J|1K]|$1H|79|1I|7A|1J|1K]|$1H|7B|1I|7C|1J|1K]]|1B|@]|6|$]]|$15|2V|17|1M|2|1N|19|7D|1A|@]|1B|@$1H|7E|1I|7F|15|7G]]|6|$]]|$15|2W|17|1M|2|1N|19|7H|1A|@]|1B|@$1H|7I|1I|7J|15|7K]]|6|$]]|$15|2X|17|2Y|2|18|19|7L|1A|@$1H|7M|1I|7N|1J|2B]]|1B|@]|6|$]]|$15|2Z|17|30|2|18|19|7O|1A|@$1H|7P|1I|7Q|1J|1K]|$1H|7R|1I|7S|1J|1K]]|1B|@]|6|$]]|$15|31|17|32|2|2G|19|7T|1A|@]|1B|@]|6|$2H|2I]]|$15|33|17|34|2|1Q|19|7U|1A|@]|1B|@]|6|$]]|$15|35|17|36|2|18|19|7V|1A|@$1H|7W|1I|7X|1J|1K]|$1H|7Y|1I|7Z|1J|1K]|$1H|80|1I|81|1J|1K]|$1H|82|1I|83|1J|1K]]|1B|@]|6|$]]|$15|37|17|1M|2|1N|19|84|1A|@]|1B|@$1H|85|1I|86|15|87]]|6|$]]|$15|38|17|39|2|18|19|88|1A|@$1H|89|1I|8A|1J|1K]]|1B|@]|6|$]]|$15|3A|17|1M|2|1N|19|8B|1A|@]|1B|@$1H|8C|1I|8D|15|8E]]|6|$]]|$15|3B|17|3C|2|1Q|19|8F|1A|@]|1B|@]|6|$]]|$15|3D|17|3E|2|18|19|8G|1A|@$1H|8H|1I|8I|1J|1K]|$1H|8J|1I|8K|1J|1K]]|1B|@]|6|$]]|$15|3F|17|3G|2|2G|19|8L|1A|@]|1B|@]|6|$2H|2I]]|$15|3H|17|3I|2|18|19|8M|1A|@$1H|8N|1I|8O|1J|1K]|$1H|8P|1I|8Q|1J|1K]|$1H|8R|1I|8S|1J|1K]]|1B|@]|6|$]]|$15|3J|17|1M|2|1N|19|8T|1A|@]|1B|@$1H|8U|1I|8V|15|8W]]|6|$]]|$15|3K|17|3L|2|1Q|19|8X|1A|@]|1B|@]|6|$]]|$15|3M|17|3N|2|18|19|8Y|1A|@]|1B|@]|6|$]]|$15|3O|17|3P|2|2G|19|8Z|1A|@]|1B|@]|6|$2H|2I]]|$15|3Q|17|3R|2|1Q|19|90|1A|@]|1B|@]|6|$]]|$15|3S|17|3T|2|18|19|91|1A|@]|1B|@]|6|$]]|$15|3U|17|3V|2|2G|19|92|1A|@]|1B|@]|6|$2H|2I]]|$15|3W|17|3X|2|21|19|93|1A|@$1H|94|1I|95|1J|1K]|$1H|96|1I|97|1J|1K]]|1B|@]|6|$]]|$15|3Y|17|3Z|2|1Q|19|98|1A|@]|1B|@]|6|$]]|$15|40|17|41|2|18|19|99|1A|@]|1B|@]|6|$]]|$15|42|17|43|2|2G|19|9A|1A|@]|1B|@]|6|$2H|2I]]|$15|44|17|45|2|21|19|9B|1A|@$1H|9C|1I|9D|1J|1K]]|1B|@]|6|$]]|$15|46|17|47|2|1Q|19|9E|1A|@]|1B|@]|6|$]]|$15|48|17|49|2|18|19|9F|1A|@]|1B|@]|6|$]]|$15|4A|17|4B|2|2G|19|9G|1A|@]|1B|@]|6|$2H|2I]]|$15|4C|17|4D|2|21|19|9H|1A|@]|1B|@]|6|$]]|$15|4E|17|4F|2|1Q|19|9I|1A|@]|1B|@]|6|$]]|$15|4G|17|4H|2|18|19|9J|1A|@]|1B|@]|6|$]]|$15|4I|17|4J|2|2G|19|9K|1A|@]|1B|@]|6|$2H|2I]]|$15|4K|17|4L|2|18|19|9L|1A|@$1H|9M|1I|9N|1J|1K]|$1H|9O|1I|9P|1J|1K]|$1H|9Q|1I|9R|1J|1K]]|1B|@]|6|$]]|$15|4M|17|4N|2|1Q|19|9S|1A|@]|1B|@]|6|$]]|$15|4O|17|4P|2|2G|19|9T|1A|@]|1B|@]|6|$2H|2I]]|$15|4Q|17|4R|2|18|19|9U|1A|@]|1B|@]|6|$]]]]","plain":"\ngithub 教程\ngithub 是一个基于 git 的代码托管平台,是平时工作学习的好帮手,学会如何用好 github 网站能够帮助我们更好分享代码或者与其他开发人员合作.\n?\n注册 github 账号\n首先准备好邮箱和密码,然后在 github 官网注册新账号,和大多数网站类似的注册流程,唯一注意的是你要想好注册类型,针对个人用户来说,一般无外乎个人账号和项目账号两种,比如 snowdreams1006 就认为是个人账号,而这种 security-plus 认为是项目账号.\n其实这两种账号对于 github 来说是一样的,不像是个人账号同企业账号的差异那么大,那为什么称个人账号和项目账号呢? 是因为,大多数个人开发者名下会有多款开源作品,这些作品既可以全部挂载在某一个开发者账号下面,也可以单独挂载某一个开发者账号下面,如果此时的账号名恰好是项目名岂不是清晰多了?\n因为个人刚开始可能并没多大名气,如果一个产品直接挂载在个人名下,那么这个产品很大程度上就依赖于个人名气了,所以不妨反过来,用产品说话,事实胜于雄辩,这种做法也是一种常用的宣传手段,很多个人开源产品正是这么做的!\n除此之外项目账号还有一个好处,利用 github 的静态网站托管服务可以免费快速搭建项目官网,只要创建一个snowdreams1006.github.io 的项目,那么这个项目就可以作为静态网站的源码项目了,访问 https://snowdreams1006.github.io 就能看到项目官网了!\n 注意: snowdreams1006仅仅是笔者用户名,实际需要替换成读者的用户名\n \n?\n配置 github\n既然项目已经托管到 github 网站,那本地如何访问到远程仓库呢?常用的方式有两种,一种是 https 方式,每次都需要输入密码,另外一种是 ssh 方式,只需要一次配置ssh 密钥对.\n这里我们重点介绍最常用也是最方便的第二种 ssh 方式访问 github ,大致思路是本地生成密钥对,然后将公钥上传给 github 表明身份,之后本地再次推送给远程仓库时,github 自然就能识别到我们身份了.\n第一步: 生成密钥对\n默认情况下,会在当前用户目录下生成一对密钥对.\nssh-keygen -t rsa -C \"youremail@example.com\"\n这里的邮箱 youremail@example.com 需要填写自己的 github 邮箱,之后会提示输入路径和密码,一路回车采用默认值即可,运行结束后会在当前用户目录下 生成一对密钥对,包括公钥和私钥.其中公钥可以发送给任何人,而私钥千万不可泄露.\n第二步: 复制公钥\n在当前用户根目录下打开 .ssh 目录,其中包括两个文件,一个是公钥 id_rsa.pub ,另一个是私钥 id_rsa,用记事本或者其他方式打开公钥文件,复制其中内容,准备粘贴到github 相关设置项.\n# 查看当前用户下的 ssh 目录\nls ~/.ssh\n\n# 查看生成的公钥内容\ncat ~/.ssh/id_rsa.pub\n第三步: 设置 github\n回到 github,点击头像(Acount),选择设置(Settings),再选择左侧的 SSH and GPG keys,点击右侧的NEW SSH Key,然后填写标题(Title),最好是有意义的名称,比如youremail@example.com for github,密钥(Key)填写上一边生成的公钥,一般是以ssh-rsa 开头的一大串字符,最后保存(Add SSH Key).\n?\n?\n第四步: 验证 ssh\n利用 ssh 协议测试一下是否能够正常访问 github 网站,如果出现成功提示,那就证明我们的配置没问题.\nssh -T git@github.com\n创建远程仓库\n登录 github 网站新建远程仓库(New Repository),例如git-demo,默认权限是公开的(public),也可以选择私有的(private),初始化 README.md 文件和 .gitignore 文件以及选择开源协议这些都是可选的,视具体情况而定.\n?\n刷新当前页面,应该能到看到已创建好的git-demo 项目,接下来准备将其克隆到本地电脑.\n?\n克隆到本地仓库\n将远程项目克隆到本地工作空间,和之前本地仓库的开发流程一样,例如add commit status 等等,唯一不同的是,多了一步 push 命令,即本地仓库的最新版本需要推送给远程仓库中,只有这样其他小伙伴才能从远程仓库拉取最新版本,进而才能看到你的代码,因而打破各自为政局面,实现团队协同开发.\n# 克隆到本地仓库\ngit clone git@github.com:snowdreams1006/git-demo.git\n\n# 切换到当前项目\ncd git-demo\n\n# 创建新文件\ntouch test.txt\necho \"add test.txt\" > test.txt\n\n# 添加文件到暂存区\ngit add test.txt\n\n# 提交文件到本地仓库\ngit commit -m \"add test.txt\"\n\n# 推送到远程仓库\ngit push origin master\n提交完成后,登录 github 网站,刷新当前项目 git-demo ,应该能看到我们刚刚提交的新文件test.txt.\n?\n添加仓库关联\n添加本地仓库和远程仓库之间关联,默认本地仓库分支名和远程仓库分支名相同\ngit remote add origin2 git@github.com:snowdreams1006/git-demo.git\n查看远程仓库\n查看当前配置有哪些远程仓库\ngit remote\n 执行时加上-v 参数能够查看别名关联的具体地址,即 git remote -v\n \n下载远程仓库\n从远程仓库下载最新分支数据\ngit fetch\n 注意: 该命令并不会自动合并当前分支,如需要合并,需手动执行git merge 命令\n \n拉取远程仓库\n从远程仓库拉取最新分支数据,自动尝试合并到当前分支,如有冲突,需先解决冲突再合并到当前分支.\ngit pull\n git pull 相当于 git fetch + git merge\n \n推送远程分支\n将本地最新版本推送到远程仓库\ngit push origin master\n以上命令将本地 master 分支推送到 origin 远程仓库的 master 分支\n删除远程仓库\ngit remote rm origin\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\ngithub 教程\ngithub 是一个基于 git 的代码托管平台,是平时工作学习的好帮手,学会如何用好 github 网站能够帮助我们更好分享代码或者与其...","summary":"github 是一个基于 git 的代码托管平台,是平时工作学习的好帮手,学会如何用好 github 网站能够帮助我们更好分享代码或者与其他开发人员合作.","abstract":"github 是一个基于 git 的代码托管平台,是平时工作学习的好帮手,学会如何用好 github 网站能够帮助我们更好分享代码或者与其他开发人员合作.","description":"","picture":"https://ask.qcloudimg.com/http-save/yehe-2952369/aznwylgeyg.png","coverImageUrl":"https://ask.qcloudimg.com/http-save/yehe-2952369/aznwylgeyg.png","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/29 10:33"},"authorId":2952369,"columnId":75668,"writeTime":1554275871,"updateTime":1554275871,"viewCount":78,"likeCount":5,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10383,"tagName":"访问管理"},{"tagId":10284,"tagName":"GitHub"},{"tagId":10283,"tagName":"Git"},{"tagId":10689,"tagName":"ssh"},{"tagId":10667,"tagName":"开源"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2691,"type":40,"actionInfo":{"articleId":1409898,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554275851,"detail":{"id":1409898,"articleId":1409898,"title":"git 入门教程之忽略文件\n                                                                            原","content":"entityMap|0|type|LINK|mutability|MUTABLE|data|url|https://www.gitignore.io/|1|https://github.com/github/gitignore|blocks|key|ank3u|text|unstyled|depth|inlineStyleRanges|entityRanges|1ith2|忽略文件|header-one|9qiea|\"并不是所有的牛奶都叫特仑苏\",在版本控制系统中也有相似的表达,那就是\"并不是所有的文件都需要提交\".|offset|length|style|BOLD|5j9jl|有的是因为没必要提交,比如日志文件,系统缓存文件等,有的是因为不能提交,比如个人隐私文件,付费文档等.|5lmst|正常来说,这些文件都是不应该被提交到版本库,倘若一不留神提交到版本库,要么泄露机密信息,要是造成经济损失,要么对团队其他人工作造成不便.|520ue|有鉴于此,我们应该寻求一种机制来规避事故的发生,在+git+版本控制系统中一般有三种不同的解决方案.|CODE|3lj8g|最常用也是最简单的当属+.gitignore+文件,不过先不要着急,我们先了解一下忽略原则和配置规则.|dpvh3|忽略文件的基本原则|header-two|blvc2|忽略操作系统自动生成的文件,保持不同操作系统的纯粹性和整洁度.|unordered-list-item|4r0gm|忽略工具软件自动生成的文件,避免因个性化配置而产生的工作障碍.|6gnhr|忽略个人隐私配置文件,除非你愿意承担公开隐私所带来的潜在风险.|9goef|+目标:+只提交必要文件,忽略无用文件,尽可能考虑多种情况,不给他人制造麻烦.\n+|blockquote|eg1oe|忽略文件的配置规则|2ju7q|一行记录代表一条规则,配置规则仅针对尚未被跟踪的文件清单.|50vin|#+忽略+`*.a`+文件\n*.a\n#+忽略+`*.A`+文件,但+`somefile.A`+除外.\n*.A\n!somefile.A\n\n#+忽略+`*.b`+和+`*.B`+文件\n*.[bB]\n#+忽略+`*.c`+和+`*.C`+文件,但+`somefile.C`+除外.\n*.[cC]\n!somefile.C\n\n#+只忽略+`somepath/`+目录(包括该目录下所有文件),但不忽略+`somepath`+文件\nsomepath/\n#+只忽略+`somepath/`+一级子目录下+`*.txt`,但不忽略+`somepath/sub/*.txt`+文件\nsomepath/*.txt\n\n#+忽略+`somepath`+文件和+`somepath`+目录\nsomepath\n#+只忽略+`somepath`+文件,但不忽略+`somepath/`+目录\nsomepath\n!somepath/\n\n#+只忽略当前目录下的+`somepath`+文件和目录,但不忽略子目录的+`somepath`\n/somepath|code-block|syntax|javascript|1ej4a|+说明:+#+开头表示注释,!+紧跟某规则之后表示增加例外情况\n+|fm09f|在线示例和帮助文档|3sdmj|提供两个不错的在线示例,可以参考下在什么场景应该忽略哪些文件以及如何编写忽略规则.|41jo7|3l0p2|7c6s6|+运行+git+help+ignore+命令查看帮助文档\n+|84o6l|三种设置方式|9olcs|git+设置忽略文件有三种方式,如下:|e4vub|全局配置文件(~/.gitignore),执行+git+config+--global+core.excludesfile+~/.gitignore+命令后适用于所有的版本库.|u8l8|远程配置文件($PWD/.gitignore),编辑+.gitignore+文件后适用于远程和本地版本库.|fff30|本地配置文件($PWD/.git/info/exlude),编辑+$PWD/.git/info/exlude+文件后适用于本地版本库.|be3l4|最常用方式|70af2|三种设置方式中,第二种最为常见,另外两种大致一样,重点在于配置文件如何编写.|2lfoj|创建+.gitignore+文件|header-three|6hk7g|参考在线示例以及基本语法编写自定义忽略规则|5lg92|#+General\n.DS_Store\n.AppleDouble\n.LSOverride\n\n#+Windows+thumbnail+cache+files\nThumbs.db\nehthumbs.db\nehthumbs_vista.db|dktph|提交+.gitignore+文件|c64ec|忽略文件规则配置完毕后,需要将该文件提交到版本库,这样在其他电脑上也能应用相同的忽略规则.|79lgo|#+添加+`.gitignore`+\ngit+add+.gitignore\n\n#+提交+`.gitignore`+\ngit+commit+-m+\"add+.gitignore\"\n\n#+上传+`.gitignore`\ngit+push+origin+master|b54mi|验证忽略效果|br09g|新建+.gitignore+文件中已忽略的文件,运行+git+status+命令,如果提示+working+directory+clean,那么说明忽略文件的配置已经生效,如果工作区不干净,很遗憾,忽略文件配置可能并未生效,需要检查下哪里配置错了.|9nf6h|运行+git+check-ignore+命令检查是哪个配置规则写错了,从而我们能够更正相应的配置规则.|euqtg|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|H|6|0|0|0|Q|3|0|C|A|0|0|0|0|0|0|0|0|0|5|1|E|1|0|0|0|0|P|0|0|0|Z|1|0|4|F|0|0|0|3|0|7|C|O|1E|0|7|F|R|A|0|7|L|X|L|0|0|0|3|A|0|0|0|3|A|0|I|6|0|0|0|3|A|R|A|1A|N|0|3|G|0^^$0|$1|$2|3|4|5|6|$7|8]]|9|$2|3|4|5|6|$7|A]]]|B|@$C|D|E|-4|2|F|G|2W|H|@]|I|@]|6|$]]|$C|J|E|K|2|L|G|2X|H|@]|I|@]|6|$]]|$C|M|E|N|2|F|G|2Y|H|@$O|2Z|P|30|Q|R]]|I|@]|6|$]]|$C|S|E|T|2|F|G|31|H|@]|I|@]|6|$]]|$C|U|E|V|2|F|G|32|H|@]|I|@]|6|$]]|$C|W|E|X|2|F|G|33|H|@$O|34|P|35|Q|Y]]|I|@]|6|$]]|$C|Z|E|10|2|F|G|36|H|@$O|37|P|38|Q|Y]]|I|@]|6|$]]|$C|11|E|12|2|13|G|39|H|@]|I|@]|6|$]]|$C|14|E|15|2|16|G|3A|H|@]|I|@]|6|$]]|$C|17|E|18|2|16|G|3B|H|@]|I|@]|6|$]]|$C|19|E|1A|2|16|G|3C|H|@]|I|@]|6|$]]|$C|1B|E|1C|2|1D|G|3D|H|@]|I|@]|6|$]]|$C|1E|E|1F|2|13|G|3E|H|@]|I|@]|6|$]]|$C|1G|E|1H|2|F|G|3F|H|@]|I|@]|6|$]]|$C|1I|E|1J|2|1K|G|3G|H|@]|I|@]|6|$1L|1M]]|$C|1N|E|1O|2|1D|G|3H|H|@$O|3I|P|3J|Q|Y]|$O|3K|P|3L|Q|Y]]|I|@]|6|$]]|$C|1P|E|1Q|2|13|G|3M|H|@]|I|@]|6|$]]|$C|1R|E|1S|2|F|G|3N|H|@]|I|@]|6|$]]|$C|1T|E|8|2|16|G|3O|H|@]|I|@$O|3P|P|3Q|C|3R]]|6|$]]|$C|1U|E|A|2|16|G|3S|H|@]|I|@$O|3T|P|3U|C|3V]]|6|$]]|$C|1V|E|1W|2|1D|G|3W|H|@$O|3X|P|3Y|Q|Y]]|I|@]|6|$]]|$C|1X|E|1Y|2|13|G|3Z|H|@]|I|@]|6|$]]|$C|1Z|E|20|2|F|G|40|H|@$O|41|P|42|Q|Y]]|I|@]|6|$]]|$C|21|E|22|2|16|G|43|H|@$O|44|P|45|Q|Y]|$O|46|P|47|Q|Y]]|I|@]|6|$]]|$C|23|E|24|2|16|G|48|H|@$O|49|P|4A|Q|Y]|$O|4B|P|4C|Q|Y]]|I|@]|6|$]]|$C|25|E|26|2|16|G|4D|H|@$O|4E|P|4F|Q|Y]|$O|4G|P|4H|Q|Y]]|I|@]|6|$]]|$C|27|E|28|2|13|G|4I|H|@]|I|@]|6|$]]|$C|29|E|2A|2|F|G|4J|H|@]|I|@]|6|$]]|$C|2B|E|2C|2|2D|G|4K|H|@$O|4L|P|4M|Q|Y]]|I|@]|6|$]]|$C|2E|E|2F|2|F|G|4N|H|@]|I|@]|6|$]]|$C|2G|E|2H|2|1K|G|4O|H|@]|I|@]|6|$1L|1M]]|$C|2I|E|2J|2|2D|G|4P|H|@$O|4Q|P|4R|Q|Y]]|I|@]|6|$]]|$C|2K|E|2L|2|F|G|4S|H|@$O|4T|P|4U|Q|R]]|I|@]|6|$]]|$C|2M|E|2N|2|1K|G|4V|H|@]|I|@]|6|$1L|1M]]|$C|2O|E|2P|2|2D|G|4W|H|@]|I|@]|6|$]]|$C|2Q|E|2R|2|F|G|4X|H|@$O|4Y|P|4Z|Q|Y]|$O|50|P|51|Q|Y]|$O|52|P|53|Q|Y]]|I|@]|6|$]]|$C|2S|E|2T|2|F|G|54|H|@$O|55|P|56|Q|Y]]|I|@]|6|$]]|$C|2U|E|2V|2|F|G|57|H|@]|I|@]|6|$]]]]","plain":"\n忽略文件\n\"并不是所有的牛奶都叫特仑苏\",在版本控制系统中也有相似的表达,那就是\"并不是所有的文件都需要提交\".\n有的是因为没必要提交,比如日志文件,系统缓存文件等,有的是因为不能提交,比如个人隐私文件,付费文档等.\n正常来说,这些文件都是不应该被提交到版本库,倘若一不留神提交到版本库,要么泄露机密信息,要是造成经济损失,要么对团队其他人工作造成不便.\n有鉴于此,我们应该寻求一种机制来规避事故的发生,在 git 版本控制系统中一般有三种不同的解决方案.\n最常用也是最简单的当属 .gitignore 文件,不过先不要着急,我们先了解一下忽略原则和配置规则.\n忽略文件的基本原则\n忽略操作系统自动生成的文件,保持不同操作系统的纯粹性和整洁度.\n忽略工具软件自动生成的文件,避免因个性化配置而产生的工作障碍.\n忽略个人隐私配置文件,除非你愿意承担公开隐私所带来的潜在风险.\n 目标: 只提交必要文件,忽略无用文件,尽可能考虑多种情况,不给他人制造麻烦.\n \n忽略文件的配置规则\n一行记录代表一条规则,配置规则仅针对尚未被跟踪的文件清单.\n# 忽略 `*.a` 文件\n*.a\n# 忽略 `*.A` 文件,但 `somefile.A` 除外.\n*.A\n!somefile.A\n\n# 忽略 `*.b` 和 `*.B` 文件\n*.[bB]\n# 忽略 `*.c` 和 `*.C` 文件,但 `somefile.C` 除外.\n*.[cC]\n!somefile.C\n\n# 只忽略 `somepath/` 目录(包括该目录下所有文件),但不忽略 `somepath` 文件\nsomepath/\n# 只忽略 `somepath/` 一级子目录下 `*.txt`,但不忽略 `somepath/sub/*.txt` 文件\nsomepath/*.txt\n\n# 忽略 `somepath` 文件和 `somepath` 目录\nsomepath\n# 只忽略 `somepath` 文件,但不忽略 `somepath/` 目录\nsomepath\n!somepath/\n\n# 只忽略当前目录下的 `somepath` 文件和目录,但不忽略子目录的 `somepath`\n/somepath\n 说明: # 开头表示注释,! 紧跟某规则之后表示增加例外情况\n \n在线示例和帮助文档\n提供两个不错的在线示例,可以参考下在什么场景应该忽略哪些文件以及如何编写忽略规则.\nhttps://www.gitignore.io/\nhttps://github.com/github/gitignore\n 运行 git help ignore 命令查看帮助文档\n \n三种设置方式\ngit 设置忽略文件有三种方式,如下:\n全局配置文件(~/.gitignore),执行 git config --global core.excludesfile ~/.gitignore 命令后适用于所有的版本库.\n远程配置文件($PWD/.gitignore),编辑 .gitignore 文件后适用于远程和本地版本库.\n本地配置文件($PWD/.git/info/exlude),编辑 $PWD/.git/info/exlude 文件后适用于本地版本库.\n最常用方式\n三种设置方式中,第二种最为常见,另外两种大致一样,重点在于配置文件如何编写.\n创建 .gitignore 文件\n参考在线示例以及基本语法编写自定义忽略规则\n# General\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Windows thumbnail cache files\nThumbs.db\nehthumbs.db\nehthumbs_vista.db\n提交 .gitignore 文件\n忽略文件规则配置完毕后,需要将该文件提交到版本库,这样在其他电脑上也能应用相同的忽略规则.\n# 添加 `.gitignore` \ngit add .gitignore\n\n# 提交 `.gitignore` \ngit commit -m \"add .gitignore\"\n\n# 上传 `.gitignore`\ngit push origin master\n验证忽略效果\n新建 .gitignore 文件中已忽略的文件,运行 git status 命令,如果提示 working directory clean,那么说明忽略文件的配置已经生效,如果工作区不干净,很遗憾,忽略文件配置可能并未生效,需要检查下哪里配置错了.\n运行 git check-ignore 命令检查是哪个配置规则写错了,从而我们能够更正相应的配置规则.\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n忽略文件\n\"并不是所有的牛奶都叫特仑苏\",在版本控制系统中也有相似的表达,那就是\"并不是所有的文件都需要提交\".\n有的是因为没必要提交,比如日志文件,系统缓存...","summary":"\"并不是所有的牛奶都叫特仑苏\",在版本控制系统中也有相似的表达,那就是\"并不是所有的文件都需要提交\".","abstract":"\"并不是所有的牛奶都叫特仑苏\",在版本控制系统中也有相似的表达,那就是\"并不是所有的文件都需要提交\".","description":"","picture":"","coverImageUrl":"","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/28 22:11"},"authorId":2952369,"columnId":75668,"writeTime":1554275851,"updateTime":1554275851,"viewCount":94,"likeCount":3,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"},{"tagId":10284,"tagName":"GitHub"},{"tagId":10813,"tagName":"https"},{"tagId":10667,"tagName":"开源"},{"tagId":10681,"tagName":"网络安全"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2690,"type":40,"actionInfo":{"articleId":1409897,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554275837,"detail":{"id":1409897,"articleId":1409897,"title":"git 入门教程之个性化 git\n                                                                            原\n     ","content":"entityMap|0|type|IMAGE|mutability|IMMUTABLE|data|imageUrl|https://ask.qcloudimg.com/http-save/yehe-2952369/04ejg4pneb.gif|imageAlt|git-custom-config-editor.gif|1|https://ask.qcloudimg.com/http-save/yehe-2952369/mj51rrpgo.gif|git-custom-config-commit.gif|blocks|key|dvl66|text|unstyled|depth|inlineStyleRanges|entityRanges|49fg8|前情概要|header-two|170aj|初识+git+时,我们就已经接触过+git+的基本配置,使用+git+config+命令配置用户名和邮箱:|offset|length|style|CODE|cf7jt|#+配置当前项目(`local`)的用户名(`snowdreams1006`)\ngit+config+--local+user.name+\"snowdreams1006\"\n\n#+配置当前项目(`local`)的邮箱(`snowdreams1006@163.com`)\ngit+config+--local+user.email+\"snowdreams1006@163.com\"|code-block|syntax|javascript|c550s|快速回忆一下配置的相关语法:|akmer|#+查看默认全部配置:+`local>global>system`\ngit+config+--list\n\n#+查看当前项目配置,等同于+`.git/config`+文件\ngit+config+--local+--list\n\n#+查看当前用户配置,等同于+`~/.gitconfig`+文件+或+`~/.config/git/config`+文件\ngit+config+--global+--list\n\n#+查看当前系统配置,等同于+`/etc/gitconfig`+文件\ngit+config+--system+--list|c7kd7|+man+git-config+查看帮助文档,git+的配置文件是普通文本,也可以直接编辑.\n+|blockquote|aot9f|高频配置|1kpb0|总体来说,git+的配置项基本分为两类:+客户端和服务端.其中大部分属于客户端配置,+除非使用自己搭建私服,否则没机会手动配置服务端(第三方服务器基本都支持可视化配置,比如禁止强制推送等配置).|ther|alias+别名|header-three|1ejf8|熟悉+linux+操作的小伙伴对+ll+这个命令可能再熟悉不过了,是+ls+-l+的缩写,称之为别名.|BOLD|dqdtp|git+也支持别名,有个别名我们可以将常用的命令都缩短,大大降低出概率,提高工作效率.|7dejt|#+`git+checkout`+缩写成+`git+co`\ngit+config+--global+alias.co+checkout\n\n#+`git+commit`+缩写成+`git+ci`\ngit+config+--global+alias.ci+commit\n\n#+`git+branch`+缩写成+`git+br`\ngit+config+--global+alias.br+branch|7mcur|如此一来,以后再也不用担心打错字了,简化命令,懒人至上!|52euo|core.editor+编辑器|bdcmt|默认情况下,git+使用的是+$VISUAL+或+$EDITOR+配置的文本编辑器,如果没有设置,则调用+vi+编辑器创建和编辑文本信息.|ea5u4|查看当前编辑器配置项:|rudf|#+查看编辑器配置项:+若没配置过,则无内容输出,已配置过的话,会输出相应编辑器信息\ngit+config+core.editor|5tlig|假设使用+sublime+作为默认编辑器,那么便可如下设置:|9d421|#+`Mac`+系统如下设置:+设置成自己的+`Sublime`+的安装路径\ngit+config+--local+core.editor+\"'/Applications/Sublime+Text.app/Contents/SharedSupport/bin/subl'+-n+-w\"\n\n#+`Windows`+系统如下设置:+设置成自己的+`Sublime`+的安装路径\ngit+config+--local+core.editor+\"'F:\\Sublime+Text+3+sublime+text.exe'+-n+-w\"|1m0ct|此时再次查看编辑器配置项应该会输出刚才配置信息,接下来我们验证下编辑器的效果:|5571l|?|atomic|46j9j|查看提交历史,已经提交成功(之前备注信息是在命令行中直接输入的,而现在是在编辑器中编辑)|8f7gu|$+git+log+--pretty=oneline+--abbrev-commit\n43fa8aa+(HEAD+->+master)+validate+sublime+successfully\n00e16d7+ok\n2400f11+git+config+--local+core.editor+\"'/Applications/Sublime+Text.app/Contents/SharedSupport/bin/subl'+-n+-w\"\n0d60cb8+ok\n8fe5aba+(origin/master,+origin/HEAD)+Merge+branch+'master'+of+github.com:snowdreams1006/git-demo\n$+|49b8n|+如果只是输入简单备注,根本用不到编辑器,若提交备注有格式化要求时再手动输入就显得力不从心了!\n+|a7oec|core.template+提交模板|dcelu|如果你需要格式化提交备注,那么这种情况下模板文件最好不过了,和自定义的编辑器一起搭配,这样就能约束自己和他人按照既定格式规范填写提交备注,方便以后统一管理.|83i9j|查看当前提交模板配置:|f5ndp|git+config+commit.template|bk1l5|假设你在当前项目下创建+commit-template.txt+模板文件,内容如下:|fudk3|#+This+is+commit+template\n\n#+snowdreams1006+\n\n#+git-demo|73jns|将编辑好的模板文件设置成提交默认信息,需要如下设置:|77r1|git+config+--local+commit.template+commiit-template.txt|1ir9g|此时再次运行+git+config+commit.template+查看已配置提交模板,现在看一下实际效果:|efpus|c0im4|查看提交历史,当然也提交成功啦,可根据实际需求定制适合自己的提交模板.|9q9q0|$+git+log+--abbrev-commit\ncommit+a2ca3f0+(HEAD+->+master)\nAuthor:+snowdreams1006+<snowdreams1006@163.com>\nDate:+++Wed+Mar+27+16:22:18+2019+%2B0800\n\n++++ok\n++++\n++++myself\n++++\n++++yes\n\ncommit+43fa8aa\nAuthor:+snowdreams1006+<snowdreams1006@163.com>\nDate:+++Wed+Mar+27+14:58:36+2019+%2B0800\n\n++++validate+sublime+successfully\n\ncommit+00e16d7\nAuthor:+snowdreams1006+<snowdreams1006@163.com>\nDate:+++Wed+Mar+27+14:56:20+2019+%2B0800\n\n++++ok\n\ncommit+2400f11|4csok|+git+还支持其他配置,暂时不一一介绍了,详情请参考在线帮助文档:+man+git-config\n+|34hq5|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|3|3|I|3|V|A|0|0|0|0|1|E|N|3|0|0|5|3|0|0|5|0|3|5|H|2|Z|5|1C|2|0|0|3|0|0|0|0|B|0|6|3|F|7|P|7|1H|2|0|0|0|5|7|0|0|0|0|1|0|0|0|0|0|0|D|0|0|0|0|C|J|0|0|0|0|7|Q|0|0|1|1|0|0|0|1|3|Z|E|0^^$0|$1|$2|3|4|5|6|$7|8|9|A]]|B|$2|3|4|5|6|$7|C|9|D]]]|E|@$F|G|H|-4|2|I|J|31|K|@]|L|@]|6|$]]|$F|M|H|N|2|O|J|32|K|@]|L|@]|6|$]]|$F|P|H|Q|2|I|J|33|K|@$R|34|S|35|T|U]|$R|36|S|37|T|U]|$R|38|S|39|T|U]]|L|@]|6|$]]|$F|V|H|W|2|X|J|3A|K|@]|L|@]|6|$Y|Z]]|$F|10|H|11|2|I|J|3B|K|@]|L|@]|6|$]]|$F|12|H|13|2|X|J|3C|K|@]|L|@]|6|$Y|Z]]|$F|14|H|15|2|16|J|3D|K|@$R|3E|S|3F|T|U]|$R|3G|S|3H|T|U]]|L|@]|6|$]]|$F|17|H|18|2|O|J|3I|K|@]|L|@]|6|$]]|$F|19|H|1A|2|I|J|3J|K|@$R|3K|S|3L|T|U]]|L|@]|6|$]]|$F|1B|H|1C|2|1D|J|3M|K|@$R|3N|S|3O|T|U]]|L|@]|6|$]]|$F|1E|H|1F|2|I|J|3P|K|@$R|3Q|S|3R|T|U]|$R|3S|S|3T|T|U]|$R|3U|S|3V|T|U]|$R|3W|S|3X|T|1G]]|L|@]|6|$]]|$F|1H|H|1I|2|I|J|3Y|K|@$R|3Z|S|40|T|U]]|L|@]|6|$]]|$F|1J|H|1K|2|X|J|41|K|@]|L|@]|6|$Y|Z]]|$F|1L|H|1M|2|I|J|42|K|@]|L|@]|6|$]]|$F|1N|H|1O|2|1D|J|43|K|@$R|44|S|45|T|U]]|L|@]|6|$]]|$F|1P|H|1Q|2|I|J|46|K|@$R|47|S|48|T|U]|$R|49|S|4A|T|U]|$R|4B|S|4C|T|U]|$R|4D|S|4E|T|U]]|L|@]|6|$]]|$F|1R|H|1S|2|I|J|4F|K|@]|L|@]|6|$]]|$F|1T|H|1U|2|X|J|4G|K|@]|L|@]|6|$Y|Z]]|$F|1V|H|1W|2|I|J|4H|K|@$R|4I|S|4J|T|U]]|L|@]|6|$]]|$F|1X|H|1Y|2|X|J|4K|K|@]|L|@]|6|$Y|Z]]|$F|1Z|H|20|2|I|J|4L|K|@]|L|@]|6|$]]|$F|21|H|22|2|23|J|4M|K|@]|L|@$R|4N|S|4O|F|4P]]|6|$]]|$F|24|H|25|2|I|J|4Q|K|@]|L|@]|6|$]]|$F|26|H|27|2|X|J|4R|K|@]|L|@]|6|$Y|Z]]|$F|28|H|29|2|16|J|4S|K|@]|L|@]|6|$]]|$F|2A|H|2B|2|1D|J|4T|K|@$R|4U|S|4V|T|U]]|L|@]|6|$]]|$F|2C|H|2D|2|I|J|4W|K|@]|L|@]|6|$]]|$F|2E|H|2F|2|I|J|4X|K|@]|L|@]|6|$]]|$F|2G|H|2H|2|X|J|4Y|K|@]|L|@]|6|$Y|Z]]|$F|2I|H|2J|2|I|J|4Z|K|@$R|50|S|51|T|U]]|L|@]|6|$]]|$F|2K|H|2L|2|X|J|52|K|@]|L|@]|6|$Y|Z]]|$F|2M|H|2N|2|I|J|53|K|@]|L|@]|6|$]]|$F|2O|H|2P|2|X|J|54|K|@]|L|@]|6|$Y|Z]]|$F|2Q|H|2R|2|I|J|55|K|@$R|56|S|57|T|U]]|L|@]|6|$]]|$F|2S|H|22|2|23|J|58|K|@]|L|@$R|59|S|5A|F|5B]]|6|$]]|$F|2T|H|2U|2|I|J|5C|K|@]|L|@]|6|$]]|$F|2V|H|2W|2|X|J|5D|K|@]|L|@]|6|$Y|Z]]|$F|2X|H|2Y|2|16|J|5E|K|@$R|5F|S|5G|T|U]|$R|5H|S|5I|T|U]]|L|@]|6|$]]|$F|2Z|H|30|2|I|J|5J|K|@]|L|@]|6|$]]]]","plain":"\n前情概要\n初识 git 时,我们就已经接触过 git 的基本配置,使用 git config 命令配置用户名和邮箱:\n# 配置当前项目(`local`)的用户名(`snowdreams1006`)\ngit config --local user.name \"snowdreams1006\"\n\n# 配置当前项目(`local`)的邮箱(`snowdreams1006@163.com`)\ngit config --local user.email \"snowdreams1006@163.com\"\n快速回忆一下配置的相关语法:\n# 查看默认全部配置: `local>global>system`\ngit config --list\n\n# 查看当前项目配置,等同于 `.git/config` 文件\ngit config --local --list\n\n# 查看当前用户配置,等同于 `~/.gitconfig` 文件 或 `~/.config/git/config` 文件\ngit config --global --list\n\n# 查看当前系统配置,等同于 `/etc/gitconfig` 文件\ngit config --system --list\n man git-config 查看帮助文档,git 的配置文件是普通文本,也可以直接编辑.\n \n高频配置\n总体来说,git 的配置项基本分为两类: 客户端和服务端.其中大部分属于客户端配置, 除非使用自己搭建私服,否则没机会手动配置服务端(第三方服务器基本都支持可视化配置,比如禁止强制推送等配置).\nalias 别名\n熟悉 linux 操作的小伙伴对 ll 这个命令可能再熟悉不过了,是 ls -l 的缩写,称之为别名.\ngit 也支持别名,有个别名我们可以将常用的命令都缩短,大大降低出概率,提高工作效率.\n# `git checkout` 缩写成 `git co`\ngit config --global alias.co checkout\n\n# `git commit` 缩写成 `git ci`\ngit config --global alias.ci commit\n\n# `git branch` 缩写成 `git br`\ngit config --global alias.br branch\n如此一来,以后再也不用担心打错字了,简化命令,懒人至上!\ncore.editor 编辑器\n默认情况下,git 使用的是 $VISUAL 或 $EDITOR 配置的文本编辑器,如果没有设置,则调用 vi 编辑器创建和编辑文本信息.\n查看当前编辑器配置项:\n# 查看编辑器配置项: 若没配置过,则无内容输出,已配置过的话,会输出相应编辑器信息\ngit config core.editor\n假设使用 sublime 作为默认编辑器,那么便可如下设置:\n# `Mac` 系统如下设置: 设置成自己的 `Sublime` 的安装路径\ngit config --local core.editor \"'/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl' -n -w\"\n\n# `Windows` 系统如下设置: 设置成自己的 `Sublime` 的安装路径\ngit config --local core.editor \"'F:\\Sublime Text 3 sublime text.exe' -n -w\"\n此时再次查看编辑器配置项应该会输出刚才配置信息,接下来我们验证下编辑器的效果:\n?\n查看提交历史,已经提交成功(之前备注信息是在命令行中直接输入的,而现在是在编辑器中编辑)\n$ git log --pretty=oneline --abbrev-commit\n43fa8aa (HEAD -> master) validate sublime successfully\n00e16d7 ok\n2400f11 git config --local core.editor \"'/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl' -n -w\"\n0d60cb8 ok\n8fe5aba (origin/master, origin/HEAD) Merge branch 'master' of github.com:snowdreams1006/git-demo\n$ \n 如果只是输入简单备注,根本用不到编辑器,若提交备注有格式化要求时再手动输入就显得力不从心了!\n \ncore.template 提交模板\n如果你需要格式化提交备注,那么这种情况下模板文件最好不过了,和自定义的编辑器一起搭配,这样就能约束自己和他人按照既定格式规范填写提交备注,方便以后统一管理.\n查看当前提交模板配置:\ngit config commit.template\n假设你在当前项目下创建 commit-template.txt 模板文件,内容如下:\n# This is commit template\n\n# snowdreams1006 \n\n# git-demo\n将编辑好的模板文件设置成提交默认信息,需要如下设置:\ngit config --local commit.template commiit-template.txt\n此时再次运行 git config commit.template 查看已配置提交模板,现在看一下实际效果:\n?\n查看提交历史,当然也提交成功啦,可根据实际需求定制适合自己的提交模板.\n$ git log --abbrev-commit\ncommit a2ca3f0 (HEAD -> master)\nAuthor: snowdreams1006 <snowdreams1006@163.com>\nDate:   Wed Mar 27 16:22:18 2019 +0800\n\n    ok\n    \n    myself\n    \n    yes\n\ncommit 43fa8aa\nAuthor: snowdreams1006 <snowdreams1006@163.com>\nDate:   Wed Mar 27 14:58:36 2019 +0800\n\n    validate sublime successfully\n\ncommit 00e16d7\nAuthor: snowdreams1006 <snowdreams1006@163.com>\nDate:   Wed Mar 27 14:56:20 2019 +0800\n\n    ok\n\ncommit 2400f11\n git 还支持其他配置,暂时不一一介绍了,详情请参考在线帮助文档: man git-config\n \n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n前情概要\n初识 git 时,我们就已经接触过 git 的基本配置,使用 git config 命令配置用户名和邮箱:\n# 配置当前项目(`local`)的用户...","summary":"初识 git 时,我们就已经接触过 git 的基本配置,使用 git config 命令配置用户名和邮箱:","abstract":"初识 git 时,我们就已经接触过 git 的基本配置,使用 git config 命令配置用户名和邮箱:","description":"","picture":"https://ask.qcloudimg.com/http-save/yehe-2952369/04ejg4pneb.gif","coverImageUrl":"https://ask.qcloudimg.com/http-save/yehe-2952369/04ejg4pneb.gif","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/27 16:58"},"authorId":2952369,"columnId":75668,"writeTime":1554275837,"updateTime":1554275837,"viewCount":67,"likeCount":4,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2689,"type":40,"actionInfo":{"articleId":1409896,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554275822,"detail":{"id":1409896,"articleId":1409896,"title":"git 入门教程之里程碑式标签\n                                                                            原\n      ","content":"entityMap|0|type|IMAGE|mutability|IMMUTABLE|data|imageUrl|https://ask.qcloudimg.com/http-save/yehe-2952369/v1hvtoodad.png|imageAlt|git-tag-create.png|1|https://ask.qcloudimg.com/http-save/yehe-2952369/0hlv61p0bl.gif|git-tag.gif|blocks|key|4nbn1|text|unstyled|depth|inlineStyleRanges|entityRanges|n1df|\"春风得意马蹄疾,一日看尽长安花\",对于项目也是如此,最值得期待的恐怕就要数新版本发布的时刻了吧?每当发布新版本时要么是版本号命名(比如v0.0.1)或者代号命名(比如Chelsea),不管怎么说这种里程碑阶段总是要留下些许纪念意义.|offset|length|style|BOLD|CODE|17e8i|既然想要纪念这种特殊的历史时刻,自然是希望它能够固定下来,不要发生随意移动,产生不可预期后果.|6s1bs|这种需求其实和我们前面说的分支概念很相似,均是源于特殊的版本号,逐渐收集起一系列版本,最终形成一条相对独立的历史线,但分支并不是实现里程碑概念的最佳选择,为什么?|adud3|分支适合多人协作开发时互不影响,适当时机主动合并他人工作成果这种模式,而这种模式是由不同的功能模块进行驱动的,正所谓\"天下大势分久必合,合久必分\",当功能模块开发完毕后自然也就没有分支存在的必要性,更何况分支在收集版本的过程中会一直移动,并没有特殊的固定版本,显然分支不是最佳选择!|6tegr|但是,分支确定一定程度上和里程碑概念很相似,源于特定版本,自主命名,收集版本等,那么何必重头再来,为何不复用已有概念呢?|976js|实际上,git+中的标签(tag)+就是实现里程碑概念的方式,它可以永久性指向特定的提交并将命名,然后就可以将其理解成分支一样引用了!|m9q5|但标签(tag)不是分支(branch),标签是一个点的话,分支就是若干点连接而成的线,标签是静态的,分支是动态的,标签是只读的,分只是可读可写的.|cmmdg|?|atomic|72ncc|创建标签+git+tag+<tag>|header-two|2ktt1|#+方式一:+默认+`HEAD`+指向的版本\ngit+tag+v0.0.1\n\n#+方式二:+指定+`commit_id`+表示的版本\ngit+tag+v0.0.2+f971647\n\n#+方式三:+指定+`commit_id`+表示的版本,同时创建标签说明信息\ngit+tag+-a+v0.0.3+-m+\"v0.0.3\"+f971647|code-block|syntax|javascript|dfbae|3r8m1|列出标签+git+tag|7gpnc|git+tag+|ca8dd|显示标签+git+show+<tag>|5utpp|git+show+v0.0.1|dli84|删除标签+git+tag+-d+<tag>|6va4f|git+tag+-d+v0.0.1|falki|推送标签+git+push+origin+<tag>|fqvhk|git+push+origin+v0.0.1|2ilmq|推送全部标签+git+push+origin+--tags|3mmr7|git+push+origin+--tags|15l56|删除远程标签+git+tag+-d+<tag>+git+push+origin+:refs/tags/<tag>|al3dn|#+删除本地标签+\ngit+tag+-d+v0.0.1\n\n#+推送删除标签(删除也是推送)\ngit+push+origin+:refs/tags/v0.0.1|4g5p|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|12|3|1W|6|2C|7|0|X|4|0|D|2|1D|4|1N|2|1U|3|0|0|2|6|4|3O|2|0|3|2|D|3|0|4|3|D|3|M|3|0|4|3|D|6|0|0|1|0|0|5|D|0|0|0|1|1|0|5|7|0|0|5|E|0|0|5|G|0|0|5|L|0|0|7|M|0|0|7|G|O|W|0|0^^$0|$1|$2|3|4|5|6|$7|8|9|A]]|B|$2|3|4|5|6|$7|C|9|D]]]|E|@$F|G|H|-4|2|I|J|27|K|@]|L|@]|6|$]]|$F|M|H|N|2|I|J|28|K|@$O|29|P|2A|Q|R]|$O|2B|P|2C|Q|S]|$O|2D|P|2E|Q|S]]|L|@]|6|$]]|$F|T|H|U|2|I|J|2F|K|@$O|2G|P|2H|Q|R]]|L|@]|6|$]]|$F|V|H|W|2|I|J|2I|K|@$O|2J|P|2K|Q|R]|$O|2L|P|2M|Q|R]|$O|2N|P|2O|Q|R]|$O|2P|P|2Q|Q|R]]|L|@]|6|$]]|$F|X|H|Y|2|I|J|2R|K|@$O|2S|P|2T|Q|R]|$O|2U|P|2V|Q|R]|$O|2W|P|2X|Q|R]]|L|@]|6|$]]|$F|Z|H|10|2|I|J|2Y|K|@$O|2Z|P|30|Q|R]|$O|31|P|32|Q|R]]|L|@]|6|$]]|$F|11|H|12|2|I|J|33|K|@$O|34|P|35|Q|S]|$O|36|P|37|Q|S]|$O|38|P|39|Q|R]]|L|@]|6|$]]|$F|13|H|14|2|I|J|3A|K|@$O|3B|P|3C|Q|S]|$O|3D|P|3E|Q|S]]|L|@]|6|$]]|$F|15|H|16|2|17|J|3F|K|@]|L|@$O|3G|P|3H|F|3I]]|6|$]]|$F|18|H|19|2|1A|J|3J|K|@$O|3K|P|3L|Q|S]]|L|@]|6|$]]|$F|1B|H|1C|2|1D|J|3M|K|@]|L|@]|6|$1E|1F]]|$F|1G|H|16|2|17|J|3N|K|@]|L|@$O|3O|P|3P|F|3Q]]|6|$]]|$F|1H|H|1I|2|1A|J|3R|K|@$O|3S|P|3T|Q|S]]|L|@]|6|$]]|$F|1J|H|1K|2|1D|J|3U|K|@]|L|@]|6|$1E|1F]]|$F|1L|H|1M|2|1A|J|3V|K|@$O|3W|P|3X|Q|S]]|L|@]|6|$]]|$F|1N|H|1O|2|1D|J|3Y|K|@]|L|@]|6|$1E|1F]]|$F|1P|H|1Q|2|1A|J|3Z|K|@$O|40|P|41|Q|S]]|L|@]|6|$]]|$F|1R|H|1S|2|1D|J|42|K|@]|L|@]|6|$1E|1F]]|$F|1T|H|1U|2|1A|J|43|K|@$O|44|P|45|Q|S]]|L|@]|6|$]]|$F|1V|H|1W|2|1D|J|46|K|@]|L|@]|6|$1E|1F]]|$F|1X|H|1Y|2|1A|J|47|K|@$O|48|P|49|Q|S]]|L|@]|6|$]]|$F|1Z|H|20|2|1D|J|4A|K|@]|L|@]|6|$1E|1F]]|$F|21|H|22|2|1A|J|4B|K|@$O|4C|P|4D|Q|S]|$O|4E|P|4F|Q|S]]|L|@]|6|$]]|$F|23|H|24|2|1D|J|4G|K|@]|L|@]|6|$1E|1F]]|$F|25|H|26|2|I|J|4H|K|@]|L|@]|6|$]]]]","plain":"\n\"春风得意马蹄疾,一日看尽长安花\",对于项目也是如此,最值得期待的恐怕就要数新版本发布的时刻了吧?每当发布新版本时要么是版本号命名(比如v0.0.1)或者代号命名(比如Chelsea),不管怎么说这种里程碑阶段总是要留下些许纪念意义.\n既然想要纪念这种特殊的历史时刻,自然是希望它能够固定下来,不要发生随意移动,产生不可预期后果.\n这种需求其实和我们前面说的分支概念很相似,均是源于特殊的版本号,逐渐收集起一系列版本,最终形成一条相对独立的历史线,但分支并不是实现里程碑概念的最佳选择,为什么?\n分支适合多人协作开发时互不影响,适当时机主动合并他人工作成果这种模式,而这种模式是由不同的功能模块进行驱动的,正所谓\"天下大势分久必合,合久必分\",当功能模块开发完毕后自然也就没有分支存在的必要性,更何况分支在收集版本的过程中会一直移动,并没有特殊的固定版本,显然分支不是最佳选择!\n但是,分支确定一定程度上和里程碑概念很相似,源于特定版本,自主命名,收集版本等,那么何必重头再来,为何不复用已有概念呢?\n实际上,git 中的标签(tag) 就是实现里程碑概念的方式,它可以永久性指向特定的提交并将命名,然后就可以将其理解成分支一样引用了!\n但标签(tag)不是分支(branch),标签是一个点的话,分支就是若干点连接而成的线,标签是静态的,分支是动态的,标签是只读的,分只是可读可写的.\n?\n创建标签 git tag <tag>\n# 方式一: 默认 `HEAD` 指向的版本\ngit tag v0.0.1\n\n# 方式二: 指定 `commit_id` 表示的版本\ngit tag v0.0.2 f971647\n\n# 方式三: 指定 `commit_id` 表示的版本,同时创建标签说明信息\ngit tag -a v0.0.3 -m \"v0.0.3\" f971647\n?\n列出标签 git tag\ngit tag \n显示标签 git show <tag>\ngit show v0.0.1\n删除标签 git tag -d <tag>\ngit tag -d v0.0.1\n推送标签 git push origin <tag>\ngit push origin v0.0.1\n推送全部标签 git push origin --tags\ngit push origin --tags\n删除远程标签 git tag -d <tag> git push origin :refs/tags/<tag>\n# 删除本地标签 \ngit tag -d v0.0.1\n\n# 推送删除标签(删除也是推送)\ngit push origin :refs/tags/v0.0.1\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n\"春风得意马蹄疾,一日看尽长安花\",对于项目也是如此,最值得期待的恐怕就要数新版本发布的时刻了吧?每当发布新版本时要么是版本号命名(比如v0.0.1)或者代号...","summary":"\"春风得意马蹄疾,一日看尽长安花\",对于项目也是如此,最值得期待的恐怕就要数新版本发布的时刻了吧?每当发布新版本时要么是版本号命名(比如v0.0.1)或者代号命...","abstract":"\"春风得意马蹄疾,一日看尽长安花\",对于项目也是如此,最值得期待的恐怕就要数新版本发布的时刻了吧?每当发布新版本时要么是版本号命名(比如v0.0.1)或者代号命...","description":"","picture":"https://ask.qcloudimg.com/http-save/yehe-2952369/v1hvtoodad.png","coverImageUrl":"https://ask.qcloudimg.com/http-save/yehe-2952369/v1hvtoodad.png","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/27 01:02"},"authorId":2952369,"columnId":75668,"writeTime":1554275822,"updateTime":1554275822,"viewCount":74,"likeCount":3,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2688,"type":40,"actionInfo":{"articleId":1409894,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554275783,"detail":{"id":1409894,"articleId":1409894,"title":"git 入门教程之本地和远程仓库的本质\n                                                                            原","content":"entityMap|0|type|IMAGE|mutability|IMMUTABLE|data|imageUrl|https://ask.qcloudimg.com/http-save/yehe-2952369/axvakj6j48.gif|imageAlt|git-local-remote-push.gif|1|https://ask.qcloudimg.com/http-save/yehe-2952369/r108d6khmq.gif|git-local-remote-pull.gif|2|LINK|MUTABLE|url|https://cloud.tencent.com/developer/support-plan?invite_code=4na4tee1wqwc|blocks|key|3k9hk|text|unstyled|depth|inlineStyleRanges|entityRanges|7gjr8|本地仓库和远程仓库在本质上没有太大区别,只不过一个是本地电脑,一个是远程电脑.|offset|length|style|BOLD|97vs7|远程仓库不一定非得是+github+那种专门的\"中央服务器\",甚至局域网的另外一台电脑也可以充当\"中央服务器\"的角色,因为它存在的最初目的只是方便大家交换彼此的提交记录而已!|CODE|cgvia|所以本地仓库和远程仓库的基本行为应该是一致的,约定俗成的规定是远程仓库一般不直接参与日常开发工作,主要作为项目托管中心.|81acd|+某些自动化持续集成环境中也可能会直接操作远程仓库,这时远程仓库就真的和本地仓库没什么区别了!\n+|blockquote|f5bo1|个人开发常用命令|header-two|dgo55|个人开发看重的是效率,同时兼顾下版本控制的话算是是锦上添花,git+的本地仓库是本地备份,而远程仓库则是网盘备份.|cmrmb|git+init+:+初始化本地项目|header-three|7uhgs|将本地项目初始化+git+项目,直观表现是在该项目同级目录下多了+.git+隐藏目录,其存储着+git+版本库相关信息.|5q1ib|+此后当前项目便具备了本地管理的能力,可以与+git+进行交互.\n+|agevt|git+clone+:+克隆远程项目|a1d0i|同+git+init+一样的作用,也是创建本地仓库,只不过+git+init+是直接将本地项目作为本地仓库,而git+clone+是将远程项目克隆到本地并作为本地仓库.|3b85o|+由此可见,git+clone+比+git+init+多了一层远程仓库的概念.\n+|4l8ff|git+add+:+添加文件|6nk2s|将工作区的提交记录添加到暂存区,暂存区是工作区和版本库交互的桥梁,暂存区积累到一定量的提交记录时可以批量提交到版本库,这一点暂存区有点像缓存.|2vu6u|git+commit+:+提交文件|7g6ho|将暂存区的版本提交到版本库,从而形成工作区->暂存区->版本库的基本链路,本地工作区的版本控制流程大致如此.|eln8d|git+push+:+推送文件|5m6qj|如果是使用+git+clone+命令克隆的本地项目,当工作到一定程度时可能需要将这部分工作成果推送到远程仓库,这时候使用+git+push+命令完成本地版本的推送流程.|a3ibf|如果是使用+git+init+命令初始化的本地项目,可能没有远程仓库,自然也就不需要推送.如果后来创建了远程仓库,那么你自然是想要将本地仓库推送到远程仓库的,因此你需要准确告诉+git+你要推送到哪个远程仓库.+使用+git+remote+add+origin+git@github.com:username/repos.git+命令添加远程仓库信息,这样就建立了本地仓库和远程仓库的关联,以后就可以正常推送到远程仓库了.|5sgu2|团队开发常用命令|aqge6|团队开发注重的不仅是个人效率还有团队的整体进度,随着企业级开发的日趋复杂化,不再是一个人能够独立完成的,更何况时间也不允许慢慢完成,大多数公司采用的是人力换时间的方式,团队并行开发来缩短整个项目周期,这种复杂需求下正是+git+大展拳脚的好机会.|6j4qj|项目整体采用并行开发模式,拆解成不同的功能模块,每个人负责各自模块,模块之间相对独立但也不排除存在交集的可能性.对于每一个个体开发者来说,既需要版本控制又需要团队交流.这时候分支的作用就凸显出来了.|3274v|根据项目的业务特点将其拆解成不同的功能模块,这些功能模块分别代表不同的分支,而这些功能模块又组成了完整的项目,这就是主干和分支的关系.|58h2g|+初始时项目是一个整体,中间拆解成不同功能模块,最后再合并成一个整---\"分久必分合久必分\".\n+|ev9pt|git+branch+<branch>+:+创建分支|a76qm|每一个独立的功能模块被定义成一个单独分支,创建分支的过程其实是拆解项目的过程,创建本地分支后就在分支上开发特有功能,不再关心其他功能分支.|8m3u5|git+checkout+<branch>+:+切换分支|6o894|模块拆解完成并创建了相应的分支后,需要切换到既定分支上才能开展自己的工作.|65ntv|git+merge+<branch>+:+合并分支|4q08s|没有绝对的独立,项目再怎么拆分也是整体的一部分,肯定需要和其他功能模块发生关系,某些情况下需要其他分支的工作成果合并到自己的本地仓库中,这样才能完成一次小规模的组装.|2slh6|可以预期的是,当这种组装足够多的时候,最终便会演变成项目的终极形态,形成一个整体.|c4gk|git+fetch+:+抓取远程分支|9thkj|合并目标分支首先需要能够获取到目标分支的提交记录,既然每个功能模块都是不同的项目成员负责开发的,也就不在我们电脑上,所以我们先要将目标分支下载到我们本地电脑,然后才能合并该分支到本地分支.|29tq9|git+pull+:+拉取远程分支|b5pmo|\"先下载目标分支再合并到本地分支,从而小规模组成更复杂更强大的功能\",每一次的组装过程都需要两步操作者显然不符合懒人思维啊,git+pull+就是这两步操作的简化命令,先下载再合并就是这么简单!|4btsf|本地和远程仓库的碰撞|9894s|不论是个人开发还是团队开发,我们几乎习惯惯站在主动方的角度来思考问题,有没有想过当远程仓库接收到我们的git+push+或+git+pull+请求时,远程仓库发什么了什么改变,这种改变对本地仓库又有什么影响?|eh4l6|远程仓库(远程电脑上的本地仓库)只是众多分布式电脑上本地仓库中的一员,说它特殊也很特殊,充当着\"中央服务器\"作用,其余人统一从这里下载或推送;说它普通也很普通,和本地电脑上的本地仓库没有什么不同,因为它随时可被任意电脑上的本地仓库所取代!|570o8|揭开远程仓库的神秘面纱后,现在我们只需要将其视为普通的本地仓库一样对待即可,然而我们本地电脑上已经有了本地仓库,故而需要将远程仓库做一下简单标识区分(origin)称之为远程分支.|550jf|+先说说+git+push+命令做了什么?\n+|unordered-list-item|2uops|对于本地来说,git+将本地仓库的指定分支推送到远程仓库的相应分支,同时更新了本地仓库的远程分支.|ordered-list-item|1sgg|对于远程来说,git+接收到本地仓库的推送请求时应该在相应分支上合并本地分支,同时更新远程仓库的相应分支.|4a8o6|只要本地的指定分支成功推送到远程的相应分支时,对于本地来说,不论是指定分支还是远程分支(origin/master)都应该是最新状态,因为已经与服务器同步了.|645f4|而远程接收到此次推送请求时,应该尝试合并此次推送请求,再更新自己的相应分支,远程合并完成后再通知本地此次推送结果,如此一来,三端同步,皆大欢喜!|b8h1f|?|atomic|7gqe3|+再讲讲+git+pull+命令发生了什么?\n+|4vmc|对于远程来说,接收到本地的拉取请求时,因为没有新版本需要处理,所以无需任何操作.|dugtn|对于本地来说,当远程仓库的相应分支下载到本地时应该更新远程分支状态,再尝试合并到本地的相应分支.|4sdf3|+git+pull+命令或者说是+git+fetch+命令是本地和远程通信的方式,所以+origin/master+会自动更新!\n+|ffsq6|8nul3|小结|75f22|本地仓库和远程仓库本质上没有太大区别,+git+fetch+是本地仓库和远程仓库之间的通信途径,本地仓库中的远程分支(origin/master)保存着它们之间最后一次的通信状态.|a25o2|我的博客即将同步至腾讯云%2B社区，邀请大家一同入驻：https://cloud.tencent.com/developer/support-plan?invite_code=4na4tee1wqwc|3ftea|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|4|5|4|0|B|6|23|9|0|0|0|0|8|2|G|4|U|3|0|0|8|0|9|3|X|4|1C|3|0|N|3|0|0|9|0|2|8|U|8|1J|9|0|6|9|I|8|0|0|7|0|0|0|A|0|I|D|17|6|0|0|8|0|6|9|1P|8|0|6|8|2H|3|31|1J|0|0|32|3|0|0|0|0|0|J|0|0|0|L|0|0|0|I|0|0|0|0|9|0|0|0|8|0|1Q|8|2C|6|0|0|N|3|1F|8|1Q|8|0|0|23|6|0|5|8|1|7|3|1|7|3|0|18|D|0|0|0|1|0|0|5|8|1|1|0|1|8|H|9|18|D|0|0|1|1|0|0|K|9|1N|D|0|P|21|2|0^^$0|$1|$2|3|4|5|6|$7|8|9|A]]|B|$2|3|4|5|6|$7|C|9|D]]|E|$2|F|4|G|6|$H|I]]]|J|@$K|L|M|-4|2|N|O|41|P|@]|Q|@]|6|$]]|$K|R|M|S|2|N|O|42|P|@$T|43|U|44|V|W]|$T|45|U|46|V|W]]|Q|@]|6|$]]|$K|X|M|Y|2|N|O|47|P|@$T|48|U|49|V|Z]|$T|4A|U|4B|V|W]]|Q|@]|6|$]]|$K|10|M|11|2|N|O|4C|P|@]|Q|@]|6|$]]|$K|12|M|13|2|14|O|4D|P|@]|Q|@]|6|$]]|$K|15|M|16|2|17|O|4E|P|@]|Q|@]|6|$]]|$K|18|M|19|2|N|O|4F|P|@$T|4G|U|4H|V|W]|$T|4I|U|4J|V|W]|$T|4K|U|4L|V|Z]]|Q|@]|6|$]]|$K|1A|M|1B|2|1C|O|4M|P|@$T|4N|U|4O|V|Z]]|Q|@]|6|$]]|$K|1D|M|1E|2|N|O|4P|P|@$T|4Q|U|4R|V|Z]|$T|4S|U|4T|V|Z]|$T|4U|U|4V|V|Z]]|Q|@]|6|$]]|$K|1F|M|1G|2|14|O|4W|P|@$T|4X|U|4Y|V|Z]]|Q|@]|6|$]]|$K|1H|M|1I|2|1C|O|4Z|P|@$T|50|U|51|V|Z]]|Q|@]|6|$]]|$K|1J|M|1K|2|N|O|52|P|@$T|53|U|54|V|Z]|$T|55|U|56|V|Z]|$T|57|U|58|V|Z]]|Q|@]|6|$]]|$K|1L|M|1M|2|14|O|59|P|@$T|5A|U|5B|V|Z]|$T|5C|U|5D|V|Z]]|Q|@]|6|$]]|$K|1N|M|1O|2|1C|O|5E|P|@$T|5F|U|5G|V|Z]]|Q|@]|6|$]]|$K|1P|M|1Q|2|N|O|5H|P|@]|Q|@]|6|$]]|$K|1R|M|1S|2|1C|O|5I|P|@$T|5J|U|5K|V|Z]]|Q|@]|6|$]]|$K|1T|M|1U|2|N|O|5L|P|@$T|5M|U|5N|V|W]|$T|5O|U|5P|V|W]]|Q|@]|6|$]]|$K|1V|M|1W|2|1C|O|5Q|P|@$T|5R|U|5S|V|Z]]|Q|@]|6|$]]|$K|1X|M|1Y|2|N|O|5T|P|@$T|5U|U|5V|V|Z]|$T|5W|U|5X|V|Z]]|Q|@]|6|$]]|$K|1Z|M|20|2|N|O|5Y|P|@$T|5Z|U|60|V|Z]|$T|61|U|62|V|Z]|$T|63|U|64|V|Z]]|Q|@]|6|$]]|$K|21|M|22|2|17|O|65|P|@]|Q|@]|6|$]]|$K|23|M|24|2|N|O|66|P|@$T|67|U|68|V|Z]]|Q|@]|6|$]]|$K|25|M|26|2|N|O|69|P|@]|Q|@]|6|$]]|$K|27|M|28|2|N|O|6A|P|@]|Q|@]|6|$]]|$K|29|M|2A|2|14|O|6B|P|@]|Q|@]|6|$]]|$K|2B|M|2C|2|1C|O|6C|P|@$T|6D|U|6E|V|Z]]|Q|@]|6|$]]|$K|2D|M|2E|2|N|O|6F|P|@]|Q|@]|6|$]]|$K|2F|M|2G|2|1C|O|6G|P|@$T|6H|U|6I|V|Z]]|Q|@]|6|$]]|$K|2H|M|2I|2|N|O|6J|P|@]|Q|@]|6|$]]|$K|2J|M|2K|2|1C|O|6K|P|@$T|6L|U|6M|V|Z]]|Q|@]|6|$]]|$K|2L|M|2M|2|N|O|6N|P|@]|Q|@]|6|$]]|$K|2N|M|2O|2|N|O|6O|P|@]|Q|@]|6|$]]|$K|2P|M|2Q|2|1C|O|6P|P|@$T|6Q|U|6R|V|Z]]|Q|@]|6|$]]|$K|2R|M|2S|2|N|O|6S|P|@]|Q|@]|6|$]]|$K|2T|M|2U|2|1C|O|6T|P|@$T|6U|U|6V|V|Z]]|Q|@]|6|$]]|$K|2V|M|2W|2|N|O|6W|P|@$T|6X|U|6Y|V|Z]|$T|6Z|U|70|V|W]]|Q|@]|6|$]]|$K|2X|M|2Y|2|17|O|71|P|@]|Q|@]|6|$]]|$K|2Z|M|30|2|N|O|72|P|@$T|73|U|74|V|W]|$T|75|U|76|V|Z]|$T|77|U|78|V|Z]]|Q|@]|6|$]]|$K|31|M|32|2|N|O|79|P|@]|Q|@]|6|$]]|$K|33|M|34|2|N|O|7A|P|@$T|7B|U|7C|V|Z]]|Q|@]|6|$]]|$K|35|M|36|2|37|O|7D|P|@$T|7E|U|7F|V|Z]]|Q|@]|6|$]]|$K|38|M|39|2|3A|O|7G|P|@$T|7H|U|7I|V|Z]]|Q|@]|6|$]]|$K|3B|M|3C|2|3A|O|7J|P|@$T|7K|U|7L|V|Z]]|Q|@]|6|$]]|$K|3D|M|3E|2|N|O|7M|P|@$T|7N|U|7O|V|Z]]|Q|@]|6|$]]|$K|3F|M|3G|2|N|O|7P|P|@]|Q|@]|6|$]]|$K|3H|M|3I|2|3J|O|7Q|P|@]|Q|@$T|7R|U|7S|K|7T]]|6|$]]|$K|3K|M|3L|2|37|O|7U|P|@$T|7V|U|7W|V|Z]]|Q|@]|6|$]]|$K|3M|M|3N|2|3A|O|7X|P|@]|Q|@]|6|$]]|$K|3O|M|3P|2|3A|O|7Y|P|@]|Q|@]|6|$]]|$K|3Q|M|3R|2|14|O|7Z|P|@$T|80|U|81|V|Z]|$T|82|U|83|V|Z]|$T|84|U|85|V|Z]]|Q|@]|6|$]]|$K|3S|M|3I|2|3J|O|86|P|@]|Q|@$T|87|U|88|K|89]]|6|$]]|$K|3T|M|3U|2|17|O|8A|P|@]|Q|@]|6|$]]|$K|3V|M|3W|2|N|O|8B|P|@$T|8C|U|8D|V|Z]|$T|8E|U|8F|V|Z]]|Q|@]|6|$]]|$K|3X|M|3Y|2|N|O|8G|P|@]|Q|@$T|8H|U|8I|K|8J]]|6|$]]|$K|3Z|M|40|2|N|O|8K|P|@]|Q|@]|6|$]]]]","plain":"\n本地仓库和远程仓库在本质上没有太大区别,只不过一个是本地电脑,一个是远程电脑.\n远程仓库不一定非得是 github 那种专门的\"中央服务器\",甚至局域网的另外一台电脑也可以充当\"中央服务器\"的角色,因为它存在的最初目的只是方便大家交换彼此的提交记录而已!\n所以本地仓库和远程仓库的基本行为应该是一致的,约定俗成的规定是远程仓库一般不直接参与日常开发工作,主要作为项目托管中心.\n 某些自动化持续集成环境中也可能会直接操作远程仓库,这时远程仓库就真的和本地仓库没什么区别了!\n \n个人开发常用命令\n个人开发看重的是效率,同时兼顾下版本控制的话算是是锦上添花,git 的本地仓库是本地备份,而远程仓库则是网盘备份.\ngit init : 初始化本地项目\n将本地项目初始化 git 项目,直观表现是在该项目同级目录下多了 .git 隐藏目录,其存储着 git 版本库相关信息.\n 此后当前项目便具备了本地管理的能力,可以与 git 进行交互.\n \ngit clone : 克隆远程项目\n同 git init 一样的作用,也是创建本地仓库,只不过 git init 是直接将本地项目作为本地仓库,而git clone 是将远程项目克隆到本地并作为本地仓库.\n 由此可见,git clone 比 git init 多了一层远程仓库的概念.\n \ngit add : 添加文件\n将工作区的提交记录添加到暂存区,暂存区是工作区和版本库交互的桥梁,暂存区积累到一定量的提交记录时可以批量提交到版本库,这一点暂存区有点像缓存.\ngit commit : 提交文件\n将暂存区的版本提交到版本库,从而形成工作区->暂存区->版本库的基本链路,本地工作区的版本控制流程大致如此.\ngit push : 推送文件\n如果是使用 git clone 命令克隆的本地项目,当工作到一定程度时可能需要将这部分工作成果推送到远程仓库,这时候使用 git push 命令完成本地版本的推送流程.\n如果是使用 git init 命令初始化的本地项目,可能没有远程仓库,自然也就不需要推送.如果后来创建了远程仓库,那么你自然是想要将本地仓库推送到远程仓库的,因此你需要准确告诉 git 你要推送到哪个远程仓库. 使用 git remote add origin git@github.com:username/repos.git 命令添加远程仓库信息,这样就建立了本地仓库和远程仓库的关联,以后就可以正常推送到远程仓库了.\n团队开发常用命令\n团队开发注重的不仅是个人效率还有团队的整体进度,随着企业级开发的日趋复杂化,不再是一个人能够独立完成的,更何况时间也不允许慢慢完成,大多数公司采用的是人力换时间的方式,团队并行开发来缩短整个项目周期,这种复杂需求下正是 git 大展拳脚的好机会.\n项目整体采用并行开发模式,拆解成不同的功能模块,每个人负责各自模块,模块之间相对独立但也不排除存在交集的可能性.对于每一个个体开发者来说,既需要版本控制又需要团队交流.这时候分支的作用就凸显出来了.\n根据项目的业务特点将其拆解成不同的功能模块,这些功能模块分别代表不同的分支,而这些功能模块又组成了完整的项目,这就是主干和分支的关系.\n 初始时项目是一个整体,中间拆解成不同功能模块,最后再合并成一个整---\"分久必分合久必分\".\n \ngit branch <branch> : 创建分支\n每一个独立的功能模块被定义成一个单独分支,创建分支的过程其实是拆解项目的过程,创建本地分支后就在分支上开发特有功能,不再关心其他功能分支.\ngit checkout <branch> : 切换分支\n模块拆解完成并创建了相应的分支后,需要切换到既定分支上才能开展自己的工作.\ngit merge <branch> : 合并分支\n没有绝对的独立,项目再怎么拆分也是整体的一部分,肯定需要和其他功能模块发生关系,某些情况下需要其他分支的工作成果合并到自己的本地仓库中,这样才能完成一次小规模的组装.\n可以预期的是,当这种组装足够多的时候,最终便会演变成项目的终极形态,形成一个整体.\ngit fetch : 抓取远程分支\n合并目标分支首先需要能够获取到目标分支的提交记录,既然每个功能模块都是不同的项目成员负责开发的,也就不在我们电脑上,所以我们先要将目标分支下载到我们本地电脑,然后才能合并该分支到本地分支.\ngit pull : 拉取远程分支\n\"先下载目标分支再合并到本地分支,从而小规模组成更复杂更强大的功能\",每一次的组装过程都需要两步操作者显然不符合懒人思维啊,git pull 就是这两步操作的简化命令,先下载再合并就是这么简单!\n本地和远程仓库的碰撞\n不论是个人开发还是团队开发,我们几乎习惯惯站在主动方的角度来思考问题,有没有想过当远程仓库接收到我们的git push 或 git pull 请求时,远程仓库发什么了什么改变,这种改变对本地仓库又有什么影响?\n远程仓库(远程电脑上的本地仓库)只是众多分布式电脑上本地仓库中的一员,说它特殊也很特殊,充当着\"中央服务器\"作用,其余人统一从这里下载或推送;说它普通也很普通,和本地电脑上的本地仓库没有什么不同,因为它随时可被任意电脑上的本地仓库所取代!\n揭开远程仓库的神秘面纱后,现在我们只需要将其视为普通的本地仓库一样对待即可,然而我们本地电脑上已经有了本地仓库,故而需要将远程仓库做一下简单标识区分(origin)称之为远程分支.\n 先说说 git push 命令做了什么?\n \n对于本地来说,git 将本地仓库的指定分支推送到远程仓库的相应分支,同时更新了本地仓库的远程分支.\n对于远程来说,git 接收到本地仓库的推送请求时应该在相应分支上合并本地分支,同时更新远程仓库的相应分支.\n只要本地的指定分支成功推送到远程的相应分支时,对于本地来说,不论是指定分支还是远程分支(origin/master)都应该是最新状态,因为已经与服务器同步了.\n而远程接收到此次推送请求时,应该尝试合并此次推送请求,再更新自己的相应分支,远程合并完成后再通知本地此次推送结果,如此一来,三端同步,皆大欢喜!\n?\n 再讲讲 git pull 命令发生了什么?\n \n对于远程来说,接收到本地的拉取请求时,因为没有新版本需要处理,所以无需任何操作.\n对于本地来说,当远程仓库的相应分支下载到本地时应该更新远程分支状态,再尝试合并到本地的相应分支.\n git pull 命令或者说是 git fetch 命令是本地和远程通信的方式,所以 origin/master 会自动更新!\n \n?\n小结\n本地仓库和远程仓库本质上没有太大区别, git fetch 是本地仓库和远程仓库之间的通信途径,本地仓库中的远程分支(origin/master)保存着它们之间最后一次的通信状态.\n我的博客即将同步至腾讯云+社区，邀请大家一同入驻：https://cloud.tencent.com/developer/support-plan?invite_code=4na4tee1wqwc\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n本地仓库和远程仓库在本质上没有太大区别,只不过一个是本地电脑,一个是远程电脑.\n远程仓库不一定非得是 github 那种专门的\"中央服务器\",甚至局域网的另外...","summary":"远程仓库不一定非得是 github 那种专门的\"中央服务器\",甚至局域网的另外一台电脑也可以充当\"中央服务器\"的角色,因为它存在的最初目的只是方便大家交换彼此的...","abstract":"远程仓库不一定非得是 github 那种专门的\"中央服务器\",甚至局域网的另外一台电脑也可以充当\"中央服务器\"的角色,因为它存在的最初目的只是方便大家交换彼此的...","description":"","picture":"https://ask.qcloudimg.com/http-save/yehe-2952369/axvakj6j48.gif","coverImageUrl":"https://ask.qcloudimg.com/http-save/yehe-2952369/axvakj6j48.gif","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/25 23:29"},"authorId":2952369,"columnId":75668,"writeTime":1554275783,"updateTime":1554275783,"viewCount":71,"likeCount":2,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10667,"tagName":"开源"},{"tagId":10283,"tagName":"Git"},{"tagId":10284,"tagName":"GitHub"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2687,"type":40,"actionInfo":{"articleId":1409893,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554275734,"detail":{"id":1409893,"articleId":1409893,"title":"git 入门教程之协同开发\n                                                                            原\n        ","content":"entityMap|0|type|IMAGE|mutability|IMMUTABLE|data|imageUrl|https://ask.qcloudimg.com/http-save/yehe-2952369/fnxf87xtoe.png|imageAlt|git-clone.png|1|https://ask.qcloudimg.com/http-save/yehe-2952369/lbpiubzozj.png|git-branch-remote-github.png|2|https://ask.qcloudimg.com/http-save/yehe-2952369/ud6c8jtt9r.png|git-branch-remote-commit.png|3|https://ask.qcloudimg.com/http-save/yehe-2952369/jm8ngmxdwq.png|git-branch-remote-master.png|4|https://ask.qcloudimg.com/http-save/yehe-2952369/ndzeh5of6v.png|git-branch-remote-new-commit.png|5|https://ask.qcloudimg.com/http-save/yehe-2952369/4h8y57px1i.png|git-branch-remote-fetch.png|6|https://ask.qcloudimg.com/http-save/yehe-2952369/6q5uzhtrao.png|git-branch-remote-fetch-master.png|7|https://ask.qcloudimg.com/http-save/yehe-2952369/6ocl3hrlls.gif|git-branch-remote-pull.gif|8|https://ask.qcloudimg.com/http-save/yehe-2952369/x9sabujczz.png|git-branch-remote-teamworks.png|9|https://ask.qcloudimg.com/http-save/yehe-2952369/yz7p9zfz0g.png|git-branch-remote-teamwork-local-commit.png|10|https://ask.qcloudimg.com/http-save/yehe-2952369/v4igspl0gi.png|git-branch-remote-teamwork-pull.png|11|https://ask.qcloudimg.com/http-save/yehe-2952369/vzdr1qhgko.png|git-branch-remote-teamwork-myself.png|12|https://ask.qcloudimg.com/http-save/yehe-2952369/svi7k4y0ut.png|git-branch-remote-teamwork-push.png|13|https://ask.qcloudimg.com/http-save/yehe-2952369/zf9g1hga6f.gif|git-branch-remote-teamwork.gif|blocks|key|auina|text|unstyled|depth|inlineStyleRanges|entityRanges|4d6a2|前面我们已经介绍过远程仓库的相关概念,不过那时并没有深入探讨,只是讲解了如何创建远程仓库以及推送最新工作成果到远程仓库,实际上远程仓库对于团队协同开发很重要,不仅仅是团队协同开发的基础,也是代码备份的保障手段,现在我们先简单回忆下相关概念,以便为接下来的协同开发做好铺垫!|6utq2|远程仓库和远程分支|header-two|9olsn|远程仓库|header-three|dokcs|远程仓库其实并不复杂,实际上只是本地电脑上的本地仓库在另一台远程电脑的备份而已.|offset|length|style|BOLD|9mv3b|相对本地仓库来说远程电脑上的版本库自然就是远程仓库,远程仓库使得我们的版本库更加安全,毕竟远程电脑可不是一般的电脑,出错的概率比我们平时工作所使用的电脑概率要小得多,这样一来即使不小心丢失了本地仓库的全部数据,只要远程仓库没有丢失,那我们就可以通过远程仓库重新取回最新数据!|drcvv|还有一点,远程仓库让代码社交化,因为大家有了一致途径来访问远程仓库,团队也好或者陌生人也罢,只有你愿意,他们就可以获取远程仓库的最新代码并参与开发,这也是+github+的一大亮点!|CODE|dtpin|远程分支|7m4ee|回顾好远程仓库的概念后,我们再来讲一下本地仓库的远程分支是什么意思?|a537s|当前你正在工作的电脑上存储的是本地仓库,如果没有远程仓库的支持,只能一个人鼓捣,别人无法共享你的工作成果,现在加入了团队开发流程,自然不再一个人独自开发,需要和团队其他人协同开发,共享开发成果.|3lmin|所以本地仓库必然保存着远程仓库的基本信息,只有区分好自己的工作成果和公共成果,才能不乱套,又能做到信息及时共享.|dver8|实际上,在项目初期刚刚拷贝远程仓库(git+clone)时,git+已经默认在本地仓库创建一个远程分支(origin/master),本地修改提交首先都是在本地仓库完成的,比如+git+add,git+commit+等命令,如果需要发布你的工作成果,那么就需要使用+git+push+origin+<branch>+命令推送到远程仓库,这里的+origin+指的就是远程仓库名称(因为最初大家都是先从远程仓库克隆下来的,所以远程仓库存储的项目相当于原始项目,故而叫origin).|1eu8l|git+clone+命令帮助本地仓库的+master+分支和远程仓库的+master+分支建立了关联,一般称远程仓库名称为+origin.|ei4qn|?|atomic|47q3v|查看远程仓库信息+:+git+remote+或+git+remote+-v|header-four|djbe7|#+查看远程仓库名称\n$+git+remote\norigin\n\n#+查看远程仓库详情+:+拉取和推送链接\n$+git+remote+-v\norigin++git@github.com:snowdreams1006/git-demo.git+(fetch)\norigin++git@github.com:snowdreams1006/git-demo.git+(push)\n$+|code-block|syntax|javascript|4s1ol|本地分支推送到远程仓库+:+git+push+origin+<branch>|2ukgn|本地仓库和远程仓库的分支理论上应该一一对应,本地仓库的主干分支叫做+master+,而远程仓库也有相应的分支叫做+master+,这种映射关系是使用+git+clone+命令时默认生成的,也是推荐的做法.|7des0|一般来说,本地仓库的分支推送到远程仓库指的就是推送到远程仓库同名的分支上,例如+git+push+origin+master+意思是:+推将本地仓库的+master+分支推送到远程仓库的+master分支,当然你也可以推送其他分支到相应的远程分支上.|7bl6q|按照之前约定的分支管理策略来说,master+分支用于生产环境部署,dev+分支用于收集开发成果,feature+分支用于开发具体功能分支,既然如此,那这些本地分支哪些需要同步推送到远程仓库就比较清晰了!|3nm34|推送本地+master+分支到远程仓库的+master+分支+:+git+push+origin+master|unordered-list-item|8r4c3|推送本地+dev+分支到元层仓库的+dev+分支+:+git+push+origin+dev|9lne4|#+查看当前分支+:+`master`+主分支\n$+git+branch\n++dev\n*+master\n++snow\n\n#+推送本地+`master`+分支到远程仓库+`origin`+上相应的+`master`+分支+\n$+git+push+origin+master\nCounting+objects:+15,+done.\nDelta+compression+using+up+to+4+threads.\nCompressing+objects:+100%25+(15/15),+done.\nWriting+objects:+100%25+(15/15),+1.31+KiB+%7C+1.31+MiB/s,+done.\nTotal+15+(delta+9),+reused+0+(delta+0)\nremote:+Resolving+deltas:+100%25+(9/9),+completed+with+3+local+objects.\nTo+github.com:snowdreams1006/git-demo.git\n+++e60c8ad..dcce09c++master+->+master\n$+|b9sh7|79t28|正常来说,本地仓库的+master+分支应该领先远程仓库+origin+上的+master+分支若干个版本.|2m8pm|ao6f0|一旦我们已经将本地分支上的工作成果推送到远程仓库上相应分支时,本地仓库和远程仓库这时候就保持一致了.|24cea|$+git+status\nOn+branch+master\nYour+branch+is+up+to+date+with+'origin/master'.\n\nnothing+to+commit,+working+tree+clean\n$+|4jtgd|84fau|远程仓库下载到本地分支+:+git+fetch|elest|远程仓库的操作可以简单归纳为两部分:+上传和下载.|4ufnu|本地仓库推送到远程仓库是上传,而远程仓库拉取到本地仓库就是下载.|8lmou|团队多人协作开发时,大家都会定期或不定期往+master+或+dev+等分支上推送各自的更改,相应的我们就需要下载别人的最新工作成果.|7tcjn|现在模拟其他伙伴正在往+master+分支上推送更改,最好在另一个电脑另一个账户,当然模拟的话也可以是同一个电脑下其他目录,或者最简单的方式,直接登录+github+更改+master+分支上某个文件内容,简单起见,我们采用最后一种方式.|th27|其他伙伴已往远程仓库上的+master+分支提交了新的版本:+创建+git-remote.txt+文件|d9ji6|f9a07|现在我们想要下载其他人的最新工作成果,接下来让我们看看本地仓库的+master+还能和远程仓库的+master+分支保持一致吗?|dkpn|7hraj|#+下载远程仓库的+`master`+分支\n$+git+fetch+origin+master\nremote:+Enumerating+objects:+4,+done.\nremote:+Counting+objects:+100%25+(4/4),+done.\nremote:+Compressing+objects:+100%25+(2/2),+done.\nremote:+Total+3+(delta+0),+reused+0+(delta+0),+pack-reused+0\nUnpacking+objects:+100%25+(3/3),+done.\nFrom+github.com:snowdreams1006/git-demo\n+*+branch++++++++++++master+++++->+FETCH_HEAD\n+++dcce09c..10942ff++master+++++->+origin/master\n$+|b1dt1|7upk1|执行+git+fetch+命令后,远程仓库上的最新提交记录已经下载到本地仓库,同时更新了本地仓库的远程分支origin/master+,值得注意的是本地仓库的+master+分支并没有更新!|6d4os|那你可能会有疑问了,我想要的结果是下载其他人的最新工作成果,怎么我本地仓库的+master+分支并没有更新呢?|beldr|#+查看工作区\n$+ls\nLICENSE+++++README.md+++test.txt\n\n#+查看版本库状态\n$+git+status\nOn+branch+master\nYour+branch+is+behind+'origin/master'+by+1+commit,+and+can+be+fast-forwarded.\n++(use+\"git+pull\"+to+update+your+local+branch)\n\nnothing+to+commit,+working+tree+clean\n$+|6ukch|既然+git+fetch+并没有更新本地仓库的+master+分支,那它到底做了哪些工作呢?|attie|git+fetch+会做的事情|a7rnq|实际上,+git+fetch+完成了仅有的但是很重要的两步操作:|e2503|从远程仓库下载本地仓库中缺失的提交记录|1m29q|更新本地仓库的远程分支(比如origin/master)|cpsr8|通过上述两步操作完成的效果是:+将本地仓库中的远程分支更新成了远程仓库相应分支最新的状态.|agk0u|远程分支实际上是反映了远程仓库在你最后一次与它通信时的状态,而git+fetch+就是你与远程仓库通信的方式了！|2h0pm|git+fetch+不会做的事情|b80qq|git+fetch+并不会改变你本地仓库的状态,所以也就不会更新你的+master分支,自然也不会修改你磁盘上的文件.|e8rne|理解这一点很重要,因为许多开发人员误以为执行了+git+fetch+以后，他们本地仓库就与远程仓库同步了.|38sq|实际上它可能已经将进行这一操作所需的所有数据都下载了下来,但是并没有修改你本地的文件.|aoq4i|+既然本地仓库的远程分支已更新,那么想要更新本地仓库的+master+分支该如何做呢?很简单,可以+git+merge+啊!\n+|blockquote|3sqt1|远程仓库更新到本地分支+:+git+pull|6fb6b|其实通过+git+fetch+命令我们已经下载了远程仓库的最新版本,只不过还没有合并到本地仓库而已,如何合并分支相信大家已经轻车熟路了,有很多方法:|759ss|git+merge+origin/master|4jrac|git+rebase+origin/master|a0cjp|git+cherry-pick+origin/master|3a35p|实际上,先抓取更新(git+fetch)再合并(git+merge)这个流程很常用,因此+git+是有专门的命令来完成这两步操作的,这就是拉取更新**git+pull**+---+刚好与推送更新+git+push+相反!|ebs2m|#+拉取最新版本\n$+git+pull\nUpdating+dcce09c..10942ff\nFast-forward\n+git-remote.txt+%7C+1+%2B\n+1+file+changed,+1+insertion(%2B)\n+create+mode+100644+git-remote.txt\n\n#+查看版本库状态\n$+git+status\nOn+branch+master\nYour+branch+is+up+to+date+with+'origin/master'.\n\nnothing+to+commit,+working+tree+clean\n\n#+查看工作区内容:+文件已更新\n$+ls\nLICENSE+++++README.md+++git-remote.txt++test.txt\n$+|8cuht|cn8j9|团队协作|6a6de|掌握了远程仓库和远程分支的相关概念后,现在开始真正模拟团队协作开发了,为了简单起见,仍然以直接操作+github+上的+master+分支为例说明如何协同开发.|foa9g|(1).+其他人已往远程仓库推送2个版本|ejn2|1rte2|(2).+你正在本地仓库提交1个版本|16rfm|$+echo+\"learn+teamwork\"+>>+test.txt\n$+git+commit+-am+\"learn+teamwork\"\n[master+f971647]+learn+teamwork\n+1+file+changed,+1+insertion(%2B)\n$+|dfaig|4cpk|(3).+你推送到远程仓库前先拉取最新版本|30ic5|#+拉取最新版本,并尝试合并\n$+git+pull\nremote:+Enumerating+objects:+8,+done.\nremote:+Counting+objects:+100%25+(8/8),+done.\nremote:+Compressing+objects:+100%25+(5/5),+done.\nremote:+Total+6+(delta+0),+reused+0+(delta+0),+pack-reused+0\nUnpacking+objects:+100%25+(6/6),+done.\nFrom+github.com:snowdreams1006/git-demo\n+++10942ff..612e08a++master+++++->+origin/master\nMerge+made+by+the+'recursive'+strategy.\n+git-remote.txt+%7C+2+%2B%2B\n+1+file+changed,+2+insertions(%2B)\n\n#+查看版本库状态\n$+git+status\nOn+branch+master\nYour+branch+is+ahead+of+'origin/master'+by+2+commits.\n++(use+\"git+push\"+to+publish+your+local+commits)\n\nnothing+to+commit,+working+tree+clean\n\n#+查看其他人工作成果\n$+cat+git-remote.txt\ngit+remote\ngit+clone\ngit+commit+-am+\"fake+second+teamwork\"\n\n#+查看自己即将推送的工作成果\n$+cat+test.txt\nadd+test.txt\nsee+https://snowdreams1006.github.io/git/usage/remote-repository.html\nlearn+git+branch\nsee+https://snowdreams1006.github.io/git/usage/branch-overview.html\ngit+commit+c1\ngit+commit+c2+and+c3\ngit+checkout+-b+dev\nfast+forward+not+recommend\nHappy+coding\nlearn+git+stash\nlearn+git+rebase\nlearn+teamwork\n$+|8cj6r|1gt9|(4).+你将本地仓库更改内容推送到远程仓库|dhioh|#+推送到远程仓库\n$+git+push+origin+master\nCounting+objects:+5,+done.\nDelta+compression+using+up+to+4+threads.\nCompressing+objects:+100%25+(5/5),+done.\nWriting+objects:+100%25+(5/5),+564+bytes+%7C+564.00+KiB/s,+done.\nTotal+5+(delta+3),+reused+0+(delta+0)\nremote:+Resolving+deltas:+100%25+(3/3),+completed+with+3+local+objects.\nTo+github.com:snowdreams1006/git-demo.git\n+++612e08a..8fe5aba++master+->+master\n$+|b66ss|现在前往+github+网站确认我们已经推送成功,我们的工作成果和其他人的工作成果同时存在于远程仓库中,这样就完成了一次团队协同开发的案例.|6fjgf|co606|5leae|现在简单回顾一下整个协同开发流程:|er4e0|其他人先于我们提交2个版本|ordered-list-item|71oir|我们本地提交1个版本|4c1f1|本地版本推送前拉取远程仓库|a8vrh|本地仓库推送到远程仓库|32l3m|1ddpt|小结|49nlb|查看远程仓库信息:+git+remote+-v|9mjkn|本地仓库推送到远程仓库:+git+push+origin+<branch>|8jpgc|远程仓库抓取到本地仓库:+git+fetch|1d0hm|远程仓库拉取到本地仓库:+git+pull+相当于+git+fetch+和+git+merge|e9k4c|本地创建和远程仓库一致的分支:+git+checkout+-b+<branch>+origin/<branch>,本地和远程分支名称最好一直,比如本地+master+和+远程+origin/master,本地+dev+和远程+origin/dev|fbutk|本地分支和远程分支建立关联:+git+branch+--set-upstream+<branch>+origin/<branch>+,足够任性的话,本地+dev+可以关联远程+remote-dev+等,不过建议名称最好一致.|60cos|团队协同开发时,不仅平时要定期拉取(git+pull),推送到远程仓库前更应先拉取(git+pull)再推送(git+push),如出现冲突,解决冲突后再推送.|ar03c|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|0|0|0|4|G|4|U|4|0|8|9|L|4|0|A|5|M|4|26|6|0|0|O|4|0|F|4|O|4|0|Q|7|Y|4|0|I|9|U|3|1G|D|2H|7|2P|A|3P|O|4S|6|6G|6|0|0|9|K|6|10|6|1Q|6|0|0|1|0|0|0|8|B|A|O|D|0|0|0|B|E|O|0|Y|6|1L|6|23|9|0|14|M|24|6|2M|6|0|G|6|Y|3|1D|7|R|4|16|6|1P|6|2E|4|0|5|6|L|6|X|M|0|5|3|I|3|R|J|0|0|0|1|1|0|B|6|T|6|13|6|0|0|1|2|0|0|0|0|1|3|0|0|B|E|9|0|0|0|M|6|V|3|0|C|6|24|6|2E|6|0|D|6|Y|E|0|0|1|4|0|X|6|1D|6|0|0|1|5|0|0|0|1|6|0|3|9|1H|D|28|6|0|13|6|0|0|3|9|O|6|0|0|F|0|F|0|5|9|0|0|E|D|0|G|S|0|0|4|B|4|V|9|0|0|G|0|G|0|0|9|Z|6|0|O|9|0|0|S|6|1E|9|0|0|B|E|8|0|5|9|0|0|N|0|0|O|0|0|T|0|A|9|O|9|19|3|23|8|2Q|8|0|0|0|1|7|0|0|1E|6|1O|6|0|0|0|1|8|0|0|0|0|1|9|0|0|0|0|1|A|0|0|0|5|6|0|0|1|B|0|0|1|C|0|0|0|0|0|0|0|1|D|0|0|A|D|0|D|O|0|D|9|0|D|8|Q|9|12|9|0|G|14|24|6|2G|D|2X|3|35|A|0|F|1E|25|3|2G|A|0|I|8|16|8|1J|8|0^^$0|$1|$2|3|4|5|6|$7|8|9|A]]|B|$2|3|4|5|6|$7|C|9|D]]|E|$2|3|4|5|6|$7|F|9|G]]|H|$2|3|4|5|6|$7|I|9|J]]|K|$2|3|4|5|6|$7|L|9|M]]|N|$2|3|4|5|6|$7|O|9|P]]|Q|$2|3|4|5|6|$7|R|9|S]]|T|$2|3|4|5|6|$7|U|9|V]]|W|$2|3|4|5|6|$7|X|9|Y]]|Z|$2|3|4|5|6|$7|10|9|11]]|12|$2|3|4|5|6|$7|13|9|14]]|15|$2|3|4|5|6|$7|16|9|17]]|18|$2|3|4|5|6|$7|19|9|1A]]|1B|$2|3|4|5|6|$7|1C|9|1D]]]|1E|@$1F|1G|1H|-4|2|1I|1J|6S|1K|@]|1L|@]|6|$]]|$1F|1M|1H|1N|2|1I|1J|6T|1K|@]|1L|@]|6|$]]|$1F|1O|1H|1P|2|1Q|1J|6U|1K|@]|1L|@]|6|$]]|$1F|1R|1H|1S|2|1T|1J|6V|1K|@]|1L|@]|6|$]]|$1F|1U|1H|1V|2|1I|1J|6W|1K|@$1W|6X|1X|6Y|1Y|1Z]|$1W|6Z|1X|70|1Y|1Z]|$1W|71|1X|72|1Y|1Z]]|1L|@]|6|$]]|$1F|20|1H|21|2|1I|1J|73|1K|@$1W|74|1X|75|1Y|1Z]|$1W|76|1X|77|1Y|1Z]]|1L|@]|6|$]]|$1F|22|1H|23|2|1I|1J|78|1K|@$1W|79|1X|7A|1Y|1Z]|$1W|7B|1X|7C|1Y|1Z]|$1W|7D|1X|7E|1Y|24]]|1L|@]|6|$]]|$1F|25|1H|26|2|1T|1J|7F|1K|@]|1L|@]|6|$]]|$1F|27|1H|28|2|1I|1J|7G|1K|@$1W|7H|1X|7I|1Y|1Z]]|1L|@]|6|$]]|$1F|29|1H|2A|2|1I|1J|7J|1K|@$1W|7K|1X|7L|1Y|1Z]|$1W|7M|1X|7N|1Y|1Z]]|1L|@]|6|$]]|$1F|2B|1H|2C|2|1I|1J|7O|1K|@$1W|7P|1X|7Q|1Y|1Z]|$1W|7R|1X|7S|1Y|1Z]]|1L|@]|6|$]]|$1F|2D|1H|2E|2|1I|1J|7T|1K|@$1W|7U|1X|7V|1Y|24]|$1W|7W|1X|7X|1Y|24]|$1W|7Y|1X|7Z|1Y|24]|$1W|80|1X|81|1Y|24]|$1W|82|1X|83|1Y|24]|$1W|84|1X|85|1Y|24]|$1W|86|1X|87|1Y|24]|$1W|88|1X|89|1Y|24]]|1L|@]|6|$]]|$1F|2F|1H|2G|2|1I|1J|8A|1K|@$1W|8B|1X|8C|1Y|24]|$1W|8D|1X|8E|1Y|24]|$1W|8F|1X|8G|1Y|24]|$1W|8H|1X|8I|1Y|24]]|1L|@]|6|$]]|$1F|2H|1H|2I|2|2J|1J|8J|1K|@]|1L|@$1W|8K|1X|8L|1F|8M]]|6|$]]|$1F|2K|1H|2L|2|2M|1J|8N|1K|@$1W|8O|1X|8P|1Y|1Z]|$1W|8Q|1X|8R|1Y|24]|$1W|8S|1X|8T|1Y|24]]|1L|@]|6|$]]|$1F|2N|1H|2O|2|2P|1J|8U|1K|@]|1L|@]|6|$2Q|2R]]|$1F|2S|1H|2T|2|2M|1J|8V|1K|@$1W|8W|1X|8X|1Y|1Z]|$1W|8Y|1X|8Z|1Y|24]]|1L|@]|6|$]]|$1F|2U|1H|2V|2|1I|1J|90|1K|@$1W|91|1X|92|1Y|24]|$1W|93|1X|94|1Y|24]|$1W|95|1X|96|1Y|24]]|1L|@]|6|$]]|$1F|2W|1H|2X|2|1I|1J|97|1K|@$1W|98|1X|99|1Y|24]|$1W|9A|1X|9B|1Y|24]|$1W|9C|1X|9D|1Y|24]]|1L|@]|6|$]]|$1F|2Y|1H|2Z|2|1I|1J|9E|1K|@$1W|9F|1X|9G|1Y|24]|$1W|9H|1X|9I|1Y|24]|$1W|9J|1X|9K|1Y|24]|$1W|9L|1X|9M|1Y|1Z]|$1W|9N|1X|9O|1Y|1Z]|$1W|9P|1X|9Q|1Y|1Z]|$1W|9R|1X|9S|1Y|1Z]]|1L|@]|6|$]]|$1F|30|1H|31|2|32|1J|9T|1K|@$1W|9U|1X|9V|1Y|24]|$1W|9W|1X|9X|1Y|24]|$1W|9Y|1X|9Z|1Y|24]]|1L|@]|6|$]]|$1F|33|1H|34|2|32|1J|A0|1K|@$1W|A1|1X|A2|1Y|24]|$1W|A3|1X|A4|1Y|24]|$1W|A5|1X|A6|1Y|24]]|1L|@]|6|$]]|$1F|35|1H|36|2|2P|1J|A7|1K|@]|1L|@]|6|$2Q|2R]]|$1F|37|1H|2I|2|2J|1J|A8|1K|@]|1L|@$1W|A9|1X|AA|1F|AB]]|6|$]]|$1F|38|1H|39|2|1I|1J|AC|1K|@$1W|AD|1X|AE|1Y|24]|$1W|AF|1X|AG|1Y|24]|$1W|AH|1X|AI|1Y|24]]|1L|@]|6|$]]|$1F|3A|1H|2I|2|2J|1J|AJ|1K|@]|1L|@$1W|AK|1X|AL|1F|AM]]|6|$]]|$1F|3B|1H|3C|2|1I|1J|AN|1K|@]|1L|@]|6|$]]|$1F|3D|1H|3E|2|2P|1J|AO|1K|@]|1L|@]|6|$2Q|2R]]|$1F|3F|1H|2I|2|2J|1J|AP|1K|@]|1L|@$1W|AQ|1X|AR|1F|AS]]|6|$]]|$1F|3G|1H|3H|2|2M|1J|AT|1K|@$1W|AU|1X|AV|1Y|1Z]|$1W|AW|1X|AX|1Y|24]]|1L|@]|6|$]]|$1F|3I|1H|3J|2|1I|1J|AY|1K|@]|1L|@]|6|$]]|$1F|3K|1H|3L|2|1I|1J|AZ|1K|@]|1L|@]|6|$]]|$1F|3M|1H|3N|2|1I|1J|B0|1K|@$1W|B1|1X|B2|1Y|24]|$1W|B3|1X|B4|1Y|24]]|1L|@]|6|$]]|$1F|3O|1H|3P|2|1I|1J|B5|1K|@$1W|B6|1X|B7|1Y|24]|$1W|B8|1X|B9|1Y|24]|$1W|BA|1X|BB|1Y|24]]|1L|@]|6|$]]|$1F|3Q|1H|3R|2|1I|1J|BC|1K|@$1W|BD|1X|BE|1Y|24]|$1W|BF|1X|BG|1Y|24]]|1L|@]|6|$]]|$1F|3S|1H|2I|2|2J|1J|BH|1K|@]|1L|@$1W|BI|1X|BJ|1F|BK]]|6|$]]|$1F|3T|1H|3U|2|1I|1J|BL|1K|@$1W|BM|1X|BN|1Y|24]|$1W|BO|1X|BP|1Y|24]]|1L|@]|6|$]]|$1F|3V|1H|2I|2|2J|1J|BQ|1K|@]|1L|@$1W|BR|1X|BS|1F|BT]]|6|$]]|$1F|3W|1H|3X|2|2P|1J|BU|1K|@]|1L|@]|6|$2Q|2R]]|$1F|3Y|1H|2I|2|2J|1J|BV|1K|@]|1L|@$1W|BW|1X|BX|1F|BY]]|6|$]]|$1F|3Z|1H|40|2|1I|1J|BZ|1K|@$1W|C0|1X|C1|1Y|24]|$1W|C2|1X|C3|1Y|24]|$1W|C4|1X|C5|1Y|24]]|1L|@]|6|$]]|$1F|41|1H|42|2|1I|1J|C6|1K|@$1W|C7|1X|C8|1Y|24]]|1L|@]|6|$]]|$1F|43|1H|44|2|2P|1J|C9|1K|@]|1L|@]|6|$2Q|2R]]|$1F|45|1H|46|2|1I|1J|CA|1K|@$1W|CB|1X|CC|1Y|24]|$1W|CD|1X|CE|1Y|24]]|1L|@]|6|$]]|$1F|47|1H|48|2|1I|1J|CF|1K|@$1W|CG|1X|CH|1Y|1Z]|$1W|CI|1X|CJ|1Y|24]]|1L|@]|6|$]]|$1F|49|1H|4A|2|1I|1J|CK|1K|@$1W|CL|1X|CM|1Y|24]]|1L|@]|6|$]]|$1F|4B|1H|4C|2|32|1J|CN|1K|@]|1L|@]|6|$]]|$1F|4D|1H|4E|2|32|1J|CO|1K|@$1W|CP|1X|CQ|1Y|24]]|1L|@]|6|$]]|$1F|4F|1H|4G|2|1I|1J|CR|1K|@$1W|CS|1X|CT|1Y|1Z]]|1L|@]|6|$]]|$1F|4H|1H|4I|2|1I|1J|CU|1K|@$1W|CV|1X|CW|1Y|1Z]|$1W|CX|1X|CY|1Y|1Z]|$1W|CZ|1X|D0|1Y|24]]|1L|@]|6|$]]|$1F|4J|1H|4K|2|1I|1J|D1|1K|@$1W|D2|1X|D3|1Y|1Z]|$1W|D4|1X|D5|1Y|24]]|1L|@]|6|$]]|$1F|4L|1H|4M|2|1I|1J|D6|1K|@$1W|D7|1X|D8|1Y|24]|$1W|D9|1X|DA|1Y|24]]|1L|@]|6|$]]|$1F|4N|1H|4O|2|1I|1J|DB|1K|@$1W|DC|1X|DD|1Y|24]]|1L|@]|6|$]]|$1F|4P|1H|4Q|2|1I|1J|DE|1K|@]|1L|@]|6|$]]|$1F|4R|1H|4S|2|4T|1J|DF|1K|@$1W|DG|1X|DH|1Y|24]|$1W|DI|1X|DJ|1Y|24]]|1L|@]|6|$]]|$1F|4U|1H|4V|2|2M|1J|DK|1K|@$1W|DL|1X|DM|1Y|1Z]|$1W|DN|1X|DO|1Y|24]]|1L|@]|6|$]]|$1F|4W|1H|4X|2|1I|1J|DP|1K|@$1W|DQ|1X|DR|1Y|24]]|1L|@]|6|$]]|$1F|4Y|1H|4Z|2|32|1J|DS|1K|@$1W|DT|1X|DU|1Y|24]]|1L|@]|6|$]]|$1F|50|1H|51|2|32|1J|DV|1K|@$1W|DW|1X|DX|1Y|24]]|1L|@]|6|$]]|$1F|52|1H|53|2|32|1J|DY|1K|@$1W|DZ|1X|E0|1Y|24]]|1L|@]|6|$]]|$1F|54|1H|55|2|1I|1J|E1|1K|@$1W|E2|1X|E3|1Y|24]|$1W|E4|1X|E5|1Y|24]|$1W|E6|1X|E7|1Y|24]|$1W|E8|1X|E9|1Y|24]|$1W|EA|1X|EB|1Y|24]]|1L|@]|6|$]]|$1F|56|1H|57|2|2P|1J|EC|1K|@]|1L|@]|6|$2Q|2R]]|$1F|58|1H|2I|2|2J|1J|ED|1K|@]|1L|@$1W|EE|1X|EF|1F|EG]]|6|$]]|$1F|59|1H|5A|2|1Q|1J|EH|1K|@]|1L|@]|6|$]]|$1F|5B|1H|5C|2|1I|1J|EI|1K|@$1W|EJ|1X|EK|1Y|24]|$1W|EL|1X|EM|1Y|24]]|1L|@]|6|$]]|$1F|5D|1H|5E|2|1I|1J|EN|1K|@]|1L|@]|6|$]]|$1F|5F|1H|2I|2|2J|1J|EO|1K|@]|1L|@$1W|EP|1X|EQ|1F|ER]]|6|$]]|$1F|5G|1H|5H|2|1I|1J|ES|1K|@]|1L|@]|6|$]]|$1F|5I|1H|5J|2|2P|1J|ET|1K|@]|1L|@]|6|$2Q|2R]]|$1F|5K|1H|2I|2|2J|1J|EU|1K|@]|1L|@$1W|EV|1X|EW|1F|EX]]|6|$]]|$1F|5L|1H|5M|2|1I|1J|EY|1K|@]|1L|@]|6|$]]|$1F|5N|1H|5O|2|2P|1J|EZ|1K|@]|1L|@]|6|$2Q|2R]]|$1F|5P|1H|2I|2|2J|1J|F0|1K|@]|1L|@$1W|F1|1X|F2|1F|F3]]|6|$]]|$1F|5Q|1H|5R|2|1I|1J|F4|1K|@]|1L|@]|6|$]]|$1F|5S|1H|5T|2|2P|1J|F5|1K|@]|1L|@]|6|$2Q|2R]]|$1F|5U|1H|5V|2|1I|1J|F6|1K|@$1W|F7|1X|F8|1Y|24]]|1L|@]|6|$]]|$1F|5W|1H|2I|2|2J|1J|F9|1K|@]|1L|@$1W|FA|1X|FB|1F|FC]]|6|$]]|$1F|5X|1H|2I|2|2J|1J|FD|1K|@]|1L|@$1W|FE|1X|FF|1F|FG]]|6|$]]|$1F|5Y|1H|5Z|2|1I|1J|FH|1K|@]|1L|@]|6|$]]|$1F|60|1H|61|2|62|1J|FI|1K|@]|1L|@]|6|$]]|$1F|63|1H|64|2|62|1J|FJ|1K|@]|1L|@]|6|$]]|$1F|65|1H|66|2|62|1J|FK|1K|@]|1L|@]|6|$]]|$1F|67|1H|68|2|62|1J|FL|1K|@]|1L|@]|6|$]]|$1F|69|1H|2I|2|2J|1J|FM|1K|@]|1L|@$1W|FN|1X|FO|1F|FP]]|6|$]]|$1F|6A|1H|6B|2|1Q|1J|FQ|1K|@]|1L|@]|6|$]]|$1F|6C|1H|6D|2|32|1J|FR|1K|@$1W|FS|1X|FT|1Y|24]]|1L|@]|6|$]]|$1F|6E|1H|6F|2|32|1J|FU|1K|@$1W|FV|1X|FW|1Y|24]]|1L|@]|6|$]]|$1F|6G|1H|6H|2|32|1J|FX|1K|@$1W|FY|1X|FZ|1Y|24]]|1L|@]|6|$]]|$1F|6I|1H|6J|2|32|1J|G0|1K|@$1W|G1|1X|G2|1Y|24]|$1W|G3|1X|G4|1Y|24]|$1W|G5|1X|G6|1Y|24]]|1L|@]|6|$]]|$1F|6K|1H|6L|2|32|1J|G7|1K|@$1W|G8|1X|G9|1Y|24]|$1W|GA|1X|GB|1Y|24]|$1W|GC|1X|GD|1Y|24]|$1W|GE|1X|GF|1Y|24]|$1W|GG|1X|GH|1Y|24]]|1L|@]|6|$]]|$1F|6M|1H|6N|2|32|1J|GI|1K|@$1W|GJ|1X|GK|1Y|24]|$1W|GL|1X|GM|1Y|24]|$1W|GN|1X|GO|1Y|24]]|1L|@]|6|$]]|$1F|6O|1H|6P|2|32|1J|GP|1K|@$1W|GQ|1X|GR|1Y|24]|$1W|GS|1X|GT|1Y|24]|$1W|GU|1X|GV|1Y|24]]|1L|@]|6|$]]|$1F|6Q|1H|6R|2|1I|1J|GW|1K|@]|1L|@]|6|$]]]]","plain":"\n前面我们已经介绍过远程仓库的相关概念,不过那时并没有深入探讨,只是讲解了如何创建远程仓库以及推送最新工作成果到远程仓库,实际上远程仓库对于团队协同开发很重要,不仅仅是团队协同开发的基础,也是代码备份的保障手段,现在我们先简单回忆下相关概念,以便为接下来的协同开发做好铺垫!\n远程仓库和远程分支\n远程仓库\n远程仓库其实并不复杂,实际上只是本地电脑上的本地仓库在另一台远程电脑的备份而已.\n相对本地仓库来说远程电脑上的版本库自然就是远程仓库,远程仓库使得我们的版本库更加安全,毕竟远程电脑可不是一般的电脑,出错的概率比我们平时工作所使用的电脑概率要小得多,这样一来即使不小心丢失了本地仓库的全部数据,只要远程仓库没有丢失,那我们就可以通过远程仓库重新取回最新数据!\n还有一点,远程仓库让代码社交化,因为大家有了一致途径来访问远程仓库,团队也好或者陌生人也罢,只有你愿意,他们就可以获取远程仓库的最新代码并参与开发,这也是 github 的一大亮点!\n远程分支\n回顾好远程仓库的概念后,我们再来讲一下本地仓库的远程分支是什么意思?\n当前你正在工作的电脑上存储的是本地仓库,如果没有远程仓库的支持,只能一个人鼓捣,别人无法共享你的工作成果,现在加入了团队开发流程,自然不再一个人独自开发,需要和团队其他人协同开发,共享开发成果.\n所以本地仓库必然保存着远程仓库的基本信息,只有区分好自己的工作成果和公共成果,才能不乱套,又能做到信息及时共享.\n实际上,在项目初期刚刚拷贝远程仓库(git clone)时,git 已经默认在本地仓库创建一个远程分支(origin/master),本地修改提交首先都是在本地仓库完成的,比如 git add,git commit 等命令,如果需要发布你的工作成果,那么就需要使用 git push origin <branch> 命令推送到远程仓库,这里的 origin 指的就是远程仓库名称(因为最初大家都是先从远程仓库克隆下来的,所以远程仓库存储的项目相当于原始项目,故而叫origin).\ngit clone 命令帮助本地仓库的 master 分支和远程仓库的 master 分支建立了关联,一般称远程仓库名称为 origin.\n?\n查看远程仓库信息 : git remote 或 git remote -v\n# 查看远程仓库名称\n$ git remote\norigin\n\n# 查看远程仓库详情 : 拉取和推送链接\n$ git remote -v\norigin  git@github.com:snowdreams1006/git-demo.git (fetch)\norigin  git@github.com:snowdreams1006/git-demo.git (push)\n$ \n本地分支推送到远程仓库 : git push origin <branch>\n本地仓库和远程仓库的分支理论上应该一一对应,本地仓库的主干分支叫做 master ,而远程仓库也有相应的分支叫做 master ,这种映射关系是使用 git clone 命令时默认生成的,也是推荐的做法.\n一般来说,本地仓库的分支推送到远程仓库指的就是推送到远程仓库同名的分支上,例如 git push origin master 意思是: 推将本地仓库的 master 分支推送到远程仓库的 master分支,当然你也可以推送其他分支到相应的远程分支上.\n按照之前约定的分支管理策略来说,master 分支用于生产环境部署,dev 分支用于收集开发成果,feature 分支用于开发具体功能分支,既然如此,那这些本地分支哪些需要同步推送到远程仓库就比较清晰了!\n推送本地 master 分支到远程仓库的 master 分支 : git push origin master\n推送本地 dev 分支到元层仓库的 dev 分支 : git push origin dev\n# 查看当前分支 : `master` 主分支\n$ git branch\n  dev\n* master\n  snow\n\n# 推送本地 `master` 分支到远程仓库 `origin` 上相应的 `master` 分支 \n$ git push origin master\nCounting objects: 15, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (15/15), done.\nWriting objects: 100% (15/15), 1.31 KiB | 1.31 MiB/s, done.\nTotal 15 (delta 9), reused 0 (delta 0)\nremote: Resolving deltas: 100% (9/9), completed with 3 local objects.\nTo github.com:snowdreams1006/git-demo.git\n   e60c8ad..dcce09c  master -> master\n$ \n?\n正常来说,本地仓库的 master 分支应该领先远程仓库 origin 上的 master 分支若干个版本.\n?\n一旦我们已经将本地分支上的工作成果推送到远程仓库上相应分支时,本地仓库和远程仓库这时候就保持一致了.\n$ git status\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nnothing to commit, working tree clean\n$ \n?\n远程仓库下载到本地分支 : git fetch\n远程仓库的操作可以简单归纳为两部分: 上传和下载.\n本地仓库推送到远程仓库是上传,而远程仓库拉取到本地仓库就是下载.\n团队多人协作开发时,大家都会定期或不定期往 master 或 dev 等分支上推送各自的更改,相应的我们就需要下载别人的最新工作成果.\n现在模拟其他伙伴正在往 master 分支上推送更改,最好在另一个电脑另一个账户,当然模拟的话也可以是同一个电脑下其他目录,或者最简单的方式,直接登录 github 更改 master 分支上某个文件内容,简单起见,我们采用最后一种方式.\n其他伙伴已往远程仓库上的 master 分支提交了新的版本: 创建 git-remote.txt 文件\n?\n现在我们想要下载其他人的最新工作成果,接下来让我们看看本地仓库的 master 还能和远程仓库的 master 分支保持一致吗?\n?\n# 下载远程仓库的 `master` 分支\n$ git fetch origin master\nremote: Enumerating objects: 4, done.\nremote: Counting objects: 100% (4/4), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), done.\nFrom github.com:snowdreams1006/git-demo\n * branch            master     -> FETCH_HEAD\n   dcce09c..10942ff  master     -> origin/master\n$ \n?\n执行 git fetch 命令后,远程仓库上的最新提交记录已经下载到本地仓库,同时更新了本地仓库的远程分支origin/master ,值得注意的是本地仓库的 master 分支并没有更新!\n那你可能会有疑问了,我想要的结果是下载其他人的最新工作成果,怎么我本地仓库的 master 分支并没有更新呢?\n# 查看工作区\n$ ls\nLICENSE     README.md   test.txt\n\n# 查看版本库状态\n$ git status\nOn branch master\nYour branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.\n  (use \"git pull\" to update your local branch)\n\nnothing to commit, working tree clean\n$ \n既然 git fetch 并没有更新本地仓库的 master 分支,那它到底做了哪些工作呢?\ngit fetch 会做的事情\n实际上, git fetch 完成了仅有的但是很重要的两步操作:\n从远程仓库下载本地仓库中缺失的提交记录\n更新本地仓库的远程分支(比如origin/master)\n通过上述两步操作完成的效果是: 将本地仓库中的远程分支更新成了远程仓库相应分支最新的状态.\n远程分支实际上是反映了远程仓库在你最后一次与它通信时的状态,而git fetch 就是你与远程仓库通信的方式了！\ngit fetch 不会做的事情\ngit fetch 并不会改变你本地仓库的状态,所以也就不会更新你的 master分支,自然也不会修改你磁盘上的文件.\n理解这一点很重要,因为许多开发人员误以为执行了 git fetch 以后，他们本地仓库就与远程仓库同步了.\n实际上它可能已经将进行这一操作所需的所有数据都下载了下来,但是并没有修改你本地的文件.\n 既然本地仓库的远程分支已更新,那么想要更新本地仓库的 master 分支该如何做呢?很简单,可以 git merge 啊!\n \n远程仓库更新到本地分支 : git pull\n其实通过 git fetch 命令我们已经下载了远程仓库的最新版本,只不过还没有合并到本地仓库而已,如何合并分支相信大家已经轻车熟路了,有很多方法:\ngit merge origin/master\ngit rebase origin/master\ngit cherry-pick origin/master\n实际上,先抓取更新(git fetch)再合并(git merge)这个流程很常用,因此 git 是有专门的命令来完成这两步操作的,这就是拉取更新**git pull** --- 刚好与推送更新 git push 相反!\n# 拉取最新版本\n$ git pull\nUpdating dcce09c..10942ff\nFast-forward\n git-remote.txt | 1 +\n 1 file changed, 1 insertion(+)\n create mode 100644 git-remote.txt\n\n# 查看版本库状态\n$ git status\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nnothing to commit, working tree clean\n\n# 查看工作区内容: 文件已更新\n$ ls\nLICENSE     README.md   git-remote.txt  test.txt\n$ \n?\n团队协作\n掌握了远程仓库和远程分支的相关概念后,现在开始真正模拟团队协作开发了,为了简单起见,仍然以直接操作 github 上的 master 分支为例说明如何协同开发.\n(1). 其他人已往远程仓库推送2个版本\n?\n(2). 你正在本地仓库提交1个版本\n$ echo \"learn teamwork\" >> test.txt\n$ git commit -am \"learn teamwork\"\n[master f971647] learn teamwork\n 1 file changed, 1 insertion(+)\n$ \n?\n(3). 你推送到远程仓库前先拉取最新版本\n# 拉取最新版本,并尝试合并\n$ git pull\nremote: Enumerating objects: 8, done.\nremote: Counting objects: 100% (8/8), done.\nremote: Compressing objects: 100% (5/5), done.\nremote: Total 6 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (6/6), done.\nFrom github.com:snowdreams1006/git-demo\n   10942ff..612e08a  master     -> origin/master\nMerge made by the 'recursive' strategy.\n git-remote.txt | 2 ++\n 1 file changed, 2 insertions(+)\n\n# 查看版本库状态\n$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 2 commits.\n  (use \"git push\" to publish your local commits)\n\nnothing to commit, working tree clean\n\n# 查看其他人工作成果\n$ cat git-remote.txt\ngit remote\ngit clone\ngit commit -am \"fake second teamwork\"\n\n# 查看自己即将推送的工作成果\n$ cat test.txt\nadd test.txt\nsee https://snowdreams1006.github.io/git/usage/remote-repository.html\nlearn git branch\nsee https://snowdreams1006.github.io/git/usage/branch-overview.html\ngit commit c1\ngit commit c2 and c3\ngit checkout -b dev\nfast forward not recommend\nHappy coding\nlearn git stash\nlearn git rebase\nlearn teamwork\n$ \n?\n(4). 你将本地仓库更改内容推送到远程仓库\n# 推送到远程仓库\n$ git push origin master\nCounting objects: 5, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (5/5), done.\nWriting objects: 100% (5/5), 564 bytes | 564.00 KiB/s, done.\nTotal 5 (delta 3), reused 0 (delta 0)\nremote: Resolving deltas: 100% (3/3), completed with 3 local objects.\nTo github.com:snowdreams1006/git-demo.git\n   612e08a..8fe5aba  master -> master\n$ \n现在前往 github 网站确认我们已经推送成功,我们的工作成果和其他人的工作成果同时存在于远程仓库中,这样就完成了一次团队协同开发的案例.\n?\n?\n现在简单回顾一下整个协同开发流程:\n其他人先于我们提交2个版本\n我们本地提交1个版本\n本地版本推送前拉取远程仓库\n本地仓库推送到远程仓库\n?\n小结\n查看远程仓库信息: git remote -v\n本地仓库推送到远程仓库: git push origin <branch>\n远程仓库抓取到本地仓库: git fetch\n远程仓库拉取到本地仓库: git pull 相当于 git fetch 和 git merge\n本地创建和远程仓库一致的分支: git checkout -b <branch> origin/<branch>,本地和远程分支名称最好一直,比如本地 master 和 远程 origin/master,本地 dev 和远程 origin/dev\n本地分支和远程分支建立关联: git branch --set-upstream <branch> origin/<branch> ,足够任性的话,本地 dev 可以关联远程 remote-dev 等,不过建议名称最好一致.\n团队协同开发时,不仅平时要定期拉取(git pull),推送到远程仓库前更应先拉取(git pull)再推送(git push),如出现冲突,解决冲突后再推送.\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n前面我们已经介绍过远程仓库的相关概念,不过那时并没有深入探讨,只是讲解了如何创建远程仓库以及推送最新工作成果到远程仓库,实际上远程仓库对于团队协同开发很重要,...","summary":"前面我们已经介绍过远程仓库的相关概念,不过那时并没有深入探讨,只是讲解了如何创建远程仓库以及推送最新工作成果到远程仓库,实际上远程仓库对于团队协同开发很重要,不...","abstract":"前面我们已经介绍过远程仓库的相关概念,不过那时并没有深入探讨,只是讲解了如何创建远程仓库以及推送最新工作成果到远程仓库,实际上远程仓库对于团队协同开发很重要,不...","description":"","picture":"https://ask.qcloudimg.com/http-save/yehe-2952369/fnxf87xtoe.png","coverImageUrl":"https://ask.qcloudimg.com/http-save/yehe-2952369/fnxf87xtoe.png","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/24 19:40"},"authorId":2952369,"columnId":75668,"writeTime":1554275734,"updateTime":1554275734,"viewCount":98,"likeCount":2,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2686,"type":40,"actionInfo":{"articleId":1409892,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554275720,"detail":{"id":1409892,"articleId":1409892,"title":"git 入门教程之变基合并\n                                                                            原","content":"entityMap|0|type|IMAGE|mutability|IMMUTABLE|data|imageUrl|https://ask.qcloudimg.com/http-save/yehe-2952369/g5zzpmmu8c.png|imageAlt|git-branch-multiple.png|1|https://ask.qcloudimg.com/http-save/yehe-2952369/yup91vgdwf.png|git-branch-rebase-snow.png|2|https://ask.qcloudimg.com/http-save/yehe-2952369/b054qdhv1e.png|git-branch-rebase-master.png|3|https://ask.qcloudimg.com/http-save/yehe-2952369/f0psrxoe4s.png|git-branch-rebase.png|4|https://ask.qcloudimg.com/http-save/yehe-2952369/tylei8pwy6.png|git-branch-rebase-back-master.png|blocks|key|886kh|text|unstyled|depth|inlineStyleRanges|entityRanges|6fv7k|git+鼓励大量使用分支---\"早建分支!多用分支!\",这是因为即便创建再多的分支也不会造成存储或内存开销,并且分支的作用有助于我们分解逻辑工作,这样一样其实比维护单一臃肿分支要简单得多!|offset|length|style|CODE|BOLD|7gfus|正因如此,每个新功能会创建合并分支,修复+bug+会创建合并分支等等,一段时间后再次回顾整个版本库的提交历史就会发现分支错综复杂,难以理清!|6j6lo|虽然\"条条大路通罗马\",但错综复杂的道路容易让人迷失方向,如果不使用分支,当然就不存在\"分叉问题\",所以在某些情况下我们希望寻求一种替代方案来解决分支合并带来的**\"分叉问题\"**!|b4ttj|回顾提交历史|header-two|av7gc|查看提交历史:+git+log+--pretty=oneline+--graph+--abbrev-commit|benap|#+查看提交历史\n$+git+log+--pretty=oneline+--graph+--abbrev-commit\n*+e60c8ad+(HEAD+->+dev,+origin/master,+origin/HEAD,+master)+fix+bug+about+issue-110\n*+3fe94c0+fast+forward\n*+++22fbef7+git+merge+--no-ff+dev\n%7C\\++\n%7C+*+44d68f6+git+checkout+-b+dev\n%7C/++\n*+++3b8f434+fix+conflict\n%7C\\++\n%7C+*+0fe95f8+git+commit+c2\n*+%7C+0949cc3+git+commit+c3\n%7C/++\n*+5c482cd+git+commit+c1\n*+413a4d1+see+https://snowdreams1006.github.io/git/usage/branch-overview.html\n*+9c30e50+learn+git+branch\n*+b3d8193+see+https://snowdreams1006.github.io/git/usage/remote-repository.html\n*+8e62564+add+test.txt\n*+9b196aa+Initial+commit|code-block|syntax|javascript|1b7qc|仅仅是简单的演示项目的提交历史都已经出现\"分叉问题\",更何况真实的企业级开发项目呢?如果真的是多分支多人合作开发的话,\"分叉现象\"将更加明显,模拟效果图大概长这样:|4ifg7|?|atomic|39n3g|整理提交历史|96u49|如果想要一条直路直达罗马,那我们必须规划好路径,摒弃小道,坚持主干道.git+的各种+dev,feature等分支就是需要治理的一条条分叉小道,而+master+主分支就是我们的大道.|39ear|演示项目有三个分支,主干master,开发dev,自定义snow,目标是将自定义+snow+分支的工作成功整理合并到主干分支,从而解决\"分叉问题\",dev+分支与项目演示无关,无需更改.|5cicc|(1).+切换到+snow+分支并提交一个版本(learn+git+rebase)|f367r|#+切换到+`snow`+分支\n$+git+checkout+snow\nSwitched+to+branch+'snow'\n\n#+追加新内容到+`test.txt`+文件\n$+echo+\"learn+git+rebase\"+>>+test.txt\n\n#+提交到版本库\n$+git+commit+-am+\"learn+git+rebase\"\n[snow+7d21e80]+learn+git+rebase\n+1+file+changed,+1+insertion(%2B)\n$+|5p8p0|dkjs0|(2).+切换到+master+分支也提交一个版本(modify+README)|4m26|#+切换回+`master`+分支\n$+git+checkout+master\nSwitched+to+branch+'master'\nYour+branch+is+up+to+date+with+'origin/master'.\n\n#+追加新内容到+`README.md`+文件\n$+echo+\"learn+git+,share+git\"+>>+README.md\n\n#+提交到版本库\n$+git+add+README.md\n$+git+commit+-m+\"modify+README\"\n[master+3931d48]+modify+README\n+1+file+changed,+1+insertion(%2B)\n$+|f9flq|54nnd|(3).+切换回+snow+分支,整理提交历史(git+rebase)到+master+分支|daied|#+切换到+`snow`+分支\n$+git+checkout+snow\nSwitched+to+branch+'snow'\n\n#+改变基础版本(父版本),简称\"变基\"\n$+git+rebase+master\nHEAD+is+up+to+date.\n\n#+当前提交历史线\n$+git+log+--pretty=oneline+--graph+--abbrev-commit\n*+e92f068+(HEAD)+rebase\n*+72f4c01+fix+confict+about+happy+coding\n*+3931d48+(master)+modify+README\n*+e60c8ad+(origin/master,+origin/HEAD,+dev)+fix+bug+about+issue-110\n*+3fe94c0+fast+forward\n*+++22fbef7+git+merge+--no-ff+dev\n%7C\\++\n%7C+*+44d68f6+git+checkout+-b+dev\n%7C/++\n*+++3b8f434+fix+conflict\n%7C\\++\n%7C+*+0fe95f8+git+commit+c2\n*+%7C+0949cc3+git+commit+c3\n%7C/++\n*+5c482cd+git+commit+c1\n*+413a4d1+see+https://snowdreams1006.github.io/git/usage/branch-overview.html\n*+9c30e50+learn+git+branch\n*+b3d8193+see+https://snowdreams1006.github.io/git/usage/remote-repository.html\n*+8e62564+add+test.txt\n*+9b196aa+Initial+commit\n$+|7esvv|c8nns|(4).+切换回+master+主干分支再次变基合并+snow+分支|ev1qt|#+切换回+`master`+分支\n$+git+checkout+master\nWarning:+you+are+leaving+2+commits+behind,+not+connected+to\nany+of+your+branches:\n\n++e92f068+rebase\n++72f4c01+fix+confict+about+happy+coding\n\nIf+you+want+to+keep+them+by+creating+a+new+branch,+this+may+be+a+good+time\nto+do+so+with:\n\n+git+branch+<new-branch-name>+e92f068\n\nSwitched+to+branch+'master'\nYour+branch+is+ahead+of+'origin/master'+by+1+commit.\n++(use+\"git+push\"+to+publish+your+local+commits)\n\n#+改变父版本为+`snow`+分支指向的版本++\n$+git+rebase+snow\nFirst,+rewinding+head+to+replay+your+work+on+top+of+it...\nApplying:+modify+README\n$|2n4km|bsckc|(5).+整理分支完成,最终主干分支是一条直线|bmoud|#+查看提交历史线\n$+git+log+--pretty=oneline+--graph+--abbrev-commit\n\n#+`modify+README`+是+`master`+分支提交的版本\n*+dcce09c+(HEAD+->+master)+modify+README\n\n#+`learn+git+rebase`+是+`snow`+分支提交的版本\n*+7d21e80+(snow)+learn+git+rebase\n*+++a06a866+fix+conflict\n%7C\\++\n%7C+*+e60c8ad+(origin/master,+origin/HEAD,+dev)+fix+bug+about+issue-110\n*+%7C+ab846f9+learn+git+stash\n*+%7C+93227ba+Happy+coding\n%7C/++\n*+3fe94c0+fast+forward\n*+++22fbef7+git+merge+--no-ff+dev\n%7C\\++\n%7C+*+44d68f6+git+checkout+-b+dev\n%7C/++\n*+++3b8f434+fix+conflict\n%7C\\++\n%7C+*+0fe95f8+git+commit+c2\n*+%7C+0949cc3+git+commit+c3\n%7C/++\n*+5c482cd+git+commit+c1\n*+413a4d1+see+https://snowdreams1006.github.io/git/usage/branch-overview.html\n*+9c30e50+learn+git+branch\n*+b3d8193+see+https://snowdreams1006.github.io/git/usage/remote-repository.html\n*+8e62564+add+test.txt|3ve22|这一次我们没有使用+git+merge+而是采用+git+rebase+方式完成了分支的合并,优点是提交历史更清晰,缺点是丢失了分支信息.|qlkn|小结|djpc1|git+rebase+变基合并分支,实际上就是取出一系列的提交版本并“复制”到目标版本,从而形成一条新的提交历史线.+比如我们想要把+bugFix+分支里的工作直接移到+master+分支上,移动以后会使得两个分支的功能看起来像是按顺序开发,但实际上它们是并行开发的,这就是+git+rebase+的作用.|58lh|git+rebase+的优势是创造更线性的提交历史,使得代码库的提交历史变得异常清晰,劣势是缺失了分支信息,好像从没存在过该分支一样.|6ktjt|将目标分支上的工作成果转移到到主干分支+:+git+rebase+master|ordered-list-item|emvbl|主干分支接收已转移好的目标分支工作成果+:+git+rebase+<branch>|hnk3|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|0|3|F|C|0|L|3|0|1Z|6|0|0|8|1C|0|0|0|0|1|0|0|0|Z|3|17|3|1B|7|22|6|0|C|6|L|3|S|4|15|4|22|3|0|9|4|O|G|0|0|0|1|1|0|9|6|Q|D|0|0|0|1|2|0|9|4|O|A|11|6|O|A|0|0|0|1|3|0|9|6|R|4|M|2|0|0|0|1|4|0|0|0|A|9|P|A|0|0|0|A|1V|6|2D|6|3U|A|32|4|3K|4|0|0|A|0|M|H|0|M|J|0^^$0|$1|$2|3|4|5|6|$7|8|9|A]]|B|$2|3|4|5|6|$7|C|9|D]]|E|$2|3|4|5|6|$7|F|9|G]]|H|$2|3|4|5|6|$7|I|9|J]]|K|$2|3|4|5|6|$7|L|9|M]]]|N|@$O|P|Q|-4|2|R|S|2U|T|@]|U|@]|6|$]]|$O|V|Q|W|2|R|S|2V|T|@$X|2W|Y|2X|Z|10]|$X|2Y|Y|2Z|Z|11]]|U|@]|6|$]]|$O|12|Q|13|2|R|S|30|T|@$X|31|Y|32|Z|10]]|U|@]|6|$]]|$O|14|Q|15|2|R|S|33|T|@$X|34|Y|35|Z|11]]|U|@]|6|$]]|$O|16|Q|17|2|18|S|36|T|@]|U|@]|6|$]]|$O|19|Q|1A|2|R|S|37|T|@$X|38|Y|39|Z|10]]|U|@]|6|$]]|$O|1B|Q|1C|2|1D|S|3A|T|@]|U|@]|6|$1E|1F]]|$O|1G|Q|1H|2|R|S|3B|T|@]|U|@]|6|$]]|$O|1I|Q|1J|2|1K|S|3C|T|@]|U|@$X|3D|Y|3E|O|3F]]|6|$]]|$O|1L|Q|1M|2|18|S|3G|T|@]|U|@]|6|$]]|$O|1N|Q|1O|2|R|S|3H|T|@$X|3I|Y|3J|Z|10]|$X|3K|Y|3L|Z|10]|$X|3M|Y|3N|Z|10]|$X|3O|Y|3P|Z|10]]|U|@]|6|$]]|$O|1P|Q|1Q|2|R|S|3Q|T|@$X|3R|Y|3S|Z|10]|$X|3T|Y|3U|Z|10]|$X|3V|Y|3W|Z|10]|$X|3X|Y|3Y|Z|10]|$X|3Z|Y|40|Z|10]]|U|@]|6|$]]|$O|1R|Q|1S|2|R|S|41|T|@$X|42|Y|43|Z|10]|$X|44|Y|45|Z|10]]|U|@]|6|$]]|$O|1T|Q|1U|2|1D|S|46|T|@]|U|@]|6|$1E|1F]]|$O|1V|Q|1J|2|1K|S|47|T|@]|U|@$X|48|Y|49|O|4A]]|6|$]]|$O|1W|Q|1X|2|R|S|4B|T|@$X|4C|Y|4D|Z|10]|$X|4E|Y|4F|Z|10]]|U|@]|6|$]]|$O|1Y|Q|1Z|2|1D|S|4G|T|@]|U|@]|6|$1E|1F]]|$O|20|Q|1J|2|1K|S|4H|T|@]|U|@$X|4I|Y|4J|O|4K]]|6|$]]|$O|21|Q|22|2|R|S|4L|T|@$X|4M|Y|4N|Z|10]|$X|4O|Y|4P|Z|10]|$X|4Q|Y|4R|Z|10]|$X|4S|Y|4T|Z|11]]|U|@]|6|$]]|$O|23|Q|24|2|1D|S|4U|T|@]|U|@]|6|$1E|1F]]|$O|25|Q|1J|2|1K|S|4V|T|@]|U|@$X|4W|Y|4X|O|4Y]]|6|$]]|$O|26|Q|27|2|R|S|4Z|T|@$X|50|Y|51|Z|10]|$X|52|Y|53|Z|10]|$X|54|Y|55|Z|11]]|U|@]|6|$]]|$O|28|Q|29|2|1D|S|56|T|@]|U|@]|6|$1E|1F]]|$O|2A|Q|1J|2|1K|S|57|T|@]|U|@$X|58|Y|59|O|5A]]|6|$]]|$O|2B|Q|2C|2|R|S|5B|T|@]|U|@]|6|$]]|$O|2D|Q|2E|2|1D|S|5C|T|@]|U|@]|6|$1E|1F]]|$O|2F|Q|2G|2|R|S|5D|T|@$X|5E|Y|5F|Z|10]|$X|5G|Y|5H|Z|10]]|U|@]|6|$]]|$O|2H|Q|2I|2|18|S|5I|T|@]|U|@]|6|$]]|$O|2J|Q|2K|2|R|S|5J|T|@$X|5K|Y|5L|Z|10]|$X|5M|Y|5N|Z|10]|$X|5O|Y|5P|Z|10]|$X|5Q|Y|5R|Z|10]|$X|5S|Y|5T|Z|11]|$X|5U|Y|5V|Z|11]]|U|@]|6|$]]|$O|2L|Q|2M|2|R|S|5W|T|@$X|5X|Y|5Y|Z|10]]|U|@]|6|$]]|$O|2N|Q|2O|2|2P|S|5Z|T|@$X|60|Y|61|Z|10]]|U|@]|6|$]]|$O|2Q|Q|2R|2|2P|S|62|T|@$X|63|Y|64|Z|10]]|U|@]|6|$]]|$O|2S|Q|2T|2|R|S|65|T|@]|U|@]|6|$]]]]","plain":"\ngit 鼓励大量使用分支---\"早建分支!多用分支!\",这是因为即便创建再多的分支也不会造成存储或内存开销,并且分支的作用有助于我们分解逻辑工作,这样一样其实比维护单一臃肿分支要简单得多!\n正因如此,每个新功能会创建合并分支,修复 bug 会创建合并分支等等,一段时间后再次回顾整个版本库的提交历史就会发现分支错综复杂,难以理清!\n虽然\"条条大路通罗马\",但错综复杂的道路容易让人迷失方向,如果不使用分支,当然就不存在\"分叉问题\",所以在某些情况下我们希望寻求一种替代方案来解决分支合并带来的**\"分叉问题\"**!\n回顾提交历史\n查看提交历史: git log --pretty=oneline --graph --abbrev-commit\n# 查看提交历史\n$ git log --pretty=oneline --graph --abbrev-commit\n* e60c8ad (HEAD -> dev, origin/master, origin/HEAD, master) fix bug about issue-110\n* 3fe94c0 fast forward\n*   22fbef7 git merge --no-ff dev\n|\\  \n| * 44d68f6 git checkout -b dev\n|/  \n*   3b8f434 fix conflict\n|\\  \n| * 0fe95f8 git commit c2\n* | 0949cc3 git commit c3\n|/  \n* 5c482cd git commit c1\n* 413a4d1 see https://snowdreams1006.github.io/git/usage/branch-overview.html\n* 9c30e50 learn git branch\n* b3d8193 see https://snowdreams1006.github.io/git/usage/remote-repository.html\n* 8e62564 add test.txt\n* 9b196aa Initial commit\n仅仅是简单的演示项目的提交历史都已经出现\"分叉问题\",更何况真实的企业级开发项目呢?如果真的是多分支多人合作开发的话,\"分叉现象\"将更加明显,模拟效果图大概长这样:\n?\n整理提交历史\n如果想要一条直路直达罗马,那我们必须规划好路径,摒弃小道,坚持主干道.git 的各种 dev,feature等分支就是需要治理的一条条分叉小道,而 master 主分支就是我们的大道.\n演示项目有三个分支,主干master,开发dev,自定义snow,目标是将自定义 snow 分支的工作成功整理合并到主干分支,从而解决\"分叉问题\",dev 分支与项目演示无关,无需更改.\n(1). 切换到 snow 分支并提交一个版本(learn git rebase)\n# 切换到 `snow` 分支\n$ git checkout snow\nSwitched to branch 'snow'\n\n# 追加新内容到 `test.txt` 文件\n$ echo \"learn git rebase\" >> test.txt\n\n# 提交到版本库\n$ git commit -am \"learn git rebase\"\n[snow 7d21e80] learn git rebase\n 1 file changed, 1 insertion(+)\n$ \n?\n(2). 切换到 master 分支也提交一个版本(modify README)\n# 切换回 `master` 分支\n$ git checkout master\nSwitched to branch 'master'\nYour branch is up to date with 'origin/master'.\n\n# 追加新内容到 `README.md` 文件\n$ echo \"learn git ,share git\" >> README.md\n\n# 提交到版本库\n$ git add README.md\n$ git commit -m \"modify README\"\n[master 3931d48] modify README\n 1 file changed, 1 insertion(+)\n$ \n?\n(3). 切换回 snow 分支,整理提交历史(git rebase)到 master 分支\n# 切换到 `snow` 分支\n$ git checkout snow\nSwitched to branch 'snow'\n\n# 改变基础版本(父版本),简称\"变基\"\n$ git rebase master\nHEAD is up to date.\n\n# 当前提交历史线\n$ git log --pretty=oneline --graph --abbrev-commit\n* e92f068 (HEAD) rebase\n* 72f4c01 fix confict about happy coding\n* 3931d48 (master) modify README\n* e60c8ad (origin/master, origin/HEAD, dev) fix bug about issue-110\n* 3fe94c0 fast forward\n*   22fbef7 git merge --no-ff dev\n|\\  \n| * 44d68f6 git checkout -b dev\n|/  \n*   3b8f434 fix conflict\n|\\  \n| * 0fe95f8 git commit c2\n* | 0949cc3 git commit c3\n|/  \n* 5c482cd git commit c1\n* 413a4d1 see https://snowdreams1006.github.io/git/usage/branch-overview.html\n* 9c30e50 learn git branch\n* b3d8193 see https://snowdreams1006.github.io/git/usage/remote-repository.html\n* 8e62564 add test.txt\n* 9b196aa Initial commit\n$ \n?\n(4). 切换回 master 主干分支再次变基合并 snow 分支\n# 切换回 `master` 分支\n$ git checkout master\nWarning: you are leaving 2 commits behind, not connected to\nany of your branches:\n\n  e92f068 rebase\n  72f4c01 fix confict about happy coding\n\nIf you want to keep them by creating a new branch, this may be a good time\nto do so with:\n\n git branch <new-branch-name> e92f068\n\nSwitched to branch 'master'\nYour branch is ahead of 'origin/master' by 1 commit.\n  (use \"git push\" to publish your local commits)\n\n# 改变父版本为 `snow` 分支指向的版本  \n$ git rebase snow\nFirst, rewinding head to replay your work on top of it...\nApplying: modify README\n$\n?\n(5). 整理分支完成,最终主干分支是一条直线\n# 查看提交历史线\n$ git log --pretty=oneline --graph --abbrev-commit\n\n# `modify README` 是 `master` 分支提交的版本\n* dcce09c (HEAD -> master) modify README\n\n# `learn git rebase` 是 `snow` 分支提交的版本\n* 7d21e80 (snow) learn git rebase\n*   a06a866 fix conflict\n|\\  \n| * e60c8ad (origin/master, origin/HEAD, dev) fix bug about issue-110\n* | ab846f9 learn git stash\n* | 93227ba Happy coding\n|/  \n* 3fe94c0 fast forward\n*   22fbef7 git merge --no-ff dev\n|\\  \n| * 44d68f6 git checkout -b dev\n|/  \n*   3b8f434 fix conflict\n|\\  \n| * 0fe95f8 git commit c2\n* | 0949cc3 git commit c3\n|/  \n* 5c482cd git commit c1\n* 413a4d1 see https://snowdreams1006.github.io/git/usage/branch-overview.html\n* 9c30e50 learn git branch\n* b3d8193 see https://snowdreams1006.github.io/git/usage/remote-repository.html\n* 8e62564 add test.txt\n这一次我们没有使用 git merge 而是采用 git rebase 方式完成了分支的合并,优点是提交历史更清晰,缺点是丢失了分支信息.\n小结\ngit rebase 变基合并分支,实际上就是取出一系列的提交版本并“复制”到目标版本,从而形成一条新的提交历史线. 比如我们想要把 bugFix 分支里的工作直接移到 master 分支上,移动以后会使得两个分支的功能看起来像是按顺序开发,但实际上它们是并行开发的,这就是 git rebase 的作用.\ngit rebase 的优势是创造更线性的提交历史,使得代码库的提交历史变得异常清晰,劣势是缺失了分支信息,好像从没存在过该分支一样.\n将目标分支上的工作成果转移到到主干分支 : git rebase master\n主干分支接收已转移好的目标分支工作成果 : git rebase <branch>\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\ngit 鼓励大量使用分支---\"早建分支!多用分支!\",这是因为即便创建再多的分支也不会造成存储或内存开销,并且分支的作用有助于我们分解逻辑工作,这样一样其实...","summary":"git 鼓励大量使用分支---\"早建分支!多用分支!\",这是因为即便创建再多的分支也不会造成存储或内存开销,并且分支的作用有助于我们分解逻辑工作,这样一样其实比...","abstract":"git 鼓励大量使用分支---\"早建分支!多用分支!\",这是因为即便创建再多的分支也不会造成存储或内存开销,并且分支的作用有助于我们分解逻辑工作,这样一样其实比...","description":"","picture":"https://ask.qcloudimg.com/http-save/yehe-2952369/g5zzpmmu8c.png","coverImageUrl":"https://ask.qcloudimg.com/http-save/yehe-2952369/g5zzpmmu8c.png","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/23 23:32"},"authorId":2952369,"columnId":75668,"writeTime":1554275720,"updateTime":1554275720,"viewCount":82,"likeCount":3,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2685,"type":40,"actionInfo":{"articleId":1409891,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554275705,"detail":{"id":1409891,"articleId":1409891,"title":"git 入门教程之紧急修复\n                                                                            原","content":"entityMap|0|type|IMAGE|mutability|IMMUTABLE|data|imageUrl|https://ask.qcloudimg.com/http-save/yehe-2952369/riplt64csj.png|imageAlt|git-branch-snow.png|1|https://ask.qcloudimg.com/http-save/yehe-2952369/zdj25pwj2s.png|git-branch-issue-110.png|2|https://ask.qcloudimg.com/http-save/yehe-2952369/587e7975vd.png|git-branch-fixbug-master.png|3|https://ask.qcloudimg.com/http-save/yehe-2952369/bn41g6ubiz.png|git-branch-fixbug-snow.png|blocks|key|26u5a|text|unstyled|depth|inlineStyleRanges|entityRanges|2jvou|和往常一样,每个人团队开发者都在自己的本地分支上进行日常工作,相互独立又相互联系,一直以来相安无事,可是某天下午,上级领导突然急冲冲的打电话告诉你线上出bug了,需要你紧急修复,下班之前必须解决!|offset|length|style|CODE|8i0rb|我们天生就是创造+bug+的特殊群体,每天都在和各种各样的+bug+打交道,早已经习惯了这样的工作节奏,再也没有当初刚刚遇到紧急问题的手足无措,先喝杯茶,冷静一下,然后汇报领导说:放心吧!保证30min+内解决问题!|13c6t|背景|header-two|blrto|学习了分支操作的相关知识,团队内部就基本的开发流程达成一致:|fd06k|假设线上是主干+master+分支,开发是+dev+分支,团队成员是自定义+custom+分支,平时开发时在大家在各自+custom+分支上工作,完成分配任务后再合并到开发+dev+分支,等到开发分支功能稳定后,由项目领导负责合并到主干分支+master+.|bd4ib|+上述流程只是开发流程的简化版,实际情况更加复杂,后续再介绍+gitflow+工作流相关知识.\n+|blockquote|97ra9|由于是线上出现+bug,理所当然是基于+master+分支检出临时分支,修复分支代号为+issue-110,然后定位+bug+并提交,最后再合并到+master+分支,如此一来成功修复+bug,完成既定任务,心安理得准备下班回家!|17f1s|如果真的向上述步骤那样操作,显然还不够冷静,刚才那一杯茶算是白喝了!因为这样操作可能会丢失现场数据,那很多工作岂不是白做了,下面简单演示一下:|41nkh|错误示例|header-three|b3pkd|(一).+事发前正在自定义的+snow+分支上愉快编码中...|2mb95|#+线上分支+`master`,开发分支+`dev`,自定义分支+`snow`,当前正处于自定义分支\n$+git+branch\n++dev\n++master\n*+snow\n#+接到领导电话前正在自定义+`snow`+分支上进行愉快编码中...\n$+echo+\"Happy+coding\"+>>+test.txt\n$+git+add+test.txt\n$+git+commit+-m++\"Happy+coding\"|code-block|syntax|javascript|db402|?|atomic|nq6v|(二).+事发时直接检出主分+master+分支,并紧急修复+bug+.|18vle|(2.1)+基于+master+分支检出+issue-110+分支,并修复提交.|ad45r|#+注意:+事发时正在思考人生,此时更改尚未添加到暂存区!\n$+echo+\"who+am+i\"+>>+test.txt\n\n#+当前情况下,默认不允许直接切换到其他分支,因为工作区更改会被重写,这里为了演示错误示例,强制切换!\n$+git+checkout+-f+master+\n\n#+基于主干+`master`+分支检出修复+`issue-110`分支\n$+git+checkout+-b+issue-110\nSwitched+to+a+new+branch+'issue-110'\n\n#+定位线上+`bug`并修复,假设将+`fast+forward`+更改为+`fast+forward+not+recommend`,瞬间修复+`bug`有没有!\n$+cat+test.txt\nadd+test.txt\nsee+https://snowdreams1006.github.io/git/usage/remote-repository.html\nlearn+git+branch\nsee+https://snowdreams1006.github.io/git/usage/branch-overview.html\ngit+commit+c1\ngit+commit+c2+and+c3\ngit+checkout+-b+dev\nfast+forward\n$+vim+test.txt\n$+cat+test.txt\nadd+test.txt\nsee+https://snowdreams1006.github.io/git/usage/remote-repository.html\nlearn+git+branch\nsee+https://snowdreams1006.github.io/git/usage/branch-overview.html\ngit+commit+c1\ngit+commit+c2+and+c3\ngit+checkout+-b+dev\nfast+forward+not+recommend\n\n#+修复+`bug`+后,提交更改并备注已修复\n$+git+add+test.txt\n$+git+commit+-m+\"fix+bug+about+issue-110\"\n[issue-110+e60c8ad]+fix+bug+about+issue-110\n+1+file+changed,+1+insertion(%2B),+1+deletion(-)\nsunpodeMacBook-Pro:git-demo+sunpo$+git+status\nOn+branch+issue-110\nnothing+to+commit,+working+tree+clean\n$+|67nlm|42guk|(2.1)+切换到主干+master+分支,并合并修复+issue-110+分支|2dn0k|#+切换回+`master`+分支,合并修复+`issue-110`+分支\n$+git+checkout+master\nSwitched+to+branch+'master'\nYour+branch+is+up+to+date+with+'origin/master'.\n$+git+merge+issue-110\nUpdating+3fe94c0..e60c8ad\nFast-forward\n+test.txt+%7C+2+%2B-\n+1+file+changed,+1+insertion(%2B),+1+deletion(-)\n\n#+验证+`bug`+已修复:+更改为+`fast+forward+not+recommend`\n$+cat+test.txt\nadd+test.txt\nsee+https://snowdreams1006.github.io/git/usage/remote-repository.html\nlearn+git+branch\nsee+https://snowdreams1006.github.io/git/usage/branch-overview.html\ngit+commit+c1\ngit+commit+c2+and+c3\ngit+checkout+-b+dev\nfast+forward+not+recommend\n$+|cl3ao|5qeit|(三).+事发后切换回自定义+snow+分支,打算下班回家.|40gg|#+切换回+`snow`+分支,发现丢失了事发前的未保存更改:`who+am+i`\n$+git+checkout+snow\nSwitched+to+branch+'snow'\n$+cat+test.txt\nadd+test.txt\nsee+https://snowdreams1006.github.io/git/usage/remote-repository.html\nlearn+git+branch\nsee+https://snowdreams1006.github.io/git/usage/branch-overview.html\ngit+commit+c1\ngit+commit+c2+and+c3\ngit+checkout+-b+dev\nfast+forward\nHappy+coding\n$+|dtk0c|3kjvm|+现在还打算下班吗?你所做的更改因为没有提交或者不能提交造成全部丢失!\n+|6bq55|结果|header-four|4ffms|因为手头工作进行到一半无法提交或者忘记提交等原因,为了临时修复紧急+bug+而直接切换到目标分支再回来时发现更改全部丢失,相当于那部分工作白忙活了!|BOLD|ao9af|正确示例|89rrq|经过上述错误示例的惨痛教训后,再也不敢轻易切换分支了,原因在于工作区更改并没有被提交,或者说不能提交,如果能够有一种机制来保护案发现场,这样我们就能放心切换到其他分支工作,回来时一切如初,那该多好?|71kek|幸运的是,git+确实提供这么一种机制,git+stash+命令临时存储工作区,类似\"草稿箱\"作用.|ah18s|(一).+恢复工作区丢失更改,并使用+git+stash+命令保存现场.|c0jpo|#+修复工作区丢失更改:+同样未添加到暂存区\n$+echo+\"learn+git+stash\"+>>+test.txt\n$+cat+test.txt\nadd+test.txt\nsee+https://snowdreams1006.github.io/git/usage/remote-repository.html\nlearn+git+branch\nsee+https://snowdreams1006.github.io/git/usage/branch-overview.html\ngit+commit+c1\ngit+commit+c2+and+c3\ngit+checkout+-b+dev\nfast+forward\nHappy+coding\nlearn+git+stash\n\n#+保护现场:+存储到\"草稿箱\"\n$+git+stash\nSaved+working+directory+and+index+state+WIP+on+snow:+93227ba+Happy+coding|7gv2k|(二).+切换到开发+dev+分支并合并修复+issue-110+分支.|4hht7|#+切换到开发+`dev`+分支\n$+git+checkout+dev\nSwitched+to+branch+'dev'\nsunpodeMacBook-Pro:git-demo+sunpo$+git+status\nOn+branch+dev\nnothing+to+commit,+working+tree+clean\n#+合并修复+`issue-110`+分支\n$+git+merge+issue-110\nUpdating+3fe94c0..e60c8ad\nFast-forward\n+test.txt+%7C+2+%2B-\n+1+file+changed,+1+insertion(%2B),+1+deletion(-)\nsunpodeMacBook-Pro:git-demo+sunpo$+git+status\nOn+branch+dev\nnothing+to+commit,+working+tree+clean\n$+|e8ddf|(三).+切换回自定义+snow+分支,并恢复工作现场.|a0h9q|#+切换回自定义+`snow`+分支\n$+git+checkout+snow\nSwitched+to+branch+'snow'\nsunpodeMacBook-Pro:git-demo+sunpo$+git+status\nOn+branch+snow\nnothing+to+commit,+working+tree+clean\n$+|2i4uo|git+status+命令返回结果怎么显示工作区是干净的,好不容易才将丢失的更改找回来怎么又不见了?!逗我玩?|dfv4e|冷静,冷静,不要慌,既然工作现场已经保存到\"草稿箱\",那我们想要找回总要去\"草稿箱\"才能取出来吧?现在让我们看一下\"草稿箱\"有没有我们的工作现场?|ekqvm|#+查看存储的\"草稿箱\"列表\n$+git+stash+list\nstash@{0}:+WIP+on+snow:+93227ba+Happy+coding\n$+|2ld3m|+这里的+stash@{0}+是草稿+id,因为\"草稿箱\"允许保存多条草稿!\n+|751fp|现在放心了吧,保存的\"草稿\"安然无恙躺在未知的某个地方,现在我们想办法恢复回工作区即可!|1va46|git+stash+apply+恢复草稿,然后+git+stash+drop+删除草稿|unordered-list-item|84bdr|git+stash+pop+恢复并删除草稿|2muhv|#+恢复工作现场\n$+git+stash+pop\nOn+branch+snow\nChanges+not+staged+for+commit:\n++(use+\"git+add+<file>...\"+to+update+what+will+be+committed)\n++(use+\"git+checkout+--+<file>...\"+to+discard+changes+in+working+directory)\n\n++++modified:+++test.txt\n\nno+changes+added+to+commit+(use+\"git+add\"+and/or+\"git+commit+-a\")\nDropped+refs/stash@{0}+(b0c8ddc034d21f31204c82e9838fc5d4c01a49a8)\n\n#+工作现场已恢复,更改未添加到暂存区,`learn+git+stash`+又恢复了!\n$+git+status\nOn+branch+snow\nChanges+not+staged+for+commit:\n++(use+\"git+add+<file>...\"+to+update+what+will+be+committed)\n++(use+\"git+checkout+--+<file>...\"+to+discard+changes+in+working+directory)\n\n++++modified:+++test.txt\n\nno+changes+added+to+commit+(use+\"git+add\"+and/or+\"git+commit+-a\")\n$+cat+test.txt\nadd+test.txt\nsee+https://snowdreams1006.github.io/git/usage/remote-repository.html\nlearn+git+branch\nsee+https://snowdreams1006.github.io/git/usage/branch-overview.html\ngit+commit+c1\ngit+commit+c2+and+c3\ngit+checkout+-b+dev\nfast+forward\nHappy+coding\nlearn+git+stash|35i7d|96u0h|不论手头工作有没有提交,一旦工作区保存到\"草稿箱\"后,就放心大胆切换分支进行工作,回来时岁月静好,一切如初!|48dhb|小结|8vhm6|紧急修复+bug+时,可以通过+git+stash+保护工作现场,然后再切换到目标分支,检出修复分支,完成修复后切换到目标分支,合并修复分支,最后删除修复分支,此时再切换回本地分支后一切如初!|a6j38|工作区更改添加到\"草稿箱\"+:++git+stash,支持多次添加到\"草稿箱\"|cubm1|列出\"草稿箱\"内容+:+git+stash+list|b3kgr|恢复\"草稿箱\"内容+:+git+stash+apply|2a7eg|删除\"草稿箱\"内容+:+git+stash+drop|f2aei|恢复并删除\"草稿箱\"内容+:+git+stash+pop|66h64|恢复%7C删除指定\"草稿箱\"内容+:+git+stash+<stash-id>,例如+git+stash+apply+stash@{0}|4qsnv|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|24|3|0|9|3|U|3|2O|5|0|0|0|8|6|M|3|12|6|1O|6|2F|3|3D|6|0|V|7|0|8|3|K|6|18|9|1N|3|22|6|2L|3|0|0|0|F|4|0|0|0|1|0|0|F|6|V|3|0|9|6|L|9|0|0|0|1|1|0|C|6|S|9|0|0|0|1|2|0|F|4|0|0|0|1|3|0|0|0|Y|3|13|4|0|0|0|5|3|K|9|0|J|9|0|0|B|3|N|9|0|0|C|4|0|0|0|A|0|0|0|5|9|0|0|0|F|O|E|0|0|D|0|0|0|0|0|5|3|G|9|0|H|9|0|C|E|0|C|F|0|C|E|0|F|D|0|H|K|15|P|0^^$0|$1|$2|3|4|5|6|$7|8|9|A]]|B|$2|3|4|5|6|$7|C|9|D]]|E|$2|3|4|5|6|$7|F|9|G]]|H|$2|3|4|5|6|$7|I|9|J]]]|K|@$L|M|N|-4|2|O|P|40|Q|@]|R|@]|6|$]]|$L|S|N|T|2|O|P|41|Q|@$U|42|V|43|W|X]]|R|@]|6|$]]|$L|Y|N|Z|2|O|P|44|Q|@$U|45|V|46|W|X]|$U|47|V|48|W|X]|$U|49|V|4A|W|X]]|R|@]|6|$]]|$L|10|N|11|2|12|P|4B|Q|@]|R|@]|6|$]]|$L|13|N|14|2|O|P|4C|Q|@]|R|@]|6|$]]|$L|15|N|16|2|O|P|4D|Q|@$U|4E|V|4F|W|X]|$U|4G|V|4H|W|X]|$U|4I|V|4J|W|X]|$U|4K|V|4L|W|X]|$U|4M|V|4N|W|X]|$U|4O|V|4P|W|X]]|R|@]|6|$]]|$L|17|N|18|2|19|P|4Q|Q|@$U|4R|V|4S|W|X]]|R|@]|6|$]]|$L|1A|N|1B|2|O|P|4T|Q|@$U|4U|V|4V|W|X]|$U|4W|V|4X|W|X]|$U|4Y|V|4Z|W|X]|$U|50|V|51|W|X]|$U|52|V|53|W|X]|$U|54|V|55|W|X]]|R|@]|6|$]]|$L|1C|N|1D|2|O|P|56|Q|@]|R|@]|6|$]]|$L|1E|N|1F|2|1G|P|57|Q|@]|R|@]|6|$]]|$L|1H|N|1I|2|O|P|58|Q|@$U|59|V|5A|W|X]]|R|@]|6|$]]|$L|1J|N|1K|2|1L|P|5B|Q|@]|R|@]|6|$1M|1N]]|$L|1O|N|1P|2|1Q|P|5C|Q|@]|R|@$U|5D|V|5E|L|5F]]|6|$]]|$L|1R|N|1S|2|O|P|5G|Q|@$U|5H|V|5I|W|X]|$U|5J|V|5K|W|X]]|R|@]|6|$]]|$L|1T|N|1U|2|O|P|5L|Q|@$U|5M|V|5N|W|X]|$U|5O|V|5P|W|X]]|R|@]|6|$]]|$L|1V|N|1W|2|1L|P|5Q|Q|@]|R|@]|6|$1M|1N]]|$L|1X|N|1P|2|1Q|P|5R|Q|@]|R|@$U|5S|V|5T|L|5U]]|6|$]]|$L|1Y|N|1Z|2|O|P|5V|Q|@$U|5W|V|5X|W|X]|$U|5Y|V|5Z|W|X]]|R|@]|6|$]]|$L|20|N|21|2|1L|P|60|Q|@]|R|@]|6|$1M|1N]]|$L|22|N|1P|2|1Q|P|61|Q|@]|R|@$U|62|V|63|L|64]]|6|$]]|$L|23|N|24|2|O|P|65|Q|@$U|66|V|67|W|X]]|R|@]|6|$]]|$L|25|N|26|2|1L|P|68|Q|@]|R|@]|6|$1M|1N]]|$L|27|N|1P|2|1Q|P|69|Q|@]|R|@$U|6A|V|6B|L|6C]]|6|$]]|$L|28|N|29|2|19|P|6D|Q|@]|R|@]|6|$]]|$L|2A|N|2B|2|2C|P|6E|Q|@]|R|@]|6|$]]|$L|2D|N|2E|2|O|P|6F|Q|@$U|6G|V|6H|W|X]|$U|6I|V|6J|W|2F]]|R|@]|6|$]]|$L|2G|N|2H|2|1G|P|6K|Q|@]|R|@]|6|$]]|$L|2I|N|2J|2|O|P|6L|Q|@]|R|@]|6|$]]|$L|2K|N|2L|2|O|P|6M|Q|@$U|6N|V|6O|W|X]|$U|6P|V|6Q|W|X]]|R|@]|6|$]]|$L|2M|N|2N|2|O|P|6R|Q|@$U|6S|V|6T|W|X]]|R|@]|6|$]]|$L|2O|N|2P|2|1L|P|6U|Q|@]|R|@]|6|$1M|1N]]|$L|2Q|N|2R|2|O|P|6V|Q|@$U|6W|V|6X|W|X]|$U|6Y|V|6Z|W|X]]|R|@]|6|$]]|$L|2S|N|2T|2|1L|P|70|Q|@]|R|@]|6|$1M|1N]]|$L|2U|N|2V|2|O|P|71|Q|@$U|72|V|73|W|X]]|R|@]|6|$]]|$L|2W|N|2X|2|1L|P|74|Q|@]|R|@]|6|$1M|1N]]|$L|2Y|N|2Z|2|O|P|75|Q|@$U|76|V|77|W|X]]|R|@]|6|$]]|$L|30|N|31|2|O|P|78|Q|@]|R|@]|6|$]]|$L|32|N|33|2|1L|P|79|Q|@]|R|@]|6|$1M|1N]]|$L|34|N|35|2|19|P|7A|Q|@$U|7B|V|7C|W|X]]|R|@]|6|$]]|$L|36|N|37|2|O|P|7D|Q|@]|R|@]|6|$]]|$L|38|N|39|2|3A|P|7E|Q|@$U|7F|V|7G|W|X]|$U|7H|V|7I|W|X]]|R|@]|6|$]]|$L|3B|N|3C|2|3A|P|7J|Q|@$U|7K|V|7L|W|X]]|R|@]|6|$]]|$L|3D|N|3E|2|1L|P|7M|Q|@]|R|@]|6|$1M|1N]]|$L|3F|N|2B|2|2C|P|7N|Q|@]|R|@]|6|$]]|$L|3G|N|3H|2|O|P|7O|Q|@]|R|@]|6|$]]|$L|3I|N|3J|2|12|P|7P|Q|@]|R|@]|6|$]]|$L|3K|N|3L|2|O|P|7Q|Q|@$U|7R|V|7S|W|X]|$U|7T|V|7U|W|X]]|R|@]|6|$]]|$L|3M|N|3N|2|3A|P|7V|Q|@$U|7W|V|7X|W|X]]|R|@]|6|$]]|$L|3O|N|3P|2|3A|P|7Y|Q|@$U|7Z|V|80|W|X]]|R|@]|6|$]]|$L|3Q|N|3R|2|3A|P|81|Q|@$U|82|V|83|W|X]]|R|@]|6|$]]|$L|3S|N|3T|2|3A|P|84|Q|@$U|85|V|86|W|X]]|R|@]|6|$]]|$L|3U|N|3V|2|3A|P|87|Q|@$U|88|V|89|W|X]]|R|@]|6|$]]|$L|3W|N|3X|2|3A|P|8A|Q|@$U|8B|V|8C|W|X]|$U|8D|V|8E|W|X]]|R|@]|6|$]]|$L|3Y|N|3Z|2|O|P|8F|Q|@]|R|@]|6|$]]]]","plain":"\n和往常一样,每个人团队开发者都在自己的本地分支上进行日常工作,相互独立又相互联系,一直以来相安无事,可是某天下午,上级领导突然急冲冲的打电话告诉你线上出bug了,需要你紧急修复,下班之前必须解决!\n我们天生就是创造 bug 的特殊群体,每天都在和各种各样的 bug 打交道,早已经习惯了这样的工作节奏,再也没有当初刚刚遇到紧急问题的手足无措,先喝杯茶,冷静一下,然后汇报领导说:放心吧!保证30min 内解决问题!\n背景\n学习了分支操作的相关知识,团队内部就基本的开发流程达成一致:\n假设线上是主干 master 分支,开发是 dev 分支,团队成员是自定义 custom 分支,平时开发时在大家在各自 custom 分支上工作,完成分配任务后再合并到开发 dev 分支,等到开发分支功能稳定后,由项目领导负责合并到主干分支 master .\n 上述流程只是开发流程的简化版,实际情况更加复杂,后续再介绍 gitflow 工作流相关知识.\n \n由于是线上出现 bug,理所当然是基于 master 分支检出临时分支,修复分支代号为 issue-110,然后定位 bug 并提交,最后再合并到 master 分支,如此一来成功修复 bug,完成既定任务,心安理得准备下班回家!\n如果真的向上述步骤那样操作,显然还不够冷静,刚才那一杯茶算是白喝了!因为这样操作可能会丢失现场数据,那很多工作岂不是白做了,下面简单演示一下:\n错误示例\n(一). 事发前正在自定义的 snow 分支上愉快编码中...\n# 线上分支 `master`,开发分支 `dev`,自定义分支 `snow`,当前正处于自定义分支\n$ git branch\n  dev\n  master\n* snow\n# 接到领导电话前正在自定义 `snow` 分支上进行愉快编码中...\n$ echo \"Happy coding\" >> test.txt\n$ git add test.txt\n$ git commit -m  \"Happy coding\"\n?\n(二). 事发时直接检出主分 master 分支,并紧急修复 bug .\n(2.1) 基于 master 分支检出 issue-110 分支,并修复提交.\n# 注意: 事发时正在思考人生,此时更改尚未添加到暂存区!\n$ echo \"who am i\" >> test.txt\n\n# 当前情况下,默认不允许直接切换到其他分支,因为工作区更改会被重写,这里为了演示错误示例,强制切换!\n$ git checkout -f master \n\n# 基于主干 `master` 分支检出修复 `issue-110`分支\n$ git checkout -b issue-110\nSwitched to a new branch 'issue-110'\n\n# 定位线上 `bug`并修复,假设将 `fast forward` 更改为 `fast forward not recommend`,瞬间修复 `bug`有没有!\n$ cat test.txt\nadd test.txt\nsee https://snowdreams1006.github.io/git/usage/remote-repository.html\nlearn git branch\nsee https://snowdreams1006.github.io/git/usage/branch-overview.html\ngit commit c1\ngit commit c2 and c3\ngit checkout -b dev\nfast forward\n$ vim test.txt\n$ cat test.txt\nadd test.txt\nsee https://snowdreams1006.github.io/git/usage/remote-repository.html\nlearn git branch\nsee https://snowdreams1006.github.io/git/usage/branch-overview.html\ngit commit c1\ngit commit c2 and c3\ngit checkout -b dev\nfast forward not recommend\n\n# 修复 `bug` 后,提交更改并备注已修复\n$ git add test.txt\n$ git commit -m \"fix bug about issue-110\"\n[issue-110 e60c8ad] fix bug about issue-110\n 1 file changed, 1 insertion(+), 1 deletion(-)\nsunpodeMacBook-Pro:git-demo sunpo$ git status\nOn branch issue-110\nnothing to commit, working tree clean\n$ \n?\n(2.1) 切换到主干 master 分支,并合并修复 issue-110 分支\n# 切换回 `master` 分支,合并修复 `issue-110` 分支\n$ git checkout master\nSwitched to branch 'master'\nYour branch is up to date with 'origin/master'.\n$ git merge issue-110\nUpdating 3fe94c0..e60c8ad\nFast-forward\n test.txt | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\n# 验证 `bug` 已修复: 更改为 `fast forward not recommend`\n$ cat test.txt\nadd test.txt\nsee https://snowdreams1006.github.io/git/usage/remote-repository.html\nlearn git branch\nsee https://snowdreams1006.github.io/git/usage/branch-overview.html\ngit commit c1\ngit commit c2 and c3\ngit checkout -b dev\nfast forward not recommend\n$ \n?\n(三). 事发后切换回自定义 snow 分支,打算下班回家.\n# 切换回 `snow` 分支,发现丢失了事发前的未保存更改:`who am i`\n$ git checkout snow\nSwitched to branch 'snow'\n$ cat test.txt\nadd test.txt\nsee https://snowdreams1006.github.io/git/usage/remote-repository.html\nlearn git branch\nsee https://snowdreams1006.github.io/git/usage/branch-overview.html\ngit commit c1\ngit commit c2 and c3\ngit checkout -b dev\nfast forward\nHappy coding\n$ \n?\n 现在还打算下班吗?你所做的更改因为没有提交或者不能提交造成全部丢失!\n \n结果\n因为手头工作进行到一半无法提交或者忘记提交等原因,为了临时修复紧急 bug 而直接切换到目标分支再回来时发现更改全部丢失,相当于那部分工作白忙活了!\n正确示例\n经过上述错误示例的惨痛教训后,再也不敢轻易切换分支了,原因在于工作区更改并没有被提交,或者说不能提交,如果能够有一种机制来保护案发现场,这样我们就能放心切换到其他分支工作,回来时一切如初,那该多好?\n幸运的是,git 确实提供这么一种机制,git stash 命令临时存储工作区,类似\"草稿箱\"作用.\n(一). 恢复工作区丢失更改,并使用 git stash 命令保存现场.\n# 修复工作区丢失更改: 同样未添加到暂存区\n$ echo \"learn git stash\" >> test.txt\n$ cat test.txt\nadd test.txt\nsee https://snowdreams1006.github.io/git/usage/remote-repository.html\nlearn git branch\nsee https://snowdreams1006.github.io/git/usage/branch-overview.html\ngit commit c1\ngit commit c2 and c3\ngit checkout -b dev\nfast forward\nHappy coding\nlearn git stash\n\n# 保护现场: 存储到\"草稿箱\"\n$ git stash\nSaved working directory and index state WIP on snow: 93227ba Happy coding\n(二). 切换到开发 dev 分支并合并修复 issue-110 分支.\n# 切换到开发 `dev` 分支\n$ git checkout dev\nSwitched to branch 'dev'\nsunpodeMacBook-Pro:git-demo sunpo$ git status\nOn branch dev\nnothing to commit, working tree clean\n# 合并修复 `issue-110` 分支\n$ git merge issue-110\nUpdating 3fe94c0..e60c8ad\nFast-forward\n test.txt | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\nsunpodeMacBook-Pro:git-demo sunpo$ git status\nOn branch dev\nnothing to commit, working tree clean\n$ \n(三). 切换回自定义 snow 分支,并恢复工作现场.\n# 切换回自定义 `snow` 分支\n$ git checkout snow\nSwitched to branch 'snow'\nsunpodeMacBook-Pro:git-demo sunpo$ git status\nOn branch snow\nnothing to commit, working tree clean\n$ \ngit status 命令返回结果怎么显示工作区是干净的,好不容易才将丢失的更改找回来怎么又不见了?!逗我玩?\n冷静,冷静,不要慌,既然工作现场已经保存到\"草稿箱\",那我们想要找回总要去\"草稿箱\"才能取出来吧?现在让我们看一下\"草稿箱\"有没有我们的工作现场?\n# 查看存储的\"草稿箱\"列表\n$ git stash list\nstash@{0}: WIP on snow: 93227ba Happy coding\n$ \n 这里的 stash@{0} 是草稿 id,因为\"草稿箱\"允许保存多条草稿!\n \n现在放心了吧,保存的\"草稿\"安然无恙躺在未知的某个地方,现在我们想办法恢复回工作区即可!\ngit stash apply 恢复草稿,然后 git stash drop 删除草稿\ngit stash pop 恢复并删除草稿\n# 恢复工作现场\n$ git stash pop\nOn branch snow\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    modified:   test.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nDropped refs/stash@{0} (b0c8ddc034d21f31204c82e9838fc5d4c01a49a8)\n\n# 工作现场已恢复,更改未添加到暂存区,`learn git stash` 又恢复了!\n$ git status\nOn branch snow\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    modified:   test.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ cat test.txt\nadd test.txt\nsee https://snowdreams1006.github.io/git/usage/remote-repository.html\nlearn git branch\nsee https://snowdreams1006.github.io/git/usage/branch-overview.html\ngit commit c1\ngit commit c2 and c3\ngit checkout -b dev\nfast forward\nHappy coding\nlearn git stash\n结果\n不论手头工作有没有提交,一旦工作区保存到\"草稿箱\"后,就放心大胆切换分支进行工作,回来时岁月静好,一切如初!\n小结\n紧急修复 bug 时,可以通过 git stash 保护工作现场,然后再切换到目标分支,检出修复分支,完成修复后切换到目标分支,合并修复分支,最后删除修复分支,此时再切换回本地分支后一切如初!\n工作区更改添加到\"草稿箱\" :  git stash,支持多次添加到\"草稿箱\"\n列出\"草稿箱\"内容 : git stash list\n恢复\"草稿箱\"内容 : git stash apply\n删除\"草稿箱\"内容 : git stash drop\n恢复并删除\"草稿箱\"内容 : git stash pop\n恢复|删除指定\"草稿箱\"内容 : git stash <stash-id>,例如 git stash apply stash@{0}\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n和往常一样,每个人团队开发者都在自己的本地分支上进行日常工作,相互独立又相互联系,一直以来相安无事,可是某天下午,上级领导突然急冲冲的打电话告诉你线上出bug...","summary":"和往常一样,每个人团队开发者都在自己的本地分支上进行日常工作,相互独立又相互联系,一直以来相安无事,可是某天下午,上级领导突然急冲冲的打电话告诉你线上出bug了...","abstract":"和往常一样,每个人团队开发者都在自己的本地分支上进行日常工作,相互独立又相互联系,一直以来相安无事,可是某天下午,上级领导突然急冲冲的打电话告诉你线上出bug了...","description":"","picture":"https://ask.qcloudimg.com/http-save/yehe-2952369/riplt64csj.png","coverImageUrl":"https://ask.qcloudimg.com/http-save/yehe-2952369/riplt64csj.png","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/22 16:51"},"authorId":2952369,"columnId":75668,"writeTime":1554275705,"updateTime":1554275705,"viewCount":86,"likeCount":3,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2684,"type":40,"actionInfo":{"articleId":1409890,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554275691,"detail":{"id":1409890,"articleId":1409890,"title":"git 入门教程之分支策略\n                                                                            原\n        ","content":"entityMap|0|type|IMAGE|mutability|IMMUTABLE|data|imageUrl|https://ask.qcloudimg.com/http-save/yehe-2952369/zz2zjxddax.png|imageAlt|git-merge-no-ff.png|1|https://ask.qcloudimg.com/http-save/yehe-2952369/3d9y213vbi.png|git-merge-no-ff-dev.png|2|https://ask.qcloudimg.com/http-save/yehe-2952369/w1ff5s21uc.png|git-merge-ff-dev.png|3|https://ask.qcloudimg.com/http-save/yehe-2952369/v4yg6cmzz4.png|git-merge-ff-dev-deleted.png|4|https://ask.qcloudimg.com/http-save/yehe-2952369/j4geq9fn7n.png|git-strategy.png|blocks|key|dgnpi|text|unstyled|depth|inlineStyleRanges|entityRanges|2tdde|默认情况下合并分支常常直接使用+git+merge+命令,是最方便快速的合并方法.其实这种情况下+git+采用的是+fast+forward+模式,特点是删除分支后,会丢失分支信息,好像从来没存在该分支一样,而我们推荐的是recursive+模式,能够保留分支的版本记录.|offset|length|style|CODE|2u24j|递归模式(recursive)|header-two|1rv6m|创建并切换+dev+分支,提交版本后切换回+master+分支,然后再合并+dev+分支,这不过这一次不再使用+git+merge+dev+命令:|dq4qd|#+创建并切换+dev+分支\n$+git+checkout+-b+dev\nSwitched+to+a+new+branch+'dev'\n#+提交版本\n$+echo+\"git+checkout+-b+dev\"+>>+test.txt\n$+git+add+test.txt\n$+git+commit+-m+\"git+checkout+-b+dev\"\n[dev+44d68f6]+git+checkout+-b+dev\n+1+file+changed,+1+insertion(%2B)\n#+切换回+master+分支\n$+git+checkout+master\nSwitched+to+branch+'master'\nYour+branch+is+ahead+of+'origin/master'+by+6+commits.\n++(use+\"git+push\"+to+publish+your+local+commits)\n$+|code-block|syntax|javascript|60ok1|现在添加+--no-ff+参数禁用+fast+forward+模式,即git+merge+--no-ff:|c6e56|$+git+merge+--no-ff+-m+\"git+merge+--no-ff+dev\"+dev\nMerge+made+by+the+'recursive'+strategy.\n+test.txt+%7C+1+%2B\n+1+file+changed,+1+insertion(%2B)\n$+|c29d4|上述内容显示,这次使用的不再是+fast+forward+模式,而是+recursive+模式,那让我们看一下提交历史有什么不同吧!|lbgg|$+git+log+--pretty=oneline+--graph\n*+++22fbef7+(HEAD+->+master)+git+merge+--no-ff+dev\n%7C\\++\n%7C+*+44d68f6(dev)+git+checkout+-b+dev\n%7C/++\n*+++3b8f434+fix+conflict\n%7C\\++\n%7C+*+0fe95f8+git+commit+c2\n*+%7C+0949cc3+git+commit+c3\n%7C/++\n*+5c482cd+git+commit+c1\n*+413a4d1+see+https://snowdreams1006.github.io/git/usage/branch-overview.html\n*+9c30e51+learn+git+branch\n*+b3d8193+(origin/master,+origin/HEAD)+see+https://snowdreams1006.github.io/git/usage/remote-repository.html\n*+8e62564+add+test.txt\n*+9b196aa+Initial+commit\n$+|kvlv|?|atomic|6n1q3|这种递归模式(recursive)+有一个明显的特点就是会产生一个新的+commit+,并不会像之前快速前进模式(fast+forward)那样单纯更改+HEAD+的指向.|ale1m|秉承着阅后即焚的习惯,分支一旦合并后就立即删除,现在删除+dev+分支,看一下会发生什么:|60cen|#+删除+dev+分支\n$+git+branch+-d+dev\nDeleted+branch+dev+(was+44d68f6).\n#+查看提交历史\n$+git+log+--pretty=oneline+--graph\n*+++22fbef7+(HEAD+->+master)+git+merge+--no-ff+dev\n%7C\\++\n%7C+*+44d68f6+git+checkout+-b+dev\n%7C/++\n*+++3b8f434+fix+conflict\n%7C\\++\n%7C+*+0fe95f8+git+commit+c2\n*+%7C+0949cc3+git+commit+c3\n%7C/++\n*+5c482cd+git+commit+c1\n*+413a4d1+see+https://snowdreams1006.github.io/git/usage/branch-overview.html\n*+9c30e50+learn+git+branch\n*+b3d8193+(origin/master,+origin/HEAD)+see+https://snowdreams1006.github.io/git/usage/remote-repository.html\n*+8e62564+add+test.txt\n*+9b196aa+Initial+commit\n$+|3u3uq|30m0n|由此可见,删除+dev+分支后仅仅少了+dev+的引用而已,原来+dev+分支所做的更改全部保留下来了!|b884q|快速前进模式(fast+forward)|803qq|创建并切换+dev+分支,提交版本后切换回+master+分支,然后再合并+dev+分支,使用+git+merge+dev+命令:|cn551|#+创建并切换+dev+分支\n$+git+checkout+-b+dev\nSwitched+to+a+new+branch+'dev'\n#+提交版本\n$+echo+\"fast+forward\"+>>+test.txt\n$+git+add+test.txt\n$+git+commit+-m+\"fast+forward\"\n[dev+3fe94c0]+fast+forward\n+1+file+changed,+1+insertion(%2B)\n$+|625j6|现在切换回+master+分支,采用默认的git+merge+命令合并+dev+分支:|bf5co|$+git+checkout+master\nSwitched+to+branch+'master'\nYour+branch+is+ahead+of+'origin/master'+by+8+commits.\n++(use+\"git+push\"+to+publish+your+local+commits)\nsunpodeMacBook-Pro:git-demo+sunpo$+git+merge+dev\nUpdating+22fbef7..3fe94c0\nFast-forward\n+test.txt+%7C+1+%2B\n+1+file+changed,+1+insertion(%2B)\n$+|9iplm|上述内容显示这次合并采用的是快速前进模式(fast+forward),让我们看一下提交历史:|31eg|$+git+log+--pretty=oneline+--graph\n*+3fe94c0+(HEAD+->+master,+dev)+fast+forward\n*+++22fbef7+git+merge+--no-ff+dev\n%7C\\++\n%7C+*+44d68f6+git+checkout+-b+dev\n%7C/++\n*+++3b8f434+fix+conflict\n%7C\\++\n%7C+*+0fe95f8+git+commit+c2\n*+%7C+0949cc3+git+commit+c3\n%7C/++\n*+5c482cd+git+commit+c1\n*+413a4d1+see+https://snowdreams1006.github.io/git/usage/branch-overview.html\n*+9c30e50+learn+git+branch\n*+b3d8193+(origin/master,+origin/HEAD)+see+https://snowdreams1006.github.io/git/usage/remote-repository.html\n*+8e62564+add+test.txt\n*+9b196aa+Initial+commit\n$+|2ua6b|上述内容表明,此次合并并没有产生新的+commit+,只是更改下+HEAD+指向而已(HEAD+->+master,+dev).|1v608|9ofvj|同样,现在删除+dev+分支,再看一下提交历史:|56bgp|#+删除+dev+分支\n$+git+branch+-d+dev\nDeleted+branch+dev+(was+3fe94c0).\n#+查看提交历史\n$+git+log+--pretty=oneline+--graph\n*+3fe94c0+(HEAD+->+master)+fast+forward\n*+++22fbef7+git+merge+--no-ff+dev\n%7C\\++\n%7C+*+44d68f6+git+checkout+-b+dev\n%7C/++\n*+++3b8f434+fix+conflict\n%7C\\++\n%7C+*+0fe95f8+git+commit+c2\n*+%7C+0949cc3+git+commit+c3\n%7C/++\n*+5c482cd+git+commit+c1\n*+413a4d1+see+https://snowdreams1006.github.io/git/usage/branch-overview.html\n*+9c30e50+learn+git+branch\n*+b3d8193+(origin/master,+origin/HEAD)+see+https://snowdreams1006.github.io/git/usage/remote-repository.html\n*+8e62564+add+test.txt\n*+9b196aa+Initial+commit\n$+|5h2a4|c48v8|由此可见,快速前进模式一旦删除分支后就彻底丢失了分支的信息,即便是从提交历史中也找不到曾经存在的痕迹!|ao283|分支策略|e2os3|git+是分布式版本控制系统,同时鼓励大量使用分支,如此一来大量的分支该如何管理?+实际开发中,建议准从以下原则进行分支管理:|damnt|master+分支作为主干分支,负责对外提供服务,要求稳定可靠,因为应该专人负责更新维护.|unordered-list-item|2rlu|dev+分支作为开发分支,取代+master+分支的开发地位,积累到一定产出时再合并到+master+分支.|5fs5f|feature+分支作为新功能分支,根据实际情况动态创建,删除分支,并适时合并到+dev+分支.|51b3u|bugFixed+分支作为修复特定+bug+分支,可能由+master+分支衍生而来,也可能由+dev+分支衍生等等,修复后及时合并到原分支.|b9o1j|custom+自定义分支,项目成员私有分支,由上级领导分配任务后各开发人员自行选择创建自己的分支,并根据实际情况决定合并到+dev+分支或+feature+等分支.|e62f1|7hl4s|小结|fejvc|快速前进模式(git+merge+<name>)不保留分支合并历史,递归模式(git+merge+--no-ff+-m+<remark>+<name>)保留分支合并历史.|dpemc|制定大家都认同的分支管理原则,并严格准守规则.|5sttm|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|G|9|1D|3|1M|C|33|9|0|5|9|0|6|3|M|6|12|3|1K|D|0|0|5|7|I|C|Z|H|0|0|G|C|Z|9|0|0|0|1|0|0|7|9|10|6|1L|C|25|4|0|T|3|0|0|0|1|1|0|8|3|K|3|X|3|0|7|C|0|6|3|M|6|12|3|1C|D|0|0|6|6|L|9|10|3|0|0|L|C|0|0|J|6|X|4|17|J|0|0|1|2|0|8|3|0|0|0|1|3|0|0|0|0|3|0|0|6|0|0|3|G|6|18|6|0|0|7|15|3|0|0|8|T|6|1C|3|0|0|6|1Q|3|1Y|7|0|0|1|4|0|0|7|G|13|10|0|0^^$0|$1|$2|3|4|5|6|$7|8|9|A]]|B|$2|3|4|5|6|$7|C|9|D]]|E|$2|3|4|5|6|$7|F|9|G]]|H|$2|3|4|5|6|$7|I|9|J]]|K|$2|3|4|5|6|$7|L|9|M]]]|N|@$O|P|Q|-4|2|R|S|37|T|@]|U|@]|6|$]]|$O|V|Q|W|2|R|S|38|T|@$X|39|Y|3A|Z|10]|$X|3B|Y|3C|Z|10]|$X|3D|Y|3E|Z|10]|$X|3F|Y|3G|Z|10]]|U|@]|6|$]]|$O|11|Q|12|2|13|S|3H|T|@$X|3I|Y|3J|Z|10]]|U|@]|6|$]]|$O|14|Q|15|2|R|S|3K|T|@$X|3L|Y|3M|Z|10]|$X|3N|Y|3O|Z|10]|$X|3P|Y|3Q|Z|10]|$X|3R|Y|3S|Z|10]]|U|@]|6|$]]|$O|16|Q|17|2|18|S|3T|T|@]|U|@]|6|$19|1A]]|$O|1B|Q|1C|2|R|S|3U|T|@$X|3V|Y|3W|Z|10]|$X|3X|Y|3Y|Z|10]|$X|3Z|Y|40|Z|10]]|U|@]|6|$]]|$O|1D|Q|1E|2|18|S|41|T|@]|U|@]|6|$19|1A]]|$O|1F|Q|1G|2|R|S|42|T|@$X|43|Y|44|Z|10]|$X|45|Y|46|Z|10]]|U|@]|6|$]]|$O|1H|Q|1I|2|18|S|47|T|@]|U|@]|6|$19|1A]]|$O|1J|Q|1K|2|1L|S|48|T|@]|U|@$X|49|Y|4A|O|4B]]|6|$]]|$O|1M|Q|1N|2|R|S|4C|T|@$X|4D|Y|4E|Z|10]|$X|4F|Y|4G|Z|10]|$X|4H|Y|4I|Z|10]|$X|4J|Y|4K|Z|10]]|U|@]|6|$]]|$O|1O|Q|1P|2|R|S|4L|T|@$X|4M|Y|4N|Z|10]]|U|@]|6|$]]|$O|1Q|Q|1R|2|18|S|4O|T|@]|U|@]|6|$19|1A]]|$O|1S|Q|1K|2|1L|S|4P|T|@]|U|@$X|4Q|Y|4R|O|4S]]|6|$]]|$O|1T|Q|1U|2|R|S|4T|T|@$X|4U|Y|4V|Z|10]|$X|4W|Y|4X|Z|10]|$X|4Y|Y|4Z|Z|10]]|U|@]|6|$]]|$O|1V|Q|1W|2|13|S|50|T|@$X|51|Y|52|Z|10]]|U|@]|6|$]]|$O|1X|Q|1Y|2|R|S|53|T|@$X|54|Y|55|Z|10]|$X|56|Y|57|Z|10]|$X|58|Y|59|Z|10]|$X|5A|Y|5B|Z|10]]|U|@]|6|$]]|$O|1Z|Q|20|2|18|S|5C|T|@]|U|@]|6|$19|1A]]|$O|21|Q|22|2|R|S|5D|T|@$X|5E|Y|5F|Z|10]|$X|5G|Y|5H|Z|10]|$X|5I|Y|5J|Z|10]]|U|@]|6|$]]|$O|23|Q|24|2|18|S|5K|T|@]|U|@]|6|$19|1A]]|$O|25|Q|26|2|R|S|5L|T|@$X|5M|Y|5N|Z|10]]|U|@]|6|$]]|$O|27|Q|28|2|18|S|5O|T|@]|U|@]|6|$19|1A]]|$O|29|Q|2A|2|R|S|5P|T|@$X|5Q|Y|5R|Z|10]|$X|5S|Y|5T|Z|10]|$X|5U|Y|5V|Z|10]]|U|@]|6|$]]|$O|2B|Q|1K|2|1L|S|5W|T|@]|U|@$X|5X|Y|5Y|O|5Z]]|6|$]]|$O|2C|Q|2D|2|R|S|60|T|@$X|61|Y|62|Z|10]]|U|@]|6|$]]|$O|2E|Q|2F|2|18|S|63|T|@]|U|@]|6|$19|1A]]|$O|2G|Q|1K|2|1L|S|64|T|@]|U|@$X|65|Y|66|O|67]]|6|$]]|$O|2H|Q|2I|2|R|S|68|T|@]|U|@]|6|$]]|$O|2J|Q|2K|2|13|S|69|T|@]|U|@]|6|$]]|$O|2L|Q|2M|2|R|S|6A|T|@$X|6B|Y|6C|Z|10]]|U|@]|6|$]]|$O|2N|Q|2O|2|2P|S|6D|T|@$X|6E|Y|6F|Z|10]]|U|@]|6|$]]|$O|2Q|Q|2R|2|2P|S|6G|T|@$X|6H|Y|6I|Z|10]|$X|6J|Y|6K|Z|10]|$X|6L|Y|6M|Z|10]]|U|@]|6|$]]|$O|2S|Q|2T|2|2P|S|6N|T|@$X|6O|Y|6P|Z|10]|$X|6Q|Y|6R|Z|10]]|U|@]|6|$]]|$O|2U|Q|2V|2|2P|S|6S|T|@$X|6T|Y|6U|Z|10]|$X|6V|Y|6W|Z|10]|$X|6X|Y|6Y|Z|10]]|U|@]|6|$]]|$O|2W|Q|2X|2|2P|S|6Z|T|@$X|70|Y|71|Z|10]|$X|72|Y|73|Z|10]|$X|74|Y|75|Z|10]]|U|@]|6|$]]|$O|2Y|Q|1K|2|1L|S|76|T|@]|U|@$X|77|Y|78|O|79]]|6|$]]|$O|2Z|Q|30|2|13|S|7A|T|@]|U|@]|6|$]]|$O|31|Q|32|2|2P|S|7B|T|@$X|7C|Y|7D|Z|10]|$X|7E|Y|7F|Z|10]]|U|@]|6|$]]|$O|33|Q|34|2|2P|S|7G|T|@]|U|@]|6|$]]|$O|35|Q|36|2|R|S|7H|T|@]|U|@]|6|$]]]]","plain":"\n默认情况下合并分支常常直接使用 git merge 命令,是最方便快速的合并方法.其实这种情况下 git 采用的是 fast forward 模式,特点是删除分支后,会丢失分支信息,好像从来没存在该分支一样,而我们推荐的是recursive 模式,能够保留分支的版本记录.\n递归模式(recursive)\n创建并切换 dev 分支,提交版本后切换回 master 分支,然后再合并 dev 分支,这不过这一次不再使用 git merge dev 命令:\n# 创建并切换 dev 分支\n$ git checkout -b dev\nSwitched to a new branch 'dev'\n# 提交版本\n$ echo \"git checkout -b dev\" >> test.txt\n$ git add test.txt\n$ git commit -m \"git checkout -b dev\"\n[dev 44d68f6] git checkout -b dev\n 1 file changed, 1 insertion(+)\n# 切换回 master 分支\n$ git checkout master\nSwitched to branch 'master'\nYour branch is ahead of 'origin/master' by 6 commits.\n  (use \"git push\" to publish your local commits)\n$ \n现在添加 --no-ff 参数禁用 fast forward 模式,即git merge --no-ff:\n$ git merge --no-ff -m \"git merge --no-ff dev\" dev\nMerge made by the 'recursive' strategy.\n test.txt | 1 +\n 1 file changed, 1 insertion(+)\n$ \n上述内容显示,这次使用的不再是 fast forward 模式,而是 recursive 模式,那让我们看一下提交历史有什么不同吧!\n$ git log --pretty=oneline --graph\n*   22fbef7 (HEAD -> master) git merge --no-ff dev\n|\\  \n| * 44d68f6(dev) git checkout -b dev\n|/  \n*   3b8f434 fix conflict\n|\\  \n| * 0fe95f8 git commit c2\n* | 0949cc3 git commit c3\n|/  \n* 5c482cd git commit c1\n* 413a4d1 see https://snowdreams1006.github.io/git/usage/branch-overview.html\n* 9c30e51 learn git branch\n* b3d8193 (origin/master, origin/HEAD) see https://snowdreams1006.github.io/git/usage/remote-repository.html\n* 8e62564 add test.txt\n* 9b196aa Initial commit\n$ \n?\n这种递归模式(recursive) 有一个明显的特点就是会产生一个新的 commit ,并不会像之前快速前进模式(fast forward)那样单纯更改 HEAD 的指向.\n秉承着阅后即焚的习惯,分支一旦合并后就立即删除,现在删除 dev 分支,看一下会发生什么:\n# 删除 dev 分支\n$ git branch -d dev\nDeleted branch dev (was 44d68f6).\n# 查看提交历史\n$ git log --pretty=oneline --graph\n*   22fbef7 (HEAD -> master) git merge --no-ff dev\n|\\  \n| * 44d68f6 git checkout -b dev\n|/  \n*   3b8f434 fix conflict\n|\\  \n| * 0fe95f8 git commit c2\n* | 0949cc3 git commit c3\n|/  \n* 5c482cd git commit c1\n* 413a4d1 see https://snowdreams1006.github.io/git/usage/branch-overview.html\n* 9c30e50 learn git branch\n* b3d8193 (origin/master, origin/HEAD) see https://snowdreams1006.github.io/git/usage/remote-repository.html\n* 8e62564 add test.txt\n* 9b196aa Initial commit\n$ \n?\n由此可见,删除 dev 分支后仅仅少了 dev 的引用而已,原来 dev 分支所做的更改全部保留下来了!\n快速前进模式(fast forward)\n创建并切换 dev 分支,提交版本后切换回 master 分支,然后再合并 dev 分支,使用 git merge dev 命令:\n# 创建并切换 dev 分支\n$ git checkout -b dev\nSwitched to a new branch 'dev'\n# 提交版本\n$ echo \"fast forward\" >> test.txt\n$ git add test.txt\n$ git commit -m \"fast forward\"\n[dev 3fe94c0] fast forward\n 1 file changed, 1 insertion(+)\n$ \n现在切换回 master 分支,采用默认的git merge 命令合并 dev 分支:\n$ git checkout master\nSwitched to branch 'master'\nYour branch is ahead of 'origin/master' by 8 commits.\n  (use \"git push\" to publish your local commits)\nsunpodeMacBook-Pro:git-demo sunpo$ git merge dev\nUpdating 22fbef7..3fe94c0\nFast-forward\n test.txt | 1 +\n 1 file changed, 1 insertion(+)\n$ \n上述内容显示这次合并采用的是快速前进模式(fast forward),让我们看一下提交历史:\n$ git log --pretty=oneline --graph\n* 3fe94c0 (HEAD -> master, dev) fast forward\n*   22fbef7 git merge --no-ff dev\n|\\  \n| * 44d68f6 git checkout -b dev\n|/  \n*   3b8f434 fix conflict\n|\\  \n| * 0fe95f8 git commit c2\n* | 0949cc3 git commit c3\n|/  \n* 5c482cd git commit c1\n* 413a4d1 see https://snowdreams1006.github.io/git/usage/branch-overview.html\n* 9c30e50 learn git branch\n* b3d8193 (origin/master, origin/HEAD) see https://snowdreams1006.github.io/git/usage/remote-repository.html\n* 8e62564 add test.txt\n* 9b196aa Initial commit\n$ \n上述内容表明,此次合并并没有产生新的 commit ,只是更改下 HEAD 指向而已(HEAD -> master, dev).\n?\n同样,现在删除 dev 分支,再看一下提交历史:\n# 删除 dev 分支\n$ git branch -d dev\nDeleted branch dev (was 3fe94c0).\n# 查看提交历史\n$ git log --pretty=oneline --graph\n* 3fe94c0 (HEAD -> master) fast forward\n*   22fbef7 git merge --no-ff dev\n|\\  \n| * 44d68f6 git checkout -b dev\n|/  \n*   3b8f434 fix conflict\n|\\  \n| * 0fe95f8 git commit c2\n* | 0949cc3 git commit c3\n|/  \n* 5c482cd git commit c1\n* 413a4d1 see https://snowdreams1006.github.io/git/usage/branch-overview.html\n* 9c30e50 learn git branch\n* b3d8193 (origin/master, origin/HEAD) see https://snowdreams1006.github.io/git/usage/remote-repository.html\n* 8e62564 add test.txt\n* 9b196aa Initial commit\n$ \n?\n由此可见,快速前进模式一旦删除分支后就彻底丢失了分支的信息,即便是从提交历史中也找不到曾经存在的痕迹!\n分支策略\ngit 是分布式版本控制系统,同时鼓励大量使用分支,如此一来大量的分支该如何管理? 实际开发中,建议准从以下原则进行分支管理:\nmaster 分支作为主干分支,负责对外提供服务,要求稳定可靠,因为应该专人负责更新维护.\ndev 分支作为开发分支,取代 master 分支的开发地位,积累到一定产出时再合并到 master 分支.\nfeature 分支作为新功能分支,根据实际情况动态创建,删除分支,并适时合并到 dev 分支.\nbugFixed 分支作为修复特定 bug 分支,可能由 master 分支衍生而来,也可能由 dev 分支衍生等等,修复后及时合并到原分支.\ncustom 自定义分支,项目成员私有分支,由上级领导分配任务后各开发人员自行选择创建自己的分支,并根据实际情况决定合并到 dev 分支或 feature 等分支.\n?\n小结\n快速前进模式(git merge <name>)不保留分支合并历史,递归模式(git merge --no-ff -m <remark> <name>)保留分支合并历史.\n制定大家都认同的分支管理原则,并严格准守规则.\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n默认情况下合并分支常常直接使用 git merge 命令,是最方便快速的合并方法.其实这种情况下 git 采用的是 fast forward 模式,特点是删除...","summary":"默认情况下合并分支常常直接使用 git merge 命令,是最方便快速的合并方法.其实这种情况下 git 采用的是 fast forward 模式,特点是删除分...","abstract":"默认情况下合并分支常常直接使用 git merge 命令,是最方便快速的合并方法.其实这种情况下 git 采用的是 fast forward 模式,特点是删除分...","description":"","picture":"https://ask.qcloudimg.com/http-save/yehe-2952369/zz2zjxddax.png","coverImageUrl":"https://ask.qcloudimg.com/http-save/yehe-2952369/zz2zjxddax.png","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/21 07:35"},"authorId":2952369,"columnId":75668,"writeTime":1554275691,"updateTime":1554275691,"viewCount":70,"likeCount":3,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}},{"id":2683,"type":40,"actionInfo":{"articleId":1409889,"columnId":75668,"articleOwnerUid":2952369},"createTime":1554275677,"detail":{"id":1409889,"articleId":1409889,"title":"git 入门教程之冲突合并\n                                                                            原","content":"entityMap|0|type|IMAGE|mutability|IMMUTABLE|data|imageUrl|https://ask.qcloudimg.com/http-save/yehe-2952369/uo7741jeaj.png|imageAlt|git-commit-c1.png|1|https://ask.qcloudimg.com/http-save/yehe-2952369/4u7eqbgyox.png|git-checkout-feature.png|2|https://ask.qcloudimg.com/http-save/yehe-2952369/t1mkf61o37.png|git-commit-c2.png|3|https://ask.qcloudimg.com/http-save/yehe-2952369/x5jofeivmy.png|git-checkout-master-c1.png|4|https://ask.qcloudimg.com/http-save/yehe-2952369/ssgvm6bumm.png|git-commit-c3.png|5|https://ask.qcloudimg.com/http-save/yehe-2952369/qstfazcldp.png|git-merge-with-conflict.png|blocks|key|4369c|text|unstyled|depth|inlineStyleRanges|entityRanges|2tntc|如果足够幸运的话,团队成员互不影响,彼此相安无事,大家各自基于+master+分支的某个+commit+创建自己的分支,平时在分支上独立工作,等到一段时间后再合并+merge+到+master+分支,这样一样+master+作为各个功能的集大成者,最终完成项目.|offset|length|style|CODE|bk7bp|然而事情总不是一帆风顺的,团队协作时由于意见不同,遇到冲突简直是家常便饭,既然无法回避冲突,当冲突发生时如何应该呢?|iv6f|背景|header-two|4ma3n|基于+master+分支上的某个+commit+,新功能由此继续开发:|d7653|echo+\"git+commit+c1\"+>>+test.txt\n$+git+add+test.txt\n$+git+commit+-m+\"git+commit+c1\"|code-block|syntax|javascript|6epkb|?|atomic|bj7an|新功能分支命名为+feature+,使用git+checkout+-b+<name>+创建分支并切换:|dsn82|$git+checkout+-b+feature\nSwitched+to+a+new+branch+'feature'\n$+|2r9k8|37pnl|在新功能+feature+分支上开发新功能,并提交:|32bqt|$+echo+\"git+commit+c2\"+>>+test.txt\n$+git+add+test.txt\n$+git+commit+-m+\"git+commit+c2\"\n[feature+0fe95f8]+git+commit+c2\n+1+file+changed,+1+insertion(%2B)\n$+|8vsol|1utdu|无论新功能+feature+是否开发完毕,团队的其他成员均有可能处于+master+分支并做相应更改:|20uib|$+git+checkout+master\nSwitched+to+branch+'master'\nYour+branch+is+ahead+of+'origin/master'+by+3+commits.\n++(use+\"git+push\"+to+publish+your+local+commits)|a7ado|533rq|其他成员对新功能有着自己的看法,于是也提交了版本,由于我们之前提交的是+git+commit+c2,而此时master+分支提交的是git+commit+c3,显然我们两个人的意见不一致!|90ifg|$+echo+\"git+commit+c3\"+>>+test.txt\n$+git+add+test.txt\n$+git+commit+-m+\"git+commit+c3\"\n[master+0949cc3]+git+commit+c3\n+1+file+changed,+1+insertion(%2B)\n$+|5saml|a39r7|正在此时,feature+分支的新功能已开发完毕并主动切换回+master+分支,准备合并+feature+分支.|3rpdr|#+合并+feature+分支\n$+git+merge+feature\nAuto-merging+test.txt\nCONFLICT+(content):+Merge+conflict+in+test.txt\nAutomatic+merge+failed;+fix+conflicts+and+then+commit+the+result.\n$|e7sue|由于项目成员沟通不畅或者意见不一致,导致了代码冲突,git+作为版本控制系统,自然无法解决这类问题,总不能擅自做主抛弃后来的更改吧或者抛弃分支更改?所以+git+只负责抛出问题,等待我们程序员去解决问题.|abuum|既然是人的问题,那我们看一下我们到底是哪里不一致,为什么会产生冲突?|bc8o|#+查看状态\n$+git+status\nOn+branch+master\nYour+branch+is+ahead+of+'origin/master'+by+4+commits.\n++(use+\"git+push\"+to+publish+your+local+commits)\n\nYou+have+unmerged+paths.\n++(fix+conflicts+and+run+\"git+commit\")\n++(use+\"git+merge+--abort\"+to+abort+the+merge)\n\nUnmerged+paths:\n++(use+\"git+add+<file>...\"+to+mark+resolution)\n\n++++both+modified:+++test.txt\n\nno+changes+added+to+commit+(use+\"git+add\"+and/or+\"git+commit+-a\")\n#+比较差异\n$+git+diff+\ndiff+--cc+test.txt\nindex+6e00f87,0f95fd7..0000000\n---+a/test.txt\n%2B%2B%2B+b/test.txt\n@@@+-3,4+-3,4+%2B3,8+@@@+see+https://snowdreams1006.github.io/gi\n++learn+git+branch\n++see+https://snowdreams1006.github.io/git/usage/branch-overview.html\n++git+commit+c1\n%2B%2B<<<<<<<+HEAD\n+%2Bgit+commit+c3\n%2B%2B=======\n%2B+git+commit+c2\n%2B%2B>>>>>>>+feature|4ovc7|和我们预期一样,test.txt+文件产生了冲突,当前+HEAD+指向的提交即+master+分支是+git+commit+c3+,而+feature+分支是+git+commit+c2,对于同一个文件的同一行内容发生不同的更改,git+不知道也不应该知道如何处理.|br6qr|#+查看内容\n$+cat+test.txt\nadd+test.txt\nsee+https://snowdreams1006.github.io/git/usage/remote-repository.html\nlearn+git+branch\nsee+https://snowdreams1006.github.io/git/usage/branch-overview.html\ngit+commit+c1\n<<<<<<<+HEAD\ngit+commit+c3\n=======\ngit+commit+c2\n>>>>>>>+feature|41did|git+用+<<<<<<<+标记一个分支冲突开始,=======+标记分支分割线,>>>>>>>+标记另一个分支结束.|5jrlb|经过冲突双方的讨论后,彼此间达成妥协,决定修改成git+commit+c2+and+c3+,修改后继续提交:|abo3h|#+编辑冲突文件,按照协商一致的内容修改文件\n$+vim+test.txt\n#+将冲突内容更改为+git+commit+c2+and+c3\n$+cat+test.txt\nadd+test.txt\nsee+https://snowdreams1006.github.io/git/usage/remote-repository.html\nlearn+git+branch\nsee+https://snowdreams1006.github.io/git/usage/branch-overview.html\ngit+commit+c1\ngit+commit+c2+and+c3\n$+git+add+test.txt\n$+git+commit+-m+\"fix+conflict\"\n[master+3b8f434]+fix+conflict|6jhrl|冲突已经解决,现在回顾一下提交历史,使用git+log+--graph+图形化展示提交历史:|bji4g|#+查看提交日志\n$+git+log+--pretty=oneline+--graph\n*+++3b8f434013caa8c27fade4c59d7aa2ee2c079636+(HEAD+->+master)+fix+conflict\n%7C\\++\n%7C+*+0fe95f871b371834d30ea17faa82f84b7d67672b+(feature)+git+commit+c2\n*+%7C+0949cc319e099d554795d03c69ee38923af00d6c+git+commit+c3\n%7C/++\n*+5c482cd9965b9dfd4f273b43b240ed7db66167a8+git+commit+c1\n*+413a4d1d2aab5ab85b6097d4b9f81cb5601c3b26+see+https://snowdreams1006.github.io/git/usage/branch-overview.html\n*+9c30e50248b773e38b032477a859e87abe7c1bb0+learn+git+branch\n*+b3d8193bbcb9f76c47e831e3e212f2405ae09f93+(origin/master,+origin/HEAD)+see+https://snowdreams1006.github.io/git/usage/remote-repository.html\n*+8e625640348a47ac922409a1ecb4c844385582aa+add+test.txt\n*+9b196aab5bc87eeb11709c9eef35fca283e05c61+Initial+commit\n$+|ai96l|1gte0|最后,删除新功能分支+feature+,不用的分支及时清理干净,需要时再创建分支.|btjt6|$+git+branch+-d+feature|1delt|小结|52kc9|无法杜绝冲突的发生,代码上的冲突本质上是人为因素造成的冲突.|unordered-list-item|sjbk|解决冲突需要有关双方协商解决,不可能独自解决冲突,除非你抛弃自我,完全以对方为准.|pi72|使用+git+log+--graph+命令可以图表化查看提交历史,抑或+git+log+--pretty=oneline+--graph|9v7um|+++++(adsbygoogle+=+window.adsbygoogle+%7C%7C+[]).push({});++^0|0|W|6|19|6|2A|5|2I|6|2X|6|0|0|0|3|6|H|6|0|0|0|1|0|0|9|7|K|M|0|0|0|1|1|0|5|7|0|0|0|1|2|0|6|7|Z|6|0|0|0|1|3|0|10|D|1H|6|1U|D|0|0|0|1|4|0|5|7|V|6|1A|7|0|0|Q|3|25|3|0|0|0|8|8|S|4|14|6|1F|D|1W|7|28|D|37|3|0|0|0|3|6|7|P|7|15|7|0|O|K|0|0|K|F|0|0|0|1|5|0|B|7|0|0|0|0|0|3|F|10|W|0^^$0|$1|$2|3|4|5|6|$7|8|9|A]]|B|$2|3|4|5|6|$7|C|9|D]]|E|$2|3|4|5|6|$7|F|9|G]]|H|$2|3|4|5|6|$7|I|9|J]]|K|$2|3|4|5|6|$7|L|9|M]]|N|$2|3|4|5|6|$7|O|9|P]]]|Q|@$R|S|T|-4|2|U|V|37|W|@]|X|@]|6|$]]|$R|Y|T|Z|2|U|V|38|W|@$10|39|11|3A|12|13]|$10|3B|11|3C|12|13]|$10|3D|11|3E|12|13]|$10|3F|11|3G|12|13]|$10|3H|11|3I|12|13]]|X|@]|6|$]]|$R|14|T|15|2|U|V|3J|W|@]|X|@]|6|$]]|$R|16|T|17|2|18|V|3K|W|@]|X|@]|6|$]]|$R|19|T|1A|2|U|V|3L|W|@$10|3M|11|3N|12|13]|$10|3O|11|3P|12|13]]|X|@]|6|$]]|$R|1B|T|1C|2|1D|V|3Q|W|@]|X|@]|6|$1E|1F]]|$R|1G|T|1H|2|1I|V|3R|W|@]|X|@$10|3S|11|3T|R|3U]]|6|$]]|$R|1J|T|1K|2|U|V|3V|W|@$10|3W|11|3X|12|13]|$10|3Y|11|3Z|12|13]]|X|@]|6|$]]|$R|1L|T|1M|2|1D|V|40|W|@]|X|@]|6|$1E|1F]]|$R|1N|T|1H|2|1I|V|41|W|@]|X|@$10|42|11|43|R|44]]|6|$]]|$R|1O|T|1P|2|U|V|45|W|@$10|46|11|47|12|13]]|X|@]|6|$]]|$R|1Q|T|1R|2|1D|V|48|W|@]|X|@]|6|$1E|1F]]|$R|1S|T|1H|2|1I|V|49|W|@]|X|@$10|4A|11|4B|R|4C]]|6|$]]|$R|1T|T|1U|2|U|V|4D|W|@$10|4E|11|4F|12|13]|$10|4G|11|4H|12|13]]|X|@]|6|$]]|$R|1V|T|1W|2|1D|V|4I|W|@]|X|@]|6|$1E|1F]]|$R|1X|T|1H|2|1I|V|4J|W|@]|X|@$10|4K|11|4L|R|4M]]|6|$]]|$R|1Y|T|1Z|2|U|V|4N|W|@$10|4O|11|4P|12|13]|$10|4Q|11|4R|12|13]|$10|4S|11|4T|12|13]]|X|@]|6|$]]|$R|20|T|21|2|1D|V|4U|W|@]|X|@]|6|$1E|1F]]|$R|22|T|1H|2|1I|V|4V|W|@]|X|@$10|4W|11|4X|R|4Y]]|6|$]]|$R|23|T|24|2|U|V|4Z|W|@$10|50|11|51|12|13]|$10|52|11|53|12|13]|$10|54|11|55|12|13]]|X|@]|6|$]]|$R|25|T|26|2|1D|V|56|W|@]|X|@]|6|$1E|1F]]|$R|27|T|28|2|U|V|57|W|@$10|58|11|59|12|13]|$10|5A|11|5B|12|13]]|X|@]|6|$]]|$R|29|T|2A|2|U|V|5C|W|@]|X|@]|6|$]]|$R|2B|T|2C|2|1D|V|5D|W|@]|X|@]|6|$1E|1F]]|$R|2D|T|2E|2|U|V|5E|W|@$10|5F|11|5G|12|13]|$10|5H|11|5I|12|13]|$10|5J|11|5K|12|13]|$10|5L|11|5M|12|13]|$10|5N|11|5O|12|13]|$10|5P|11|5Q|12|13]|$10|5R|11|5S|12|13]]|X|@]|6|$]]|$R|2F|T|2G|2|1D|V|5T|W|@]|X|@]|6|$1E|1F]]|$R|2H|T|2I|2|U|V|5U|W|@$10|5V|11|5W|12|13]|$10|5X|11|5Y|12|13]|$10|5Z|11|60|12|13]|$10|61|11|62|12|13]]|X|@]|6|$]]|$R|2J|T|2K|2|U|V|63|W|@$10|64|11|65|12|13]]|X|@]|6|$]]|$R|2L|T|2M|2|1D|V|66|W|@]|X|@]|6|$1E|1F]]|$R|2N|T|2O|2|U|V|67|W|@$10|68|11|69|12|13]]|X|@]|6|$]]|$R|2P|T|2Q|2|1D|V|6A|W|@]|X|@]|6|$1E|1F]]|$R|2R|T|1H|2|1I|V|6B|W|@]|X|@$10|6C|11|6D|R|6E]]|6|$]]|$R|2S|T|2T|2|U|V|6F|W|@$10|6G|11|6H|12|13]]|X|@]|6|$]]|$R|2U|T|2V|2|1D|V|6I|W|@]|X|@]|6|$1E|1F]]|$R|2W|T|2X|2|18|V|6J|W|@]|X|@]|6|$]]|$R|2Y|T|2Z|2|30|V|6K|W|@]|X|@]|6|$]]|$R|31|T|32|2|30|V|6L|W|@]|X|@]|6|$]]|$R|33|T|34|2|30|V|6M|W|@$10|6N|11|6O|12|13]|$10|6P|11|6Q|12|13]]|X|@]|6|$]]|$R|35|T|36|2|U|V|6R|W|@]|X|@]|6|$]]]]","plain":"\n如果足够幸运的话,团队成员互不影响,彼此相安无事,大家各自基于 master 分支的某个 commit 创建自己的分支,平时在分支上独立工作,等到一段时间后再合并 merge 到 master 分支,这样一样 master 作为各个功能的集大成者,最终完成项目.\n然而事情总不是一帆风顺的,团队协作时由于意见不同,遇到冲突简直是家常便饭,既然无法回避冲突,当冲突发生时如何应该呢?\n背景\n基于 master 分支上的某个 commit ,新功能由此继续开发:\necho \"git commit c1\" >> test.txt\n$ git add test.txt\n$ git commit -m \"git commit c1\"\n?\n新功能分支命名为 feature ,使用git checkout -b <name> 创建分支并切换:\n$git checkout -b feature\nSwitched to a new branch 'feature'\n$ \n?\n在新功能 feature 分支上开发新功能,并提交:\n$ echo \"git commit c2\" >> test.txt\n$ git add test.txt\n$ git commit -m \"git commit c2\"\n[feature 0fe95f8] git commit c2\n 1 file changed, 1 insertion(+)\n$ \n?\n无论新功能 feature 是否开发完毕,团队的其他成员均有可能处于 master 分支并做相应更改:\n$ git checkout master\nSwitched to branch 'master'\nYour branch is ahead of 'origin/master' by 3 commits.\n  (use \"git push\" to publish your local commits)\n?\n其他成员对新功能有着自己的看法,于是也提交了版本,由于我们之前提交的是 git commit c2,而此时master 分支提交的是git commit c3,显然我们两个人的意见不一致!\n$ echo \"git commit c3\" >> test.txt\n$ git add test.txt\n$ git commit -m \"git commit c3\"\n[master 0949cc3] git commit c3\n 1 file changed, 1 insertion(+)\n$ \n?\n正在此时,feature 分支的新功能已开发完毕并主动切换回 master 分支,准备合并 feature 分支.\n# 合并 feature 分支\n$ git merge feature\nAuto-merging test.txt\nCONFLICT (content): Merge conflict in test.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n$\n由于项目成员沟通不畅或者意见不一致,导致了代码冲突,git 作为版本控制系统,自然无法解决这类问题,总不能擅自做主抛弃后来的更改吧或者抛弃分支更改?所以 git 只负责抛出问题,等待我们程序员去解决问题.\n既然是人的问题,那我们看一下我们到底是哪里不一致,为什么会产生冲突?\n# 查看状态\n$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 4 commits.\n  (use \"git push\" to publish your local commits)\n\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n  (use \"git merge --abort\" to abort the merge)\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\n    both modified:   test.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n# 比较差异\n$ git diff \ndiff --cc test.txt\nindex 6e00f87,0f95fd7..0000000\n--- a/test.txt\n+++ b/test.txt\n@@@ -3,4 -3,4 +3,8 @@@ see https://snowdreams1006.github.io/gi\n  learn git branch\n  see https://snowdreams1006.github.io/git/usage/branch-overview.html\n  git commit c1\n++<<<<<<< HEAD\n +git commit c3\n++=======\n+ git commit c2\n++>>>>>>> feature\n和我们预期一样,test.txt 文件产生了冲突,当前 HEAD 指向的提交即 master 分支是 git commit c3 ,而 feature 分支是 git commit c2,对于同一个文件的同一行内容发生不同的更改,git 不知道也不应该知道如何处理.\n# 查看内容\n$ cat test.txt\nadd test.txt\nsee https://snowdreams1006.github.io/git/usage/remote-repository.html\nlearn git branch\nsee https://snowdreams1006.github.io/git/usage/branch-overview.html\ngit commit c1\n<<<<<<< HEAD\ngit commit c3\n=======\ngit commit c2\n>>>>>>> feature\ngit 用 <<<<<<< 标记一个分支冲突开始,======= 标记分支分割线,>>>>>>> 标记另一个分支结束.\n经过冲突双方的讨论后,彼此间达成妥协,决定修改成git commit c2 and c3 ,修改后继续提交:\n# 编辑冲突文件,按照协商一致的内容修改文件\n$ vim test.txt\n# 将冲突内容更改为 git commit c2 and c3\n$ cat test.txt\nadd test.txt\nsee https://snowdreams1006.github.io/git/usage/remote-repository.html\nlearn git branch\nsee https://snowdreams1006.github.io/git/usage/branch-overview.html\ngit commit c1\ngit commit c2 and c3\n$ git add test.txt\n$ git commit -m \"fix conflict\"\n[master 3b8f434] fix conflict\n冲突已经解决,现在回顾一下提交历史,使用git log --graph 图形化展示提交历史:\n# 查看提交日志\n$ git log --pretty=oneline --graph\n*   3b8f434013caa8c27fade4c59d7aa2ee2c079636 (HEAD -> master) fix conflict\n|\\  \n| * 0fe95f871b371834d30ea17faa82f84b7d67672b (feature) git commit c2\n* | 0949cc319e099d554795d03c69ee38923af00d6c git commit c3\n|/  \n* 5c482cd9965b9dfd4f273b43b240ed7db66167a8 git commit c1\n* 413a4d1d2aab5ab85b6097d4b9f81cb5601c3b26 see https://snowdreams1006.github.io/git/usage/branch-overview.html\n* 9c30e50248b773e38b032477a859e87abe7c1bb0 learn git branch\n* b3d8193bbcb9f76c47e831e3e212f2405ae09f93 (origin/master, origin/HEAD) see https://snowdreams1006.github.io/git/usage/remote-repository.html\n* 8e625640348a47ac922409a1ecb4c844385582aa add test.txt\n* 9b196aab5bc87eeb11709c9eef35fca283e05c61 Initial commit\n$ \n?\n最后,删除新功能分支 feature ,不用的分支及时清理干净,需要时再创建分支.\n$ git branch -d feature\n小结\n无法杜绝冲突的发生,代码上的冲突本质上是人为因素造成的冲突.\n解决冲突需要有关双方协商解决,不可能独自解决冲突,除非你抛弃自我,完全以对方为准.\n使用 git log --graph 命令可以图表化查看提交历史,抑或 git log --pretty=oneline --graph\n     (adsbygoogle = window.adsbygoogle || []).push({});  ","brief":"\n如果足够幸运的话,团队成员互不影响,彼此相安无事,大家各自基于 master 分支的某个 commit 创建自己的分支,平时在分支上独立工作,等到一段时间后再...","summary":"如果足够幸运的话,团队成员互不影响,彼此相安无事,大家各自基于 master 分支的某个 commit 创建自己的分支,平时在分支上独立工作,等到一段时间后再合...","abstract":"如果足够幸运的话,团队成员互不影响,彼此相安无事,大家各自基于 master 分支的某个 commit 创建自己的分支,平时在分支上独立工作,等到一段时间后再合...","description":"","picture":"https://ask.qcloudimg.com/http-save/yehe-2952369/uo7741jeaj.png","coverImageUrl":"https://ask.qcloudimg.com/http-save/yehe-2952369/uo7741jeaj.png","sourceType":99,"sourceDetail":{},"channelType":2,"channelDetail":{"source":"oschina","originalTime":"03/20 15:58"},"authorId":2952369,"columnId":75668,"writeTime":1554275677,"updateTime":1554275677,"viewCount":69,"likeCount":3,"commentCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[{"tagId":10283,"tagName":"Git"}],"column":{"id":75668,"name":"雪之梦技术驿站","desc":"雪之梦技术驿站又名snowdreams1006的技术小屋.主要分享个人的学习经验,一家之言,仅供参考.","icon":"https://ask.qcloudimg.com/column-icons/75668/2952369/rs2libapbs.png","background":"","status":2,"creatorId":2952369,"memberCount":1,"articleCount":64,"followCount":12,"createdTime":1553570025}}}]}}